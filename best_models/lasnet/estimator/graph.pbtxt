node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/cond/Switch"
  op: "Switch"
  input: "global_step/IsVariableInitialized"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_t"
  op: "Identity"
  input: "global_step/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_f"
  op: "Identity"
  input: "global_step/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/pred_id"
  op: "Identity"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read"
  op: "Identity"
  input: "global_step/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read/Switch"
  op: "RefSwitch"
  input: "global_step"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Switch_1"
  op: "Switch"
  input: "global_step/Initializer/zeros"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Merge"
  op: "Merge"
  input: "global_step/cond/Switch_1"
  input: "global_step/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "Add"
  input: "global_step/cond/Merge"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 46
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 46
          }
        }
        string_val: "drive/My Drive/classic/train_database_29.tfrecords"
        string_val: "drive/My Drive/classic/train_database_20.tfrecords"
        string_val: "drive/My Drive/classic/train_database_10.tfrecords"
        string_val: "drive/My Drive/classic/train_database_27.tfrecords"
        string_val: "drive/My Drive/classic2/train_database_56.tfrecords"
        string_val: "drive/My Drive/classic/train_database_9.tfrecords"
        string_val: "drive/My Drive/classic2/train_database_57.tfrecords"
        string_val: "drive/My Drive/classic/train_database_44.tfrecords"
        string_val: "drive/My Drive/classic2/train_database_53.tfrecords"
        string_val: "drive/My Drive/classic2/train_database_58.tfrecords"
        string_val: "drive/My Drive/classic/train_database_26.tfrecords"
        string_val: "drive/My Drive/classic/train_database_21.tfrecords"
        string_val: "drive/My Drive/classic/train_database_50.tfrecords"
        string_val: "drive/My Drive/classic2/train_database_75.tfrecords"
        string_val: "drive/My Drive/classic2/train_database_60.tfrecords"
        string_val: "drive/My Drive/classic2/train_database_52.tfrecords"
        string_val: "drive/My Drive/classic2/train_database_76.tfrecords"
        string_val: "drive/My Drive/classic2/train_database_65.tfrecords"
        string_val: "drive/My Drive/classic/train_database_40.tfrecords"
        string_val: "drive/My Drive/classic/train_database_2.tfrecords"
        string_val: "drive/My Drive/classic/train_database_14.tfrecords"
        string_val: "drive/My Drive/classic2/train_database_81.tfrecords"
        string_val: "drive/My Drive/classic/train_database_49.tfrecords"
        string_val: "drive/My Drive/classic/train_database_16.tfrecords"
        string_val: "drive/My Drive/classic/train_database_6.tfrecords"
        string_val: "drive/My Drive/classic2/train_database_92.tfrecords"
        string_val: "drive/My Drive/classic2/train_database_64.tfrecords"
        string_val: "drive/My Drive/classic2/train_database_91.tfrecords"
        string_val: "drive/My Drive/classic/train_database_5.tfrecords"
        string_val: "drive/My Drive/classic2/train_database_84.tfrecords"
        string_val: "drive/My Drive/classic2/train_database_54.tfrecords"
        string_val: "drive/My Drive/classic/train_database_30.tfrecords"
        string_val: "drive/My Drive/classic/train_database_12.tfrecords"
        string_val: "drive/My Drive/classic2/train_database_74.tfrecords"
        string_val: "drive/My Drive/classic2/train_database_90.tfrecords"
        string_val: "drive/My Drive/classic2/train_database_80.tfrecords"
        string_val: "drive/My Drive/classic2/train_database_67.tfrecords"
        string_val: "drive/My Drive/classic/train_database_7.tfrecords"
        string_val: "drive/My Drive/classic2/train_database_61.tfrecords"
        string_val: "drive/My Drive/classic/train_database_22.tfrecords"
        string_val: "drive/My Drive/classic2/train_database_51.tfrecords"
        string_val: "drive/My Drive/classic/train_database_4.tfrecords"
        string_val: "drive/My Drive/classic/train_database_48.tfrecords"
        string_val: "drive/My Drive/classic/train_database_17.tfrecords"
        string_val: "drive/My Drive/classic2/train_database_66.tfrecords"
        string_val: "drive/My Drive/classic2/train_database_83.tfrecords"
      }
    }
  }
}
node {
  name: "flat_filenames/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "flat_filenames"
  op: "Reshape"
  input: "Const"
  input: "flat_filenames/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 46
          }
        }
      }
    }
  }
}
node {
  name: "TensorSliceDataset"
  op: "TensorSliceDataset"
  input: "flat_filenames"
  device: "/device:CPU:0"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "FlatMapDataset"
  op: "FlatMapDataset"
  input: "TensorSliceDataset"
  device: "/device:CPU:0"
  attr {
    key: "Targuments"
    value {
      list {
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "f"
    value {
      func {
        name: "__inference_Dataset_flat_map_read_one_file_3053"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
      }
    }
  }
}
node {
  name: "MapDataset"
  op: "MapDataset"
  input: "FlatMapDataset"
  device: "/device:CPU:0"
  attr {
    key: "Targuments"
    value {
      list {
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "f"
    value {
      func {
        name: "__inference_Dataset_map_tfrecord_parse_dense_fn_3081"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT64
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
  attr {
    key: "preserve_cardinality"
    value {
      b: false
    }
  }
  attr {
    key: "use_inter_op_parallelism"
    value {
      b: true
    }
  }
}
node {
  name: "MapDataset_1"
  op: "MapDataset"
  input: "MapDataset"
  device: "/device:CPU:0"
  attr {
    key: "Targuments"
    value {
      list {
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "f"
    value {
      func {
        name: "__inference_Dataset_map_<lambda>_3099"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT64
        type: DT_INT64
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
  attr {
    key: "preserve_cardinality"
    value {
      b: false
    }
  }
  attr {
    key: "use_inter_op_parallelism"
    value {
      b: true
    }
  }
}
node {
  name: "MapDataset_2"
  op: "MapDataset"
  input: "MapDataset_1"
  device: "/device:CPU:0"
  attr {
    key: "Targuments"
    value {
      list {
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "f"
    value {
      func {
        name: "__inference_Dataset_map_<lambda>_3113"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT64
        type: DT_INT64
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
  attr {
    key: "preserve_cardinality"
    value {
      b: false
    }
  }
  attr {
    key: "use_inter_op_parallelism"
    value {
      b: true
    }
  }
}
node {
  name: "Const_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Const_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 28
      }
    }
  }
}
node {
  name: "Const_3"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 28
      }
    }
  }
}
node {
  name: "Const_4"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "Const_5"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 40
      }
    }
  }
}
node {
  name: "Const_6"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\377\377\377\377\356\001\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Const_7"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 1
          }
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "Const_8"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 1
          }
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "Const_9"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Const_10"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "drop_remainder"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "PaddedBatchDatasetV2"
  op: "PaddedBatchDatasetV2"
  input: "MapDataset_2"
  input: "batch_size"
  input: "Const_6"
  input: "Const_7"
  input: "Const_8"
  input: "Const_9"
  input: "Const_10"
  input: "Const_1"
  input: "Const_2"
  input: "Const_3"
  input: "Const_4"
  input: "Const_5"
  input: "drop_remainder"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT64
        type: DT_INT64
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 494
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "parallel_copy"
    value {
      b: false
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 5
      }
    }
  }
}
node {
  name: "seed"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "seed2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "ShuffleDataset"
  op: "ShuffleDataset"
  input: "PaddedBatchDatasetV2"
  input: "buffer_size"
  input: "seed"
  input: "seed2"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 494
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT64
        type: DT_INT64
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
  attr {
    key: "reshuffle_each_iteration"
    value {
      b: true
    }
  }
}
node {
  name: "count"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1000
      }
    }
  }
}
node {
  name: "RepeatDataset"
  op: "RepeatDataset"
  input: "ShuffleDataset"
  input: "count"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 494
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT64
        type: DT_INT64
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
}
node {
  name: "OneShotIterator"
  op: "OneShotIterator"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dataset_factory"
    value {
      func {
        name: "_make_dataset_6tXAxBJ30xE"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 494
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT64
        type: DT_INT64
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "OneShotIterator"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "OneShotIterator"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 494
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 494
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT64
        type: DT_INT64
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
}
node {
  name: "Cast"
  op: "Cast"
  input: "IteratorGetNext:3"
  device: "/device:CPU:0"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Cast_1"
  op: "Cast"
  input: "IteratorGetNext:1"
  device: "/device:CPU:0"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Cast_2"
  op: "Cast"
  input: "IteratorGetNext:2"
  device: "/device:CPU:0"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Cast_3"
  op: "Cast"
  input: "IteratorGetNext:4"
  device: "/device:CPU:0"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1_0/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\356\001\000\000\220\001\000\000"
      }
    }
  }
}
node {
  name: "dense_layer_1_0/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_layer_1_0/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dense_layer_1_0/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "dense_layer_1_0/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 494
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dense_layer_1_0/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "dense_layer_1_0/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "dense_layer_1_0/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 494
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1_0/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "dense_layer_1_0/kernel/Initializer/truncated_normal/mul"
  input: "dense_layer_1_0/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 494
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1_0/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 494
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 494
        }
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_layer_1_0/kernel/Assign"
  op: "Assign"
  input: "dense_layer_1_0/kernel"
  input: "dense_layer_1_0/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 494
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_layer_1_0/kernel/read"
  op: "Identity"
  input: "dense_layer_1_0/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 494
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1_0/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 400
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_layer_1_0/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_layer_1_0/bias/Assign"
  op: "Assign"
  input: "dense_layer_1_0/bias"
  input: "dense_layer_1_0/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_layer_1_0/bias/read"
  op: "Identity"
  input: "dense_layer_1_0/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0/Tensordot/axes"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0/Tensordot/free"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0/Tensordot/Shape"
  op: "Shape"
  input: "IteratorGetNext"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0/Tensordot/GatherV2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0/Tensordot/GatherV2"
  op: "GatherV2"
  input: "dense_layer_1/dense_layer_1_0/Tensordot/Shape"
  input: "dense_layer_1/dense_layer_1_0/Tensordot/free"
  input: "dense_layer_1/dense_layer_1_0/Tensordot/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0/Tensordot/GatherV2_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0/Tensordot/GatherV2_1"
  op: "GatherV2"
  input: "dense_layer_1/dense_layer_1_0/Tensordot/Shape"
  input: "dense_layer_1/dense_layer_1_0/Tensordot/axes"
  input: "dense_layer_1/dense_layer_1_0/Tensordot/GatherV2_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0/Tensordot/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0/Tensordot/Prod"
  op: "Prod"
  input: "dense_layer_1/dense_layer_1_0/Tensordot/GatherV2"
  input: "dense_layer_1/dense_layer_1_0/Tensordot/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0/Tensordot/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0/Tensordot/Prod_1"
  op: "Prod"
  input: "dense_layer_1/dense_layer_1_0/Tensordot/GatherV2_1"
  input: "dense_layer_1/dense_layer_1_0/Tensordot/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0/Tensordot/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0/Tensordot/concat"
  op: "ConcatV2"
  input: "dense_layer_1/dense_layer_1_0/Tensordot/free"
  input: "dense_layer_1/dense_layer_1_0/Tensordot/axes"
  input: "dense_layer_1/dense_layer_1_0/Tensordot/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0/Tensordot/stack"
  op: "Pack"
  input: "dense_layer_1/dense_layer_1_0/Tensordot/Prod"
  input: "dense_layer_1/dense_layer_1_0/Tensordot/Prod_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0/Tensordot/transpose"
  op: "Transpose"
  input: "IteratorGetNext"
  input: "dense_layer_1/dense_layer_1_0/Tensordot/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 494
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0/Tensordot/Reshape"
  op: "Reshape"
  input: "dense_layer_1/dense_layer_1_0/Tensordot/transpose"
  input: "dense_layer_1/dense_layer_1_0/Tensordot/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0/Tensordot/transpose_1/perm"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0/Tensordot/transpose_1"
  op: "Transpose"
  input: "dense_layer_1_0/kernel/read"
  input: "dense_layer_1/dense_layer_1_0/Tensordot/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 494
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0/Tensordot/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\356\001\000\000\220\001\000\000"
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0/Tensordot/Reshape_1"
  op: "Reshape"
  input: "dense_layer_1/dense_layer_1_0/Tensordot/transpose_1"
  input: "dense_layer_1/dense_layer_1_0/Tensordot/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 494
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0/Tensordot/MatMul"
  op: "MatMul"
  input: "dense_layer_1/dense_layer_1_0/Tensordot/Reshape"
  input: "dense_layer_1/dense_layer_1_0/Tensordot/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0/Tensordot/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 400
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0/Tensordot/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0/Tensordot/concat_1"
  op: "ConcatV2"
  input: "dense_layer_1/dense_layer_1_0/Tensordot/GatherV2"
  input: "dense_layer_1/dense_layer_1_0/Tensordot/Const_2"
  input: "dense_layer_1/dense_layer_1_0/Tensordot/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0/Tensordot"
  op: "Reshape"
  input: "dense_layer_1/dense_layer_1_0/Tensordot/MatMul"
  input: "dense_layer_1/dense_layer_1_0/Tensordot/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0/BiasAdd"
  op: "BiasAdd"
  input: "dense_layer_1/dense_layer_1_0/Tensordot"
  input: "dense_layer_1_0/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_layer_1_0_batch_norm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 400
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dense_layer_1_0_batch_norm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_layer_1_0_batch_norm/gamma/Assign"
  op: "Assign"
  input: "dense_layer_1_0_batch_norm/gamma"
  input: "dense_layer_1_0_batch_norm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_layer_1_0_batch_norm/gamma/read"
  op: "Identity"
  input: "dense_layer_1_0_batch_norm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1_0_batch_norm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 400
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_layer_1_0_batch_norm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_layer_1_0_batch_norm/beta/Assign"
  op: "Assign"
  input: "dense_layer_1_0_batch_norm/beta"
  input: "dense_layer_1_0_batch_norm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_layer_1_0_batch_norm/beta/read"
  op: "Identity"
  input: "dense_layer_1_0_batch_norm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1_0_batch_norm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 400
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_layer_1_0_batch_norm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_layer_1_0_batch_norm/moving_mean/Assign"
  op: "Assign"
  input: "dense_layer_1_0_batch_norm/moving_mean"
  input: "dense_layer_1_0_batch_norm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_layer_1_0_batch_norm/moving_mean/read"
  op: "Identity"
  input: "dense_layer_1_0_batch_norm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1_0_batch_norm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 400
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dense_layer_1_0_batch_norm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_layer_1_0_batch_norm/moving_variance/Assign"
  op: "Assign"
  input: "dense_layer_1_0_batch_norm/moving_variance"
  input: "dense_layer_1_0_batch_norm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_layer_1_0_batch_norm/moving_variance/read"
  op: "Identity"
  input: "dense_layer_1_0_batch_norm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0_batch_norm/moments/mean/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0_batch_norm/moments/mean"
  op: "Mean"
  input: "dense_layer_1/dense_layer_1_0/BiasAdd"
  input: "dense_layer_1/dense_layer_1_0_batch_norm/moments/mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0_batch_norm/moments/StopGradient"
  op: "StopGradient"
  input: "dense_layer_1/dense_layer_1_0_batch_norm/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0_batch_norm/moments/SquaredDifference"
  op: "SquaredDifference"
  input: "dense_layer_1/dense_layer_1_0/BiasAdd"
  input: "dense_layer_1/dense_layer_1_0_batch_norm/moments/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0_batch_norm/moments/variance/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0_batch_norm/moments/variance"
  op: "Mean"
  input: "dense_layer_1/dense_layer_1_0_batch_norm/moments/SquaredDifference"
  input: "dense_layer_1/dense_layer_1_0_batch_norm/moments/variance/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0_batch_norm/moments/Squeeze"
  op: "Squeeze"
  input: "dense_layer_1/dense_layer_1_0_batch_norm/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
        i: 1
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0_batch_norm/moments/Squeeze_1"
  op: "Squeeze"
  input: "dense_layer_1/dense_layer_1_0_batch_norm/moments/variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
        i: 1
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0_batch_norm/AssignMovingAvg/decay"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0_batch_norm/AssignMovingAvg/sub"
  op: "Sub"
  input: "dense_layer_1_0_batch_norm/moving_mean/read"
  input: "dense_layer_1/dense_layer_1_0_batch_norm/moments/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0_batch_norm/AssignMovingAvg/mul"
  op: "Mul"
  input: "dense_layer_1/dense_layer_1_0_batch_norm/AssignMovingAvg/sub"
  input: "dense_layer_1/dense_layer_1_0_batch_norm/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0_batch_norm/AssignMovingAvg"
  op: "AssignSub"
  input: "dense_layer_1_0_batch_norm/moving_mean"
  input: "dense_layer_1/dense_layer_1_0_batch_norm/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0_batch_norm/AssignMovingAvg_1/decay"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0_batch_norm/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "dense_layer_1_0_batch_norm/moving_variance/read"
  input: "dense_layer_1/dense_layer_1_0_batch_norm/moments/Squeeze_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0_batch_norm/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "dense_layer_1/dense_layer_1_0_batch_norm/AssignMovingAvg_1/sub"
  input: "dense_layer_1/dense_layer_1_0_batch_norm/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0_batch_norm/AssignMovingAvg_1"
  op: "AssignSub"
  input: "dense_layer_1_0_batch_norm/moving_variance"
  input: "dense_layer_1/dense_layer_1_0_batch_norm/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add"
  op: "Add"
  input: "dense_layer_1/dense_layer_1_0_batch_norm/moments/Squeeze_1"
  input: "dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul"
  op: "Mul"
  input: "dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/Rsqrt"
  input: "dense_layer_1_0_batch_norm/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_1"
  op: "Mul"
  input: "dense_layer_1/dense_layer_1_0/BiasAdd"
  input: "dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_2"
  op: "Mul"
  input: "dense_layer_1/dense_layer_1_0_batch_norm/moments/Squeeze"
  input: "dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/sub"
  op: "Sub"
  input: "dense_layer_1_0_batch_norm/beta/read"
  input: "dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_1"
  op: "Add"
  input: "dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_1"
  input: "dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/Relu"
  op: "Relu"
  input: "dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0_dropout/dropout/rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0_dropout/dropout/Shape"
  op: "Shape"
  input: "dense_layer_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0_dropout/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0_dropout/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0_dropout/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense_layer_1/dense_layer_1_0_dropout/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0_dropout/dropout/random_uniform/sub"
  op: "Sub"
  input: "dense_layer_1/dense_layer_1_0_dropout/dropout/random_uniform/max"
  input: "dense_layer_1/dense_layer_1_0_dropout/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0_dropout/dropout/random_uniform/mul"
  op: "Mul"
  input: "dense_layer_1/dense_layer_1_0_dropout/dropout/random_uniform/RandomUniform"
  input: "dense_layer_1/dense_layer_1_0_dropout/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0_dropout/dropout/random_uniform"
  op: "Add"
  input: "dense_layer_1/dense_layer_1_0_dropout/dropout/random_uniform/mul"
  input: "dense_layer_1/dense_layer_1_0_dropout/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0_dropout/dropout/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0_dropout/dropout/sub"
  op: "Sub"
  input: "dense_layer_1/dense_layer_1_0_dropout/dropout/sub/x"
  input: "dense_layer_1/dense_layer_1_0_dropout/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0_dropout/dropout/truediv/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0_dropout/dropout/truediv"
  op: "RealDiv"
  input: "dense_layer_1/dense_layer_1_0_dropout/dropout/truediv/x"
  input: "dense_layer_1/dense_layer_1_0_dropout/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0_dropout/dropout/GreaterEqual"
  op: "GreaterEqual"
  input: "dense_layer_1/dense_layer_1_0_dropout/dropout/random_uniform"
  input: "dense_layer_1/dense_layer_1_0_dropout/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0_dropout/dropout/mul"
  op: "Mul"
  input: "dense_layer_1/Relu"
  input: "dense_layer_1/dense_layer_1_0_dropout/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0_dropout/dropout/Cast"
  op: "Cast"
  input: "dense_layer_1/dense_layer_1_0_dropout/dropout/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_0_dropout/dropout/mul_1"
  op: "Mul"
  input: "dense_layer_1/dense_layer_1_0_dropout/dropout/mul"
  input: "dense_layer_1/dense_layer_1_0_dropout/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dense_layer_1/dense_layer_1"
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1"
  op: "HistogramSummary"
  input: "dense_layer_1/dense_layer_1/tag"
  input: "dense_layer_1/dense_layer_1_0_dropout/dropout/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense_layer_1_1/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\220\001\000\000\220\001\000\000"
      }
    }
  }
}
node {
  name: "dense_layer_1_1/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_layer_1_1/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dense_layer_1_1/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "dense_layer_1_1/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dense_layer_1_1/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "dense_layer_1_1/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "dense_layer_1_1/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1_1/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "dense_layer_1_1/kernel/Initializer/truncated_normal/mul"
  input: "dense_layer_1_1/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1_1/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_layer_1_1/kernel/Assign"
  op: "Assign"
  input: "dense_layer_1_1/kernel"
  input: "dense_layer_1_1/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_layer_1_1/kernel/read"
  op: "Identity"
  input: "dense_layer_1_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1_1/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 400
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_layer_1_1/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_layer_1_1/bias/Assign"
  op: "Assign"
  input: "dense_layer_1_1/bias"
  input: "dense_layer_1_1/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_layer_1_1/bias/read"
  op: "Identity"
  input: "dense_layer_1_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1/Tensordot/axes"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1/Tensordot/free"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1/Tensordot/Shape"
  op: "Shape"
  input: "dense_layer_1/dense_layer_1_0_dropout/dropout/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1/Tensordot/GatherV2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1/Tensordot/GatherV2"
  op: "GatherV2"
  input: "dense_layer_1/dense_layer_1_1/Tensordot/Shape"
  input: "dense_layer_1/dense_layer_1_1/Tensordot/free"
  input: "dense_layer_1/dense_layer_1_1/Tensordot/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1/Tensordot/GatherV2_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1/Tensordot/GatherV2_1"
  op: "GatherV2"
  input: "dense_layer_1/dense_layer_1_1/Tensordot/Shape"
  input: "dense_layer_1/dense_layer_1_1/Tensordot/axes"
  input: "dense_layer_1/dense_layer_1_1/Tensordot/GatherV2_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1/Tensordot/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1/Tensordot/Prod"
  op: "Prod"
  input: "dense_layer_1/dense_layer_1_1/Tensordot/GatherV2"
  input: "dense_layer_1/dense_layer_1_1/Tensordot/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1/Tensordot/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1/Tensordot/Prod_1"
  op: "Prod"
  input: "dense_layer_1/dense_layer_1_1/Tensordot/GatherV2_1"
  input: "dense_layer_1/dense_layer_1_1/Tensordot/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1/Tensordot/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1/Tensordot/concat"
  op: "ConcatV2"
  input: "dense_layer_1/dense_layer_1_1/Tensordot/free"
  input: "dense_layer_1/dense_layer_1_1/Tensordot/axes"
  input: "dense_layer_1/dense_layer_1_1/Tensordot/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1/Tensordot/stack"
  op: "Pack"
  input: "dense_layer_1/dense_layer_1_1/Tensordot/Prod"
  input: "dense_layer_1/dense_layer_1_1/Tensordot/Prod_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1/Tensordot/transpose"
  op: "Transpose"
  input: "dense_layer_1/dense_layer_1_0_dropout/dropout/mul_1"
  input: "dense_layer_1/dense_layer_1_1/Tensordot/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1/Tensordot/Reshape"
  op: "Reshape"
  input: "dense_layer_1/dense_layer_1_1/Tensordot/transpose"
  input: "dense_layer_1/dense_layer_1_1/Tensordot/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1/Tensordot/transpose_1/perm"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1/Tensordot/transpose_1"
  op: "Transpose"
  input: "dense_layer_1_1/kernel/read"
  input: "dense_layer_1/dense_layer_1_1/Tensordot/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1/Tensordot/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\220\001\000\000\220\001\000\000"
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1/Tensordot/Reshape_1"
  op: "Reshape"
  input: "dense_layer_1/dense_layer_1_1/Tensordot/transpose_1"
  input: "dense_layer_1/dense_layer_1_1/Tensordot/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1/Tensordot/MatMul"
  op: "MatMul"
  input: "dense_layer_1/dense_layer_1_1/Tensordot/Reshape"
  input: "dense_layer_1/dense_layer_1_1/Tensordot/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1/Tensordot/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 400
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1/Tensordot/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1/Tensordot/concat_1"
  op: "ConcatV2"
  input: "dense_layer_1/dense_layer_1_1/Tensordot/GatherV2"
  input: "dense_layer_1/dense_layer_1_1/Tensordot/Const_2"
  input: "dense_layer_1/dense_layer_1_1/Tensordot/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1/Tensordot"
  op: "Reshape"
  input: "dense_layer_1/dense_layer_1_1/Tensordot/MatMul"
  input: "dense_layer_1/dense_layer_1_1/Tensordot/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1/BiasAdd"
  op: "BiasAdd"
  input: "dense_layer_1/dense_layer_1_1/Tensordot"
  input: "dense_layer_1_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_layer_1_1_batch_norm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 400
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dense_layer_1_1_batch_norm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_layer_1_1_batch_norm/gamma/Assign"
  op: "Assign"
  input: "dense_layer_1_1_batch_norm/gamma"
  input: "dense_layer_1_1_batch_norm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_layer_1_1_batch_norm/gamma/read"
  op: "Identity"
  input: "dense_layer_1_1_batch_norm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1_1_batch_norm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 400
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_layer_1_1_batch_norm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_layer_1_1_batch_norm/beta/Assign"
  op: "Assign"
  input: "dense_layer_1_1_batch_norm/beta"
  input: "dense_layer_1_1_batch_norm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_layer_1_1_batch_norm/beta/read"
  op: "Identity"
  input: "dense_layer_1_1_batch_norm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1_1_batch_norm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 400
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_layer_1_1_batch_norm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_layer_1_1_batch_norm/moving_mean/Assign"
  op: "Assign"
  input: "dense_layer_1_1_batch_norm/moving_mean"
  input: "dense_layer_1_1_batch_norm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_layer_1_1_batch_norm/moving_mean/read"
  op: "Identity"
  input: "dense_layer_1_1_batch_norm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1_1_batch_norm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 400
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dense_layer_1_1_batch_norm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_layer_1_1_batch_norm/moving_variance/Assign"
  op: "Assign"
  input: "dense_layer_1_1_batch_norm/moving_variance"
  input: "dense_layer_1_1_batch_norm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_layer_1_1_batch_norm/moving_variance/read"
  op: "Identity"
  input: "dense_layer_1_1_batch_norm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1_batch_norm/moments/mean/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1_batch_norm/moments/mean"
  op: "Mean"
  input: "dense_layer_1/dense_layer_1_1/BiasAdd"
  input: "dense_layer_1/dense_layer_1_1_batch_norm/moments/mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1_batch_norm/moments/StopGradient"
  op: "StopGradient"
  input: "dense_layer_1/dense_layer_1_1_batch_norm/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1_batch_norm/moments/SquaredDifference"
  op: "SquaredDifference"
  input: "dense_layer_1/dense_layer_1_1/BiasAdd"
  input: "dense_layer_1/dense_layer_1_1_batch_norm/moments/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1_batch_norm/moments/variance/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1_batch_norm/moments/variance"
  op: "Mean"
  input: "dense_layer_1/dense_layer_1_1_batch_norm/moments/SquaredDifference"
  input: "dense_layer_1/dense_layer_1_1_batch_norm/moments/variance/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1_batch_norm/moments/Squeeze"
  op: "Squeeze"
  input: "dense_layer_1/dense_layer_1_1_batch_norm/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
        i: 1
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1_batch_norm/moments/Squeeze_1"
  op: "Squeeze"
  input: "dense_layer_1/dense_layer_1_1_batch_norm/moments/variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
        i: 1
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1_batch_norm/AssignMovingAvg/decay"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1_batch_norm/AssignMovingAvg/sub"
  op: "Sub"
  input: "dense_layer_1_1_batch_norm/moving_mean/read"
  input: "dense_layer_1/dense_layer_1_1_batch_norm/moments/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1_batch_norm/AssignMovingAvg/mul"
  op: "Mul"
  input: "dense_layer_1/dense_layer_1_1_batch_norm/AssignMovingAvg/sub"
  input: "dense_layer_1/dense_layer_1_1_batch_norm/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1_batch_norm/AssignMovingAvg"
  op: "AssignSub"
  input: "dense_layer_1_1_batch_norm/moving_mean"
  input: "dense_layer_1/dense_layer_1_1_batch_norm/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1_batch_norm/AssignMovingAvg_1/decay"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1_batch_norm/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "dense_layer_1_1_batch_norm/moving_variance/read"
  input: "dense_layer_1/dense_layer_1_1_batch_norm/moments/Squeeze_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1_batch_norm/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "dense_layer_1/dense_layer_1_1_batch_norm/AssignMovingAvg_1/sub"
  input: "dense_layer_1/dense_layer_1_1_batch_norm/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1_batch_norm/AssignMovingAvg_1"
  op: "AssignSub"
  input: "dense_layer_1_1_batch_norm/moving_variance"
  input: "dense_layer_1/dense_layer_1_1_batch_norm/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add"
  op: "Add"
  input: "dense_layer_1/dense_layer_1_1_batch_norm/moments/Squeeze_1"
  input: "dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul"
  op: "Mul"
  input: "dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/Rsqrt"
  input: "dense_layer_1_1_batch_norm/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_1"
  op: "Mul"
  input: "dense_layer_1/dense_layer_1_1/BiasAdd"
  input: "dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_2"
  op: "Mul"
  input: "dense_layer_1/dense_layer_1_1_batch_norm/moments/Squeeze"
  input: "dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/sub"
  op: "Sub"
  input: "dense_layer_1_1_batch_norm/beta/read"
  input: "dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_1"
  op: "Add"
  input: "dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_1"
  input: "dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/Relu_1"
  op: "Relu"
  input: "dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1_dropout/dropout/rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1_dropout/dropout/Shape"
  op: "Shape"
  input: "dense_layer_1/Relu_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1_dropout/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1_dropout/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1_dropout/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense_layer_1/dense_layer_1_1_dropout/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1_dropout/dropout/random_uniform/sub"
  op: "Sub"
  input: "dense_layer_1/dense_layer_1_1_dropout/dropout/random_uniform/max"
  input: "dense_layer_1/dense_layer_1_1_dropout/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1_dropout/dropout/random_uniform/mul"
  op: "Mul"
  input: "dense_layer_1/dense_layer_1_1_dropout/dropout/random_uniform/RandomUniform"
  input: "dense_layer_1/dense_layer_1_1_dropout/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1_dropout/dropout/random_uniform"
  op: "Add"
  input: "dense_layer_1/dense_layer_1_1_dropout/dropout/random_uniform/mul"
  input: "dense_layer_1/dense_layer_1_1_dropout/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1_dropout/dropout/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1_dropout/dropout/sub"
  op: "Sub"
  input: "dense_layer_1/dense_layer_1_1_dropout/dropout/sub/x"
  input: "dense_layer_1/dense_layer_1_1_dropout/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1_dropout/dropout/truediv/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1_dropout/dropout/truediv"
  op: "RealDiv"
  input: "dense_layer_1/dense_layer_1_1_dropout/dropout/truediv/x"
  input: "dense_layer_1/dense_layer_1_1_dropout/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1_dropout/dropout/GreaterEqual"
  op: "GreaterEqual"
  input: "dense_layer_1/dense_layer_1_1_dropout/dropout/random_uniform"
  input: "dense_layer_1/dense_layer_1_1_dropout/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1_dropout/dropout/mul"
  op: "Mul"
  input: "dense_layer_1/Relu_1"
  input: "dense_layer_1/dense_layer_1_1_dropout/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1_dropout/dropout/Cast"
  op: "Cast"
  input: "dense_layer_1/dense_layer_1_1_dropout/dropout/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_1_dropout/dropout/mul_1"
  op: "Mul"
  input: "dense_layer_1/dense_layer_1_1_dropout/dropout/mul"
  input: "dense_layer_1/dense_layer_1_1_dropout/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_2/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dense_layer_1/dense_layer_1_2"
      }
    }
  }
}
node {
  name: "dense_layer_1/dense_layer_1_2"
  op: "HistogramSummary"
  input: "dense_layer_1/dense_layer_1_2/tag"
  input: "dense_layer_1/dense_layer_1_1_dropout/dropout/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/DropoutWrapperInit/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "listener/DropoutWrapperInit/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "listener/DropoutWrapperInit/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "listener/DropoutWrapperInit_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "listener/DropoutWrapperInit_1/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "listener/DropoutWrapperInit_1/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/range"
  op: "Range"
  input: "listener/listener_0/fw/fw/range/start"
  input: "listener/listener_0/fw/fw/Rank"
  input: "listener/listener_0/fw/fw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/concat/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/concat"
  op: "ConcatV2"
  input: "listener/listener_0/fw/fw/concat/values_0"
  input: "listener/listener_0/fw/fw/range"
  input: "listener/listener_0/fw/fw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/transpose"
  op: "Transpose"
  input: "dense_layer_1/dense_layer_1_1_dropout/dropout/mul_1"
  input: "listener/listener_0/fw/fw/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/sequence_length"
  op: "Identity"
  input: "Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/Shape"
  op: "Shape"
  input: "listener/listener_0/fw/fw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/strided_slice"
  op: "StridedSlice"
  input: "listener/listener_0/fw/fw/Shape"
  input: "listener/listener_0/fw/fw/strided_slice/stack"
  input: "listener/listener_0/fw/fw/strided_slice/stack_1"
  input: "listener/listener_0/fw/fw/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims"
  op: "ExpandDims"
  input: "listener/listener_0/fw/fw/strided_slice"
  input: "listener/listener_0/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "listener/listener_0/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims"
  input: "listener/listener_0/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const"
  input: "listener/listener_0/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros"
  op: "Fill"
  input: "listener/listener_0/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat"
  input: "listener/listener_0/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_1"
  op: "ExpandDims"
  input: "listener/listener_0/fw/fw/strided_slice"
  input: "listener/listener_0/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_2"
  op: "ExpandDims"
  input: "listener/listener_0/fw/fw/strided_slice"
  input: "listener/listener_0/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "listener/listener_0/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_2"
  input: "listener/listener_0/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_2"
  input: "listener/listener_0/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "listener/listener_0/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1"
  input: "listener/listener_0/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_3/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_3"
  op: "ExpandDims"
  input: "listener/listener_0/fw/fw/strided_slice"
  input: "listener/listener_0/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/Shape_1"
  op: "Shape"
  input: "listener/listener_0/fw/fw/sequence_length"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/stack"
  op: "Pack"
  input: "listener/listener_0/fw/fw/strided_slice"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/Equal"
  op: "Equal"
  input: "listener/listener_0/fw/fw/Shape_1"
  input: "listener/listener_0/fw/fw/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/All"
  op: "All"
  input: "listener/listener_0/fw/fw/Equal"
  input: "listener/listener_0/fw/fw/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor listener/listener_0/fw/fw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor listener/listener_0/fw/fw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/Assert/Assert"
  op: "Assert"
  input: "listener/listener_0/fw/fw/All"
  input: "listener/listener_0/fw/fw/Assert/Assert/data_0"
  input: "listener/listener_0/fw/fw/stack"
  input: "listener/listener_0/fw/fw/Assert/Assert/data_2"
  input: "listener/listener_0/fw/fw/Shape_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/CheckSeqLen"
  op: "Identity"
  input: "listener/listener_0/fw/fw/sequence_length"
  input: "^listener/listener_0/fw/fw/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/Shape_2"
  op: "Shape"
  input: "listener/listener_0/fw/fw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/strided_slice_1"
  op: "StridedSlice"
  input: "listener/listener_0/fw/fw/Shape_2"
  input: "listener/listener_0/fw/fw/strided_slice_1/stack"
  input: "listener/listener_0/fw/fw/strided_slice_1/stack_1"
  input: "listener/listener_0/fw/fw/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/Shape_3"
  op: "Shape"
  input: "listener/listener_0/fw/fw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/strided_slice_2"
  op: "StridedSlice"
  input: "listener/listener_0/fw/fw/Shape_3"
  input: "listener/listener_0/fw/fw/strided_slice_2/stack"
  input: "listener/listener_0/fw/fw/strided_slice_2/stack_1"
  input: "listener/listener_0/fw/fw/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/ExpandDims"
  op: "ExpandDims"
  input: "listener/listener_0/fw/fw/strided_slice_2"
  input: "listener/listener_0/fw/fw/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/concat_1"
  op: "ConcatV2"
  input: "listener/listener_0/fw/fw/ExpandDims"
  input: "listener/listener_0/fw/fw/Const_1"
  input: "listener/listener_0/fw/fw/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/zeros"
  op: "Fill"
  input: "listener/listener_0/fw/fw/concat_1"
  input: "listener/listener_0/fw/fw/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/Min"
  op: "Min"
  input: "listener/listener_0/fw/fw/CheckSeqLen"
  input: "listener/listener_0/fw/fw/Const_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/Max"
  op: "Max"
  input: "listener/listener_0/fw/fw/CheckSeqLen"
  input: "listener/listener_0/fw/fw/Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/time"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/TensorArray"
  op: "TensorArrayV3"
  input: "listener/listener_0/fw/fw/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "listener/listener_0/fw/fw/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/TensorArray_1"
  op: "TensorArrayV3"
  input: "listener/listener_0/fw/fw/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "listener/listener_0/fw/fw/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "listener/listener_0/fw/fw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "listener/listener_0/fw/fw/TensorArrayUnstack/Shape"
  input: "listener/listener_0/fw/fw/TensorArrayUnstack/strided_slice/stack"
  input: "listener/listener_0/fw/fw/TensorArrayUnstack/strided_slice/stack_1"
  input: "listener/listener_0/fw/fw/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/TensorArrayUnstack/range"
  op: "Range"
  input: "listener/listener_0/fw/fw/TensorArrayUnstack/range/start"
  input: "listener/listener_0/fw/fw/TensorArrayUnstack/strided_slice"
  input: "listener/listener_0/fw/fw/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "listener/listener_0/fw/fw/TensorArray_1"
  input: "listener/listener_0/fw/fw/TensorArrayUnstack/range"
  input: "listener/listener_0/fw/fw/transpose"
  input: "listener/listener_0/fw/fw/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/Maximum/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/Maximum"
  op: "Maximum"
  input: "listener/listener_0/fw/fw/Maximum/x"
  input: "listener/listener_0/fw/fw/Max"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/Minimum"
  op: "Minimum"
  input: "listener/listener_0/fw/fw/strided_slice_1"
  input: "listener/listener_0/fw/fw/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/iteration_counter"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/Enter"
  op: "Enter"
  input: "listener/listener_0/fw/fw/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/Enter_1"
  op: "Enter"
  input: "listener/listener_0/fw/fw/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/Enter_2"
  op: "Enter"
  input: "listener/listener_0/fw/fw/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/Enter_3"
  op: "Enter"
  input: "listener/listener_0/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/Enter_4"
  op: "Enter"
  input: "listener/listener_0/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/Merge"
  op: "Merge"
  input: "listener/listener_0/fw/fw/while/Enter"
  input: "listener/listener_0/fw/fw/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/Merge_1"
  op: "Merge"
  input: "listener/listener_0/fw/fw/while/Enter_1"
  input: "listener/listener_0/fw/fw/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/Merge_2"
  op: "Merge"
  input: "listener/listener_0/fw/fw/while/Enter_2"
  input: "listener/listener_0/fw/fw/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/Merge_3"
  op: "Merge"
  input: "listener/listener_0/fw/fw/while/Enter_3"
  input: "listener/listener_0/fw/fw/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/Merge_4"
  op: "Merge"
  input: "listener/listener_0/fw/fw/while/Enter_4"
  input: "listener/listener_0/fw/fw/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/Less"
  op: "Less"
  input: "listener/listener_0/fw/fw/while/Merge"
  input: "listener/listener_0/fw/fw/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/Less/Enter"
  op: "Enter"
  input: "listener/listener_0/fw/fw/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/Less_1"
  op: "Less"
  input: "listener/listener_0/fw/fw/while/Merge_1"
  input: "listener/listener_0/fw/fw/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/Less_1/Enter"
  op: "Enter"
  input: "listener/listener_0/fw/fw/Minimum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/LogicalAnd"
  op: "LogicalAnd"
  input: "listener/listener_0/fw/fw/while/Less"
  input: "listener/listener_0/fw/fw/while/Less_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/LoopCond"
  op: "LoopCond"
  input: "listener/listener_0/fw/fw/while/LogicalAnd"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/Switch"
  op: "Switch"
  input: "listener/listener_0/fw/fw/while/Merge"
  input: "listener/listener_0/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/Switch_1"
  op: "Switch"
  input: "listener/listener_0/fw/fw/while/Merge_1"
  input: "listener/listener_0/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/Switch_2"
  op: "Switch"
  input: "listener/listener_0/fw/fw/while/Merge_2"
  input: "listener/listener_0/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/Switch_3"
  op: "Switch"
  input: "listener/listener_0/fw/fw/while/Merge_3"
  input: "listener/listener_0/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/Switch_4"
  op: "Switch"
  input: "listener/listener_0/fw/fw/while/Merge_4"
  input: "listener/listener_0/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/Merge_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/Identity"
  op: "Identity"
  input: "listener/listener_0/fw/fw/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/Identity_1"
  op: "Identity"
  input: "listener/listener_0/fw/fw/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/Identity_2"
  op: "Identity"
  input: "listener/listener_0/fw/fw/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/Identity_3"
  op: "Identity"
  input: "listener/listener_0/fw/fw/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/Identity_4"
  op: "Identity"
  input: "listener/listener_0/fw/fw/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/add/y"
  op: "Const"
  input: "^listener/listener_0/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/add"
  op: "Add"
  input: "listener/listener_0/fw/fw/while/Identity"
  input: "listener/listener_0/fw/fw/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "listener/listener_0/fw/fw/while/TensorArrayReadV3/Enter"
  input: "listener/listener_0/fw/fw/while/Identity_1"
  input: "listener/listener_0/fw/fw/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "listener/listener_0/fw/fw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "listener/listener_0/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/GreaterEqual"
  op: "GreaterEqual"
  input: "listener/listener_0/fw/fw/while/Identity_1"
  input: "listener/listener_0/fw/fw/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/GreaterEqual/Enter"
  op: "Enter"
  input: "listener/listener_0/fw/fw/CheckSeqLen"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout/rate"
  op: "Const"
  input: "^listener/listener_0/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000002384185791
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout/Shape"
  op: "Shape"
  input: "listener/listener_0/fw/fw/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout/random_uniform/min"
  op: "Const"
  input: "^listener/listener_0/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout/random_uniform/max"
  op: "Const"
  input: "^listener/listener_0/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "listener/listener_0/fw/fw/while/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout/random_uniform/sub"
  op: "Sub"
  input: "listener/listener_0/fw/fw/while/dropout/random_uniform/max"
  input: "listener/listener_0/fw/fw/while/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout/random_uniform/mul"
  op: "Mul"
  input: "listener/listener_0/fw/fw/while/dropout/random_uniform/RandomUniform"
  input: "listener/listener_0/fw/fw/while/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout/random_uniform"
  op: "Add"
  input: "listener/listener_0/fw/fw/while/dropout/random_uniform/mul"
  input: "listener/listener_0/fw/fw/while/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout/sub/x"
  op: "Const"
  input: "^listener/listener_0/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout/sub"
  op: "Sub"
  input: "listener/listener_0/fw/fw/while/dropout/sub/x"
  input: "listener/listener_0/fw/fw/while/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout/truediv/x"
  op: "Const"
  input: "^listener/listener_0/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout/truediv"
  op: "RealDiv"
  input: "listener/listener_0/fw/fw/while/dropout/truediv/x"
  input: "listener/listener_0/fw/fw/while/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout/GreaterEqual"
  op: "GreaterEqual"
  input: "listener/listener_0/fw/fw/while/dropout/random_uniform"
  input: "listener/listener_0/fw/fw/while/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout/mul"
  op: "Mul"
  input: "listener/listener_0/fw/fw/while/TensorArrayReadV3"
  input: "listener/listener_0/fw/fw/while/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout/Cast"
  op: "Cast"
  input: "listener/listener_0/fw/fw/while/dropout/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout/mul_1"
  op: "Mul"
  input: "listener/listener_0/fw/fw/while/dropout/mul"
  input: "listener/listener_0/fw/fw/while/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\220\003\000\000\000\010\000\000"
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.04502251744270325
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.04502251744270325
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "listener/listener_0/fw/lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "listener/listener_0/fw/lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "listener/listener_0/fw/lstm_cell/kernel/Initializer/random_uniform/max"
  input: "listener/listener_0/fw/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "listener/listener_0/fw/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "listener/listener_0/fw/lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "listener/listener_0/fw/lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "listener/listener_0/fw/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 912
        }
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "listener/listener_0/fw/lstm_cell/kernel/Assign"
  op: "Assign"
  input: "listener/listener_0/fw/lstm_cell/kernel"
  input: "listener/listener_0/fw/lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "listener/listener_0/fw/lstm_cell/kernel/read"
  op: "Identity"
  input: "listener/listener_0/fw/lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/lstm_cell/bias/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2048
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/lstm_cell/bias/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/lstm_cell/bias/Initializer/zeros"
  op: "Fill"
  input: "listener/listener_0/fw/lstm_cell/bias/Initializer/zeros/shape_as_tensor"
  input: "listener/listener_0/fw/lstm_cell/bias/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "listener/listener_0/fw/lstm_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "listener/listener_0/fw/lstm_cell/bias/Assign"
  op: "Assign"
  input: "listener/listener_0/fw/lstm_cell/bias"
  input: "listener/listener_0/fw/lstm_cell/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "listener/listener_0/fw/lstm_cell/bias/read"
  op: "Identity"
  input: "listener/listener_0/fw/lstm_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/lstm_cell/concat/axis"
  op: "Const"
  input: "^listener/listener_0/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/lstm_cell/concat"
  op: "ConcatV2"
  input: "listener/listener_0/fw/fw/while/dropout/mul_1"
  input: "listener/listener_0/fw/fw/while/Identity_4"
  input: "listener/listener_0/fw/fw/while/lstm_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 912
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/lstm_cell/MatMul"
  op: "MatMul"
  input: "listener/listener_0/fw/fw/while/lstm_cell/concat"
  input: "listener/listener_0/fw/fw/while/lstm_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "listener/listener_0/fw/lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "listener/listener_0/fw/fw/while/lstm_cell/MatMul"
  input: "listener/listener_0/fw/fw/while/lstm_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "listener/listener_0/fw/lstm_cell/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/lstm_cell/Const"
  op: "Const"
  input: "^listener/listener_0/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/lstm_cell/split/split_dim"
  op: "Const"
  input: "^listener/listener_0/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/lstm_cell/split"
  op: "Split"
  input: "listener/listener_0/fw/fw/while/lstm_cell/split/split_dim"
  input: "listener/listener_0/fw/fw/while/lstm_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/lstm_cell/add/y"
  op: "Const"
  input: "^listener/listener_0/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/lstm_cell/add"
  op: "Add"
  input: "listener/listener_0/fw/fw/while/lstm_cell/split:2"
  input: "listener/listener_0/fw/fw/while/lstm_cell/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "listener/listener_0/fw/fw/while/lstm_cell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/lstm_cell/mul"
  op: "Mul"
  input: "listener/listener_0/fw/fw/while/lstm_cell/Sigmoid"
  input: "listener/listener_0/fw/fw/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "listener/listener_0/fw/fw/while/lstm_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/lstm_cell/Tanh"
  op: "Tanh"
  input: "listener/listener_0/fw/fw/while/lstm_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/lstm_cell/mul_1"
  op: "Mul"
  input: "listener/listener_0/fw/fw/while/lstm_cell/Sigmoid_1"
  input: "listener/listener_0/fw/fw/while/lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/lstm_cell/add_1"
  op: "Add"
  input: "listener/listener_0/fw/fw/while/lstm_cell/mul"
  input: "listener/listener_0/fw/fw/while/lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "listener/listener_0/fw/fw/while/lstm_cell/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/lstm_cell/Tanh_1"
  op: "Tanh"
  input: "listener/listener_0/fw/fw/while/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/lstm_cell/mul_2"
  op: "Mul"
  input: "listener/listener_0/fw/fw/while/lstm_cell/Sigmoid_2"
  input: "listener/listener_0/fw/fw/while/lstm_cell/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout_1/rate"
  op: "Const"
  input: "^listener/listener_0/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000002384185791
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout_1/Shape"
  op: "Shape"
  input: "listener/listener_0/fw/fw/while/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout_1/random_uniform/min"
  op: "Const"
  input: "^listener/listener_0/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout_1/random_uniform/max"
  op: "Const"
  input: "^listener/listener_0/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "listener/listener_0/fw/fw/while/dropout_1/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout_1/random_uniform/sub"
  op: "Sub"
  input: "listener/listener_0/fw/fw/while/dropout_1/random_uniform/max"
  input: "listener/listener_0/fw/fw/while/dropout_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout_1/random_uniform/mul"
  op: "Mul"
  input: "listener/listener_0/fw/fw/while/dropout_1/random_uniform/RandomUniform"
  input: "listener/listener_0/fw/fw/while/dropout_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout_1/random_uniform"
  op: "Add"
  input: "listener/listener_0/fw/fw/while/dropout_1/random_uniform/mul"
  input: "listener/listener_0/fw/fw/while/dropout_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout_1/sub/x"
  op: "Const"
  input: "^listener/listener_0/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout_1/sub"
  op: "Sub"
  input: "listener/listener_0/fw/fw/while/dropout_1/sub/x"
  input: "listener/listener_0/fw/fw/while/dropout_1/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout_1/truediv/x"
  op: "Const"
  input: "^listener/listener_0/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout_1/truediv"
  op: "RealDiv"
  input: "listener/listener_0/fw/fw/while/dropout_1/truediv/x"
  input: "listener/listener_0/fw/fw/while/dropout_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout_1/GreaterEqual"
  op: "GreaterEqual"
  input: "listener/listener_0/fw/fw/while/dropout_1/random_uniform"
  input: "listener/listener_0/fw/fw/while/dropout_1/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout_1/mul"
  op: "Mul"
  input: "listener/listener_0/fw/fw/while/lstm_cell/mul_2"
  input: "listener/listener_0/fw/fw/while/dropout_1/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout_1/Cast"
  op: "Cast"
  input: "listener/listener_0/fw/fw/while/dropout_1/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout_1/mul_1"
  op: "Mul"
  input: "listener/listener_0/fw/fw/while/dropout_1/mul"
  input: "listener/listener_0/fw/fw/while/dropout_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout_2/rate"
  op: "Const"
  input: "^listener/listener_0/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000002384185791
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout_2/Shape"
  op: "Shape"
  input: "listener/listener_0/fw/fw/while/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout_2/random_uniform/min"
  op: "Const"
  input: "^listener/listener_0/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout_2/random_uniform/max"
  op: "Const"
  input: "^listener/listener_0/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout_2/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "listener/listener_0/fw/fw/while/dropout_2/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout_2/random_uniform/sub"
  op: "Sub"
  input: "listener/listener_0/fw/fw/while/dropout_2/random_uniform/max"
  input: "listener/listener_0/fw/fw/while/dropout_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout_2/random_uniform/mul"
  op: "Mul"
  input: "listener/listener_0/fw/fw/while/dropout_2/random_uniform/RandomUniform"
  input: "listener/listener_0/fw/fw/while/dropout_2/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout_2/random_uniform"
  op: "Add"
  input: "listener/listener_0/fw/fw/while/dropout_2/random_uniform/mul"
  input: "listener/listener_0/fw/fw/while/dropout_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout_2/sub/x"
  op: "Const"
  input: "^listener/listener_0/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout_2/sub"
  op: "Sub"
  input: "listener/listener_0/fw/fw/while/dropout_2/sub/x"
  input: "listener/listener_0/fw/fw/while/dropout_2/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout_2/truediv/x"
  op: "Const"
  input: "^listener/listener_0/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout_2/truediv"
  op: "RealDiv"
  input: "listener/listener_0/fw/fw/while/dropout_2/truediv/x"
  input: "listener/listener_0/fw/fw/while/dropout_2/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout_2/GreaterEqual"
  op: "GreaterEqual"
  input: "listener/listener_0/fw/fw/while/dropout_2/random_uniform"
  input: "listener/listener_0/fw/fw/while/dropout_2/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout_2/mul"
  op: "Mul"
  input: "listener/listener_0/fw/fw/while/lstm_cell/mul_2"
  input: "listener/listener_0/fw/fw/while/dropout_2/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout_2/Cast"
  op: "Cast"
  input: "listener/listener_0/fw/fw/while/dropout_2/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/dropout_2/mul_1"
  op: "Mul"
  input: "listener/listener_0/fw/fw/while/dropout_2/mul"
  input: "listener/listener_0/fw/fw/while/dropout_2/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/Select"
  op: "Select"
  input: "listener/listener_0/fw/fw/while/GreaterEqual"
  input: "listener/listener_0/fw/fw/while/Select/Enter"
  input: "listener/listener_0/fw/fw/while/dropout_2/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/dropout_2/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/Select/Enter"
  op: "Enter"
  input: "listener/listener_0/fw/fw/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/dropout_2/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/Select_1"
  op: "Select"
  input: "listener/listener_0/fw/fw/while/GreaterEqual"
  input: "listener/listener_0/fw/fw/while/Identity_3"
  input: "listener/listener_0/fw/fw/while/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/lstm_cell/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/Select_2"
  op: "Select"
  input: "listener/listener_0/fw/fw/while/GreaterEqual"
  input: "listener/listener_0/fw/fw/while/Identity_4"
  input: "listener/listener_0/fw/fw/while/dropout_1/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/dropout_1/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "listener/listener_0/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "listener/listener_0/fw/fw/while/Identity_1"
  input: "listener/listener_0/fw/fw/while/Select"
  input: "listener/listener_0/fw/fw/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/dropout_2/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "listener/listener_0/fw/fw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/dropout_2/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/add_1/y"
  op: "Const"
  input: "^listener/listener_0/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/add_1"
  op: "Add"
  input: "listener/listener_0/fw/fw/while/Identity_1"
  input: "listener/listener_0/fw/fw/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/NextIteration"
  op: "NextIteration"
  input: "listener/listener_0/fw/fw/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/NextIteration_1"
  op: "NextIteration"
  input: "listener/listener_0/fw/fw/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/NextIteration_2"
  op: "NextIteration"
  input: "listener/listener_0/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/NextIteration_3"
  op: "NextIteration"
  input: "listener/listener_0/fw/fw/while/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/NextIteration_4"
  op: "NextIteration"
  input: "listener/listener_0/fw/fw/while/Select_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/Exit"
  op: "Exit"
  input: "listener/listener_0/fw/fw/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/Exit_1"
  op: "Exit"
  input: "listener/listener_0/fw/fw/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/Exit_2"
  op: "Exit"
  input: "listener/listener_0/fw/fw/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/Exit_3"
  op: "Exit"
  input: "listener/listener_0/fw/fw/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/while/Exit_4"
  op: "Exit"
  input: "listener/listener_0/fw/fw/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "listener/listener_0/fw/fw/TensorArray"
  input: "listener/listener_0/fw/fw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/TensorArrayStack/range"
  op: "Range"
  input: "listener/listener_0/fw/fw/TensorArrayStack/range/start"
  input: "listener/listener_0/fw/fw/TensorArrayStack/TensorArraySizeV3"
  input: "listener/listener_0/fw/fw/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "listener/listener_0/fw/fw/TensorArray"
  input: "listener/listener_0/fw/fw/TensorArrayStack/range"
  input: "listener/listener_0/fw/fw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 512
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/Rank_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/range_1/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/range_1/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/range_1"
  op: "Range"
  input: "listener/listener_0/fw/fw/range_1/start"
  input: "listener/listener_0/fw/fw/Rank_1"
  input: "listener/listener_0/fw/fw/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/concat_2/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/concat_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/concat_2"
  op: "ConcatV2"
  input: "listener/listener_0/fw/fw/concat_2/values_0"
  input: "listener/listener_0/fw/fw/range_1"
  input: "listener/listener_0/fw/fw/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/fw/transpose_1"
  op: "Transpose"
  input: "listener/listener_0/fw/fw/TensorArrayStack/TensorArrayGatherV3"
  input: "listener/listener_0/fw/fw/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/ReverseSequence"
  op: "ReverseSequence"
  input: "dense_layer_1/dense_layer_1_1_dropout/dropout/mul_1"
  input: "Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/range"
  op: "Range"
  input: "listener/listener_0/bw/bw/range/start"
  input: "listener/listener_0/bw/bw/Rank"
  input: "listener/listener_0/bw/bw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/concat/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/concat"
  op: "ConcatV2"
  input: "listener/listener_0/bw/bw/concat/values_0"
  input: "listener/listener_0/bw/bw/range"
  input: "listener/listener_0/bw/bw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/transpose"
  op: "Transpose"
  input: "listener/listener_0/bw/ReverseSequence"
  input: "listener/listener_0/bw/bw/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/sequence_length"
  op: "Identity"
  input: "Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/Shape"
  op: "Shape"
  input: "listener/listener_0/bw/bw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/strided_slice"
  op: "StridedSlice"
  input: "listener/listener_0/bw/bw/Shape"
  input: "listener/listener_0/bw/bw/strided_slice/stack"
  input: "listener/listener_0/bw/bw/strided_slice/stack_1"
  input: "listener/listener_0/bw/bw/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims"
  op: "ExpandDims"
  input: "listener/listener_0/bw/bw/strided_slice"
  input: "listener/listener_0/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "listener/listener_0/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims"
  input: "listener/listener_0/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const"
  input: "listener/listener_0/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros"
  op: "Fill"
  input: "listener/listener_0/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat"
  input: "listener/listener_0/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_1"
  op: "ExpandDims"
  input: "listener/listener_0/bw/bw/strided_slice"
  input: "listener/listener_0/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_2"
  op: "ExpandDims"
  input: "listener/listener_0/bw/bw/strided_slice"
  input: "listener/listener_0/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "listener/listener_0/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_2"
  input: "listener/listener_0/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_2"
  input: "listener/listener_0/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "listener/listener_0/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1"
  input: "listener/listener_0/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_3/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_3"
  op: "ExpandDims"
  input: "listener/listener_0/bw/bw/strided_slice"
  input: "listener/listener_0/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/Shape_1"
  op: "Shape"
  input: "listener/listener_0/bw/bw/sequence_length"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/stack"
  op: "Pack"
  input: "listener/listener_0/bw/bw/strided_slice"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/Equal"
  op: "Equal"
  input: "listener/listener_0/bw/bw/Shape_1"
  input: "listener/listener_0/bw/bw/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/All"
  op: "All"
  input: "listener/listener_0/bw/bw/Equal"
  input: "listener/listener_0/bw/bw/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor listener/listener_0/bw/bw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor listener/listener_0/bw/bw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/Assert/Assert"
  op: "Assert"
  input: "listener/listener_0/bw/bw/All"
  input: "listener/listener_0/bw/bw/Assert/Assert/data_0"
  input: "listener/listener_0/bw/bw/stack"
  input: "listener/listener_0/bw/bw/Assert/Assert/data_2"
  input: "listener/listener_0/bw/bw/Shape_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/CheckSeqLen"
  op: "Identity"
  input: "listener/listener_0/bw/bw/sequence_length"
  input: "^listener/listener_0/bw/bw/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/Shape_2"
  op: "Shape"
  input: "listener/listener_0/bw/bw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/strided_slice_1"
  op: "StridedSlice"
  input: "listener/listener_0/bw/bw/Shape_2"
  input: "listener/listener_0/bw/bw/strided_slice_1/stack"
  input: "listener/listener_0/bw/bw/strided_slice_1/stack_1"
  input: "listener/listener_0/bw/bw/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/Shape_3"
  op: "Shape"
  input: "listener/listener_0/bw/bw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/strided_slice_2"
  op: "StridedSlice"
  input: "listener/listener_0/bw/bw/Shape_3"
  input: "listener/listener_0/bw/bw/strided_slice_2/stack"
  input: "listener/listener_0/bw/bw/strided_slice_2/stack_1"
  input: "listener/listener_0/bw/bw/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/ExpandDims"
  op: "ExpandDims"
  input: "listener/listener_0/bw/bw/strided_slice_2"
  input: "listener/listener_0/bw/bw/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/concat_1"
  op: "ConcatV2"
  input: "listener/listener_0/bw/bw/ExpandDims"
  input: "listener/listener_0/bw/bw/Const_1"
  input: "listener/listener_0/bw/bw/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/zeros"
  op: "Fill"
  input: "listener/listener_0/bw/bw/concat_1"
  input: "listener/listener_0/bw/bw/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/Min"
  op: "Min"
  input: "listener/listener_0/bw/bw/CheckSeqLen"
  input: "listener/listener_0/bw/bw/Const_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/Max"
  op: "Max"
  input: "listener/listener_0/bw/bw/CheckSeqLen"
  input: "listener/listener_0/bw/bw/Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/time"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/TensorArray"
  op: "TensorArrayV3"
  input: "listener/listener_0/bw/bw/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "listener/listener_0/bw/bw/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/TensorArray_1"
  op: "TensorArrayV3"
  input: "listener/listener_0/bw/bw/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "listener/listener_0/bw/bw/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "listener/listener_0/bw/bw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "listener/listener_0/bw/bw/TensorArrayUnstack/Shape"
  input: "listener/listener_0/bw/bw/TensorArrayUnstack/strided_slice/stack"
  input: "listener/listener_0/bw/bw/TensorArrayUnstack/strided_slice/stack_1"
  input: "listener/listener_0/bw/bw/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/TensorArrayUnstack/range"
  op: "Range"
  input: "listener/listener_0/bw/bw/TensorArrayUnstack/range/start"
  input: "listener/listener_0/bw/bw/TensorArrayUnstack/strided_slice"
  input: "listener/listener_0/bw/bw/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "listener/listener_0/bw/bw/TensorArray_1"
  input: "listener/listener_0/bw/bw/TensorArrayUnstack/range"
  input: "listener/listener_0/bw/bw/transpose"
  input: "listener/listener_0/bw/bw/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/Maximum/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/Maximum"
  op: "Maximum"
  input: "listener/listener_0/bw/bw/Maximum/x"
  input: "listener/listener_0/bw/bw/Max"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/Minimum"
  op: "Minimum"
  input: "listener/listener_0/bw/bw/strided_slice_1"
  input: "listener/listener_0/bw/bw/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/iteration_counter"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/Enter"
  op: "Enter"
  input: "listener/listener_0/bw/bw/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/Enter_1"
  op: "Enter"
  input: "listener/listener_0/bw/bw/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/Enter_2"
  op: "Enter"
  input: "listener/listener_0/bw/bw/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/Enter_3"
  op: "Enter"
  input: "listener/listener_0/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/Enter_4"
  op: "Enter"
  input: "listener/listener_0/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/Merge"
  op: "Merge"
  input: "listener/listener_0/bw/bw/while/Enter"
  input: "listener/listener_0/bw/bw/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/Merge_1"
  op: "Merge"
  input: "listener/listener_0/bw/bw/while/Enter_1"
  input: "listener/listener_0/bw/bw/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/Merge_2"
  op: "Merge"
  input: "listener/listener_0/bw/bw/while/Enter_2"
  input: "listener/listener_0/bw/bw/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/Merge_3"
  op: "Merge"
  input: "listener/listener_0/bw/bw/while/Enter_3"
  input: "listener/listener_0/bw/bw/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/Merge_4"
  op: "Merge"
  input: "listener/listener_0/bw/bw/while/Enter_4"
  input: "listener/listener_0/bw/bw/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/Less"
  op: "Less"
  input: "listener/listener_0/bw/bw/while/Merge"
  input: "listener/listener_0/bw/bw/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/Less/Enter"
  op: "Enter"
  input: "listener/listener_0/bw/bw/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/Less_1"
  op: "Less"
  input: "listener/listener_0/bw/bw/while/Merge_1"
  input: "listener/listener_0/bw/bw/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/Less_1/Enter"
  op: "Enter"
  input: "listener/listener_0/bw/bw/Minimum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/LogicalAnd"
  op: "LogicalAnd"
  input: "listener/listener_0/bw/bw/while/Less"
  input: "listener/listener_0/bw/bw/while/Less_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/LoopCond"
  op: "LoopCond"
  input: "listener/listener_0/bw/bw/while/LogicalAnd"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/Switch"
  op: "Switch"
  input: "listener/listener_0/bw/bw/while/Merge"
  input: "listener/listener_0/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/Switch_1"
  op: "Switch"
  input: "listener/listener_0/bw/bw/while/Merge_1"
  input: "listener/listener_0/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/Switch_2"
  op: "Switch"
  input: "listener/listener_0/bw/bw/while/Merge_2"
  input: "listener/listener_0/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/Switch_3"
  op: "Switch"
  input: "listener/listener_0/bw/bw/while/Merge_3"
  input: "listener/listener_0/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/Switch_4"
  op: "Switch"
  input: "listener/listener_0/bw/bw/while/Merge_4"
  input: "listener/listener_0/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/Merge_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/Identity"
  op: "Identity"
  input: "listener/listener_0/bw/bw/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/Identity_1"
  op: "Identity"
  input: "listener/listener_0/bw/bw/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/Identity_2"
  op: "Identity"
  input: "listener/listener_0/bw/bw/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/Identity_3"
  op: "Identity"
  input: "listener/listener_0/bw/bw/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/Identity_4"
  op: "Identity"
  input: "listener/listener_0/bw/bw/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/add/y"
  op: "Const"
  input: "^listener/listener_0/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/add"
  op: "Add"
  input: "listener/listener_0/bw/bw/while/Identity"
  input: "listener/listener_0/bw/bw/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "listener/listener_0/bw/bw/while/TensorArrayReadV3/Enter"
  input: "listener/listener_0/bw/bw/while/Identity_1"
  input: "listener/listener_0/bw/bw/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "listener/listener_0/bw/bw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "listener/listener_0/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/GreaterEqual"
  op: "GreaterEqual"
  input: "listener/listener_0/bw/bw/while/Identity_1"
  input: "listener/listener_0/bw/bw/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/GreaterEqual/Enter"
  op: "Enter"
  input: "listener/listener_0/bw/bw/CheckSeqLen"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout/rate"
  op: "Const"
  input: "^listener/listener_0/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000002384185791
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout/Shape"
  op: "Shape"
  input: "listener/listener_0/bw/bw/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout/random_uniform/min"
  op: "Const"
  input: "^listener/listener_0/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout/random_uniform/max"
  op: "Const"
  input: "^listener/listener_0/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "listener/listener_0/bw/bw/while/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout/random_uniform/sub"
  op: "Sub"
  input: "listener/listener_0/bw/bw/while/dropout/random_uniform/max"
  input: "listener/listener_0/bw/bw/while/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout/random_uniform/mul"
  op: "Mul"
  input: "listener/listener_0/bw/bw/while/dropout/random_uniform/RandomUniform"
  input: "listener/listener_0/bw/bw/while/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout/random_uniform"
  op: "Add"
  input: "listener/listener_0/bw/bw/while/dropout/random_uniform/mul"
  input: "listener/listener_0/bw/bw/while/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout/sub/x"
  op: "Const"
  input: "^listener/listener_0/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout/sub"
  op: "Sub"
  input: "listener/listener_0/bw/bw/while/dropout/sub/x"
  input: "listener/listener_0/bw/bw/while/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout/truediv/x"
  op: "Const"
  input: "^listener/listener_0/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout/truediv"
  op: "RealDiv"
  input: "listener/listener_0/bw/bw/while/dropout/truediv/x"
  input: "listener/listener_0/bw/bw/while/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout/GreaterEqual"
  op: "GreaterEqual"
  input: "listener/listener_0/bw/bw/while/dropout/random_uniform"
  input: "listener/listener_0/bw/bw/while/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout/mul"
  op: "Mul"
  input: "listener/listener_0/bw/bw/while/TensorArrayReadV3"
  input: "listener/listener_0/bw/bw/while/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout/Cast"
  op: "Cast"
  input: "listener/listener_0/bw/bw/while/dropout/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout/mul_1"
  op: "Mul"
  input: "listener/listener_0/bw/bw/while/dropout/mul"
  input: "listener/listener_0/bw/bw/while/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\220\003\000\000\000\010\000\000"
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.04502251744270325
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.04502251744270325
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "listener/listener_0/bw/lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "listener/listener_0/bw/lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "listener/listener_0/bw/lstm_cell/kernel/Initializer/random_uniform/max"
  input: "listener/listener_0/bw/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "listener/listener_0/bw/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "listener/listener_0/bw/lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "listener/listener_0/bw/lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "listener/listener_0/bw/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 912
        }
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "listener/listener_0/bw/lstm_cell/kernel/Assign"
  op: "Assign"
  input: "listener/listener_0/bw/lstm_cell/kernel"
  input: "listener/listener_0/bw/lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "listener/listener_0/bw/lstm_cell/kernel/read"
  op: "Identity"
  input: "listener/listener_0/bw/lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/lstm_cell/bias/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2048
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/lstm_cell/bias/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/lstm_cell/bias/Initializer/zeros"
  op: "Fill"
  input: "listener/listener_0/bw/lstm_cell/bias/Initializer/zeros/shape_as_tensor"
  input: "listener/listener_0/bw/lstm_cell/bias/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "listener/listener_0/bw/lstm_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "listener/listener_0/bw/lstm_cell/bias/Assign"
  op: "Assign"
  input: "listener/listener_0/bw/lstm_cell/bias"
  input: "listener/listener_0/bw/lstm_cell/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "listener/listener_0/bw/lstm_cell/bias/read"
  op: "Identity"
  input: "listener/listener_0/bw/lstm_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/lstm_cell/concat/axis"
  op: "Const"
  input: "^listener/listener_0/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/lstm_cell/concat"
  op: "ConcatV2"
  input: "listener/listener_0/bw/bw/while/dropout/mul_1"
  input: "listener/listener_0/bw/bw/while/Identity_4"
  input: "listener/listener_0/bw/bw/while/lstm_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 912
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/lstm_cell/MatMul"
  op: "MatMul"
  input: "listener/listener_0/bw/bw/while/lstm_cell/concat"
  input: "listener/listener_0/bw/bw/while/lstm_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "listener/listener_0/bw/lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "listener/listener_0/bw/bw/while/lstm_cell/MatMul"
  input: "listener/listener_0/bw/bw/while/lstm_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "listener/listener_0/bw/lstm_cell/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/lstm_cell/Const"
  op: "Const"
  input: "^listener/listener_0/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/lstm_cell/split/split_dim"
  op: "Const"
  input: "^listener/listener_0/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/lstm_cell/split"
  op: "Split"
  input: "listener/listener_0/bw/bw/while/lstm_cell/split/split_dim"
  input: "listener/listener_0/bw/bw/while/lstm_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/lstm_cell/add/y"
  op: "Const"
  input: "^listener/listener_0/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/lstm_cell/add"
  op: "Add"
  input: "listener/listener_0/bw/bw/while/lstm_cell/split:2"
  input: "listener/listener_0/bw/bw/while/lstm_cell/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "listener/listener_0/bw/bw/while/lstm_cell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/lstm_cell/mul"
  op: "Mul"
  input: "listener/listener_0/bw/bw/while/lstm_cell/Sigmoid"
  input: "listener/listener_0/bw/bw/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "listener/listener_0/bw/bw/while/lstm_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/lstm_cell/Tanh"
  op: "Tanh"
  input: "listener/listener_0/bw/bw/while/lstm_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/lstm_cell/mul_1"
  op: "Mul"
  input: "listener/listener_0/bw/bw/while/lstm_cell/Sigmoid_1"
  input: "listener/listener_0/bw/bw/while/lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/lstm_cell/add_1"
  op: "Add"
  input: "listener/listener_0/bw/bw/while/lstm_cell/mul"
  input: "listener/listener_0/bw/bw/while/lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "listener/listener_0/bw/bw/while/lstm_cell/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/lstm_cell/Tanh_1"
  op: "Tanh"
  input: "listener/listener_0/bw/bw/while/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/lstm_cell/mul_2"
  op: "Mul"
  input: "listener/listener_0/bw/bw/while/lstm_cell/Sigmoid_2"
  input: "listener/listener_0/bw/bw/while/lstm_cell/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout_1/rate"
  op: "Const"
  input: "^listener/listener_0/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000002384185791
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout_1/Shape"
  op: "Shape"
  input: "listener/listener_0/bw/bw/while/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout_1/random_uniform/min"
  op: "Const"
  input: "^listener/listener_0/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout_1/random_uniform/max"
  op: "Const"
  input: "^listener/listener_0/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "listener/listener_0/bw/bw/while/dropout_1/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout_1/random_uniform/sub"
  op: "Sub"
  input: "listener/listener_0/bw/bw/while/dropout_1/random_uniform/max"
  input: "listener/listener_0/bw/bw/while/dropout_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout_1/random_uniform/mul"
  op: "Mul"
  input: "listener/listener_0/bw/bw/while/dropout_1/random_uniform/RandomUniform"
  input: "listener/listener_0/bw/bw/while/dropout_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout_1/random_uniform"
  op: "Add"
  input: "listener/listener_0/bw/bw/while/dropout_1/random_uniform/mul"
  input: "listener/listener_0/bw/bw/while/dropout_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout_1/sub/x"
  op: "Const"
  input: "^listener/listener_0/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout_1/sub"
  op: "Sub"
  input: "listener/listener_0/bw/bw/while/dropout_1/sub/x"
  input: "listener/listener_0/bw/bw/while/dropout_1/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout_1/truediv/x"
  op: "Const"
  input: "^listener/listener_0/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout_1/truediv"
  op: "RealDiv"
  input: "listener/listener_0/bw/bw/while/dropout_1/truediv/x"
  input: "listener/listener_0/bw/bw/while/dropout_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout_1/GreaterEqual"
  op: "GreaterEqual"
  input: "listener/listener_0/bw/bw/while/dropout_1/random_uniform"
  input: "listener/listener_0/bw/bw/while/dropout_1/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout_1/mul"
  op: "Mul"
  input: "listener/listener_0/bw/bw/while/lstm_cell/mul_2"
  input: "listener/listener_0/bw/bw/while/dropout_1/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout_1/Cast"
  op: "Cast"
  input: "listener/listener_0/bw/bw/while/dropout_1/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout_1/mul_1"
  op: "Mul"
  input: "listener/listener_0/bw/bw/while/dropout_1/mul"
  input: "listener/listener_0/bw/bw/while/dropout_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout_2/rate"
  op: "Const"
  input: "^listener/listener_0/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000002384185791
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout_2/Shape"
  op: "Shape"
  input: "listener/listener_0/bw/bw/while/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout_2/random_uniform/min"
  op: "Const"
  input: "^listener/listener_0/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout_2/random_uniform/max"
  op: "Const"
  input: "^listener/listener_0/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout_2/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "listener/listener_0/bw/bw/while/dropout_2/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout_2/random_uniform/sub"
  op: "Sub"
  input: "listener/listener_0/bw/bw/while/dropout_2/random_uniform/max"
  input: "listener/listener_0/bw/bw/while/dropout_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout_2/random_uniform/mul"
  op: "Mul"
  input: "listener/listener_0/bw/bw/while/dropout_2/random_uniform/RandomUniform"
  input: "listener/listener_0/bw/bw/while/dropout_2/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout_2/random_uniform"
  op: "Add"
  input: "listener/listener_0/bw/bw/while/dropout_2/random_uniform/mul"
  input: "listener/listener_0/bw/bw/while/dropout_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout_2/sub/x"
  op: "Const"
  input: "^listener/listener_0/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout_2/sub"
  op: "Sub"
  input: "listener/listener_0/bw/bw/while/dropout_2/sub/x"
  input: "listener/listener_0/bw/bw/while/dropout_2/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout_2/truediv/x"
  op: "Const"
  input: "^listener/listener_0/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout_2/truediv"
  op: "RealDiv"
  input: "listener/listener_0/bw/bw/while/dropout_2/truediv/x"
  input: "listener/listener_0/bw/bw/while/dropout_2/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout_2/GreaterEqual"
  op: "GreaterEqual"
  input: "listener/listener_0/bw/bw/while/dropout_2/random_uniform"
  input: "listener/listener_0/bw/bw/while/dropout_2/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout_2/mul"
  op: "Mul"
  input: "listener/listener_0/bw/bw/while/lstm_cell/mul_2"
  input: "listener/listener_0/bw/bw/while/dropout_2/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout_2/Cast"
  op: "Cast"
  input: "listener/listener_0/bw/bw/while/dropout_2/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/dropout_2/mul_1"
  op: "Mul"
  input: "listener/listener_0/bw/bw/while/dropout_2/mul"
  input: "listener/listener_0/bw/bw/while/dropout_2/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/Select"
  op: "Select"
  input: "listener/listener_0/bw/bw/while/GreaterEqual"
  input: "listener/listener_0/bw/bw/while/Select/Enter"
  input: "listener/listener_0/bw/bw/while/dropout_2/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/dropout_2/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/Select/Enter"
  op: "Enter"
  input: "listener/listener_0/bw/bw/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/dropout_2/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/Select_1"
  op: "Select"
  input: "listener/listener_0/bw/bw/while/GreaterEqual"
  input: "listener/listener_0/bw/bw/while/Identity_3"
  input: "listener/listener_0/bw/bw/while/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/lstm_cell/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/Select_2"
  op: "Select"
  input: "listener/listener_0/bw/bw/while/GreaterEqual"
  input: "listener/listener_0/bw/bw/while/Identity_4"
  input: "listener/listener_0/bw/bw/while/dropout_1/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/dropout_1/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "listener/listener_0/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "listener/listener_0/bw/bw/while/Identity_1"
  input: "listener/listener_0/bw/bw/while/Select"
  input: "listener/listener_0/bw/bw/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/dropout_2/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "listener/listener_0/bw/bw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/dropout_2/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/add_1/y"
  op: "Const"
  input: "^listener/listener_0/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/add_1"
  op: "Add"
  input: "listener/listener_0/bw/bw/while/Identity_1"
  input: "listener/listener_0/bw/bw/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/NextIteration"
  op: "NextIteration"
  input: "listener/listener_0/bw/bw/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/NextIteration_1"
  op: "NextIteration"
  input: "listener/listener_0/bw/bw/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/NextIteration_2"
  op: "NextIteration"
  input: "listener/listener_0/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/NextIteration_3"
  op: "NextIteration"
  input: "listener/listener_0/bw/bw/while/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/NextIteration_4"
  op: "NextIteration"
  input: "listener/listener_0/bw/bw/while/Select_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/Exit"
  op: "Exit"
  input: "listener/listener_0/bw/bw/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/Exit_1"
  op: "Exit"
  input: "listener/listener_0/bw/bw/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/Exit_2"
  op: "Exit"
  input: "listener/listener_0/bw/bw/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/Exit_3"
  op: "Exit"
  input: "listener/listener_0/bw/bw/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/while/Exit_4"
  op: "Exit"
  input: "listener/listener_0/bw/bw/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "listener/listener_0/bw/bw/TensorArray"
  input: "listener/listener_0/bw/bw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/TensorArrayStack/range"
  op: "Range"
  input: "listener/listener_0/bw/bw/TensorArrayStack/range/start"
  input: "listener/listener_0/bw/bw/TensorArrayStack/TensorArraySizeV3"
  input: "listener/listener_0/bw/bw/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "listener/listener_0/bw/bw/TensorArray"
  input: "listener/listener_0/bw/bw/TensorArrayStack/range"
  input: "listener/listener_0/bw/bw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 512
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/Rank_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/range_1/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/range_1/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/range_1"
  op: "Range"
  input: "listener/listener_0/bw/bw/range_1/start"
  input: "listener/listener_0/bw/bw/Rank_1"
  input: "listener/listener_0/bw/bw/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/concat_2/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/concat_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/concat_2"
  op: "ConcatV2"
  input: "listener/listener_0/bw/bw/concat_2/values_0"
  input: "listener/listener_0/bw/bw/range_1"
  input: "listener/listener_0/bw/bw/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/bw/transpose_1"
  op: "Transpose"
  input: "listener/listener_0/bw/bw/TensorArrayStack/TensorArrayGatherV3"
  input: "listener/listener_0/bw/bw/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "listener/ReverseSequence"
  op: "ReverseSequence"
  input: "listener/listener_0/bw/bw/transpose_1"
  input: "Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "listener/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "listener/concat"
  op: "ConcatV2"
  input: "listener/listener_0/fw/fw/transpose_1"
  input: "listener/ReverseSequence"
  input: "listener/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "listener/Shape"
  op: "Shape"
  input: "listener/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "listener/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "listener/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "listener/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "listener/strided_slice"
  op: "StridedSlice"
  input: "listener/Shape"
  input: "listener/strided_slice/stack"
  input: "listener/strided_slice/stack_1"
  input: "listener/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "listener/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "listener/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "listener/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "listener/strided_slice_1"
  op: "StridedSlice"
  input: "listener/Shape"
  input: "listener/strided_slice_1/stack"
  input: "listener/strided_slice_1/stack_1"
  input: "listener/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "listener/FloorMod/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "listener/FloorMod"
  op: "FloorMod"
  input: "listener/strided_slice_1"
  input: "listener/FloorMod/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "listener/Pad/paddings/1/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "listener/Pad/paddings/1"
  op: "Pack"
  input: "listener/Pad/paddings/1/0"
  input: "listener/FloorMod"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "listener/Pad/paddings/0_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "listener/Pad/paddings/2_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "listener/Pad/paddings"
  op: "Pack"
  input: "listener/Pad/paddings/0_1"
  input: "listener/Pad/paddings/1"
  input: "listener/Pad/paddings/2_1"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "listener/Pad"
  op: "Pad"
  input: "listener/concat"
  input: "listener/Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "listener/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "listener/Reshape/shape/2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2048
      }
    }
  }
}
node {
  name: "listener/Reshape/shape"
  op: "Pack"
  input: "listener/strided_slice"
  input: "listener/Reshape/shape/1"
  input: "listener/Reshape/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "listener/Reshape"
  op: "Reshape"
  input: "listener/Pad"
  input: "listener/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "listener/floordiv/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "listener/floordiv"
  op: "FloorDiv"
  input: "Cast"
  input: "listener/floordiv/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "listener/FloorMod_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "listener/FloorMod_1"
  op: "FloorMod"
  input: "Cast"
  input: "listener/FloorMod_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "listener/add"
  op: "Add"
  input: "listener/floordiv"
  input: "listener/FloorMod_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "listener/listener"
      }
    }
  }
}
node {
  name: "listener/listener"
  op: "HistogramSummary"
  input: "listener/listener/tag"
  input: "listener/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tile_batch/Shape"
  op: "Shape"
  input: "listener/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "tile_batch/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "tile_batch/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "tile_batch/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "tile_batch/strided_slice"
  op: "StridedSlice"
  input: "tile_batch/Shape"
  input: "tile_batch/strided_slice/stack"
  input: "tile_batch/strided_slice/stack_1"
  input: "tile_batch/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "attention/DropoutWrapperInit/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "attention/DropoutWrapperInit/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "attention/DropoutWrapperInit/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "attention/LuongAttention/Shape"
  op: "Shape"
  input: "listener/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "attention/LuongAttention/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "attention/LuongAttention/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "attention/LuongAttention/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "attention/LuongAttention/strided_slice"
  op: "StridedSlice"
  input: "attention/LuongAttention/Shape"
  input: "attention/LuongAttention/strided_slice/stack"
  input: "attention/LuongAttention/strided_slice/stack_1"
  input: "attention/LuongAttention/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "attention/LuongAttention/SequenceMask/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "attention/LuongAttention/SequenceMask/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "attention/LuongAttention/SequenceMask/Range"
  op: "Range"
  input: "attention/LuongAttention/SequenceMask/Const"
  input: "attention/LuongAttention/strided_slice"
  input: "attention/LuongAttention/SequenceMask/Const_1"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "attention/LuongAttention/SequenceMask/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "attention/LuongAttention/SequenceMask/ExpandDims"
  op: "ExpandDims"
  input: "listener/add"
  input: "attention/LuongAttention/SequenceMask/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "attention/LuongAttention/SequenceMask/Cast"
  op: "Cast"
  input: "attention/LuongAttention/SequenceMask/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "attention/LuongAttention/SequenceMask/Less"
  op: "Less"
  input: "attention/LuongAttention/SequenceMask/Range"
  input: "attention/LuongAttention/SequenceMask/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "attention/LuongAttention/SequenceMask/Cast_1"
  op: "Cast"
  input: "attention/LuongAttention/SequenceMask/Less"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "attention/LuongAttention/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "attention/LuongAttention/ones/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "attention/LuongAttention/ones"
  op: "Fill"
  input: "attention/LuongAttention/ones/shape_as_tensor"
  input: "attention/LuongAttention/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "attention/LuongAttention/Shape_1"
  op: "Shape"
  input: "attention/LuongAttention/SequenceMask/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "attention/LuongAttention/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "attention/LuongAttention/concat"
  op: "ConcatV2"
  input: "attention/LuongAttention/Shape_1"
  input: "attention/LuongAttention/ones"
  input: "attention/LuongAttention/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "attention/LuongAttention/Reshape"
  op: "Reshape"
  input: "attention/LuongAttention/SequenceMask/Cast_1"
  input: "attention/LuongAttention/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "attention/LuongAttention/mul"
  op: "Mul"
  input: "listener/Reshape"
  input: "attention/LuongAttention/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "attention/memory_layer/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\010\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "attention/memory_layer/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.04841229319572449
      }
    }
  }
}
node {
  name: "attention/memory_layer/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.04841229319572449
      }
    }
  }
}
node {
  name: "attention/memory_layer/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "attention/memory_layer/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "attention/memory_layer/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "attention/memory_layer/kernel/Initializer/random_uniform/max"
  input: "attention/memory_layer/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "attention/memory_layer/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "attention/memory_layer/kernel/Initializer/random_uniform/RandomUniform"
  input: "attention/memory_layer/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "attention/memory_layer/kernel/Initializer/random_uniform"
  op: "Add"
  input: "attention/memory_layer/kernel/Initializer/random_uniform/mul"
  input: "attention/memory_layer/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "attention/memory_layer/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2048
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "attention/memory_layer/kernel/Assign"
  op: "Assign"
  input: "attention/memory_layer/kernel"
  input: "attention/memory_layer/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "attention/memory_layer/kernel/read"
  op: "Identity"
  input: "attention/memory_layer/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "attention/LuongAttention/memory_layer/Tensordot/axes"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "attention/LuongAttention/memory_layer/Tensordot/free"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "attention/LuongAttention/memory_layer/Tensordot/Shape"
  op: "Shape"
  input: "attention/LuongAttention/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "attention/LuongAttention/memory_layer/Tensordot/GatherV2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "attention/LuongAttention/memory_layer/Tensordot/GatherV2"
  op: "GatherV2"
  input: "attention/LuongAttention/memory_layer/Tensordot/Shape"
  input: "attention/LuongAttention/memory_layer/Tensordot/free"
  input: "attention/LuongAttention/memory_layer/Tensordot/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "attention/LuongAttention/memory_layer/Tensordot/GatherV2_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "attention/LuongAttention/memory_layer/Tensordot/GatherV2_1"
  op: "GatherV2"
  input: "attention/LuongAttention/memory_layer/Tensordot/Shape"
  input: "attention/LuongAttention/memory_layer/Tensordot/axes"
  input: "attention/LuongAttention/memory_layer/Tensordot/GatherV2_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "attention/LuongAttention/memory_layer/Tensordot/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "attention/LuongAttention/memory_layer/Tensordot/Prod"
  op: "Prod"
  input: "attention/LuongAttention/memory_layer/Tensordot/GatherV2"
  input: "attention/LuongAttention/memory_layer/Tensordot/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "attention/LuongAttention/memory_layer/Tensordot/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "attention/LuongAttention/memory_layer/Tensordot/Prod_1"
  op: "Prod"
  input: "attention/LuongAttention/memory_layer/Tensordot/GatherV2_1"
  input: "attention/LuongAttention/memory_layer/Tensordot/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "attention/LuongAttention/memory_layer/Tensordot/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "attention/LuongAttention/memory_layer/Tensordot/concat"
  op: "ConcatV2"
  input: "attention/LuongAttention/memory_layer/Tensordot/free"
  input: "attention/LuongAttention/memory_layer/Tensordot/axes"
  input: "attention/LuongAttention/memory_layer/Tensordot/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "attention/LuongAttention/memory_layer/Tensordot/stack"
  op: "Pack"
  input: "attention/LuongAttention/memory_layer/Tensordot/Prod"
  input: "attention/LuongAttention/memory_layer/Tensordot/Prod_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "attention/LuongAttention/memory_layer/Tensordot/transpose"
  op: "Transpose"
  input: "attention/LuongAttention/mul"
  input: "attention/LuongAttention/memory_layer/Tensordot/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "attention/LuongAttention/memory_layer/Tensordot/Reshape"
  op: "Reshape"
  input: "attention/LuongAttention/memory_layer/Tensordot/transpose"
  input: "attention/LuongAttention/memory_layer/Tensordot/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "attention/LuongAttention/memory_layer/Tensordot/transpose_1/perm"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "attention/LuongAttention/memory_layer/Tensordot/transpose_1"
  op: "Transpose"
  input: "attention/memory_layer/kernel/read"
  input: "attention/LuongAttention/memory_layer/Tensordot/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "attention/LuongAttention/memory_layer/Tensordot/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\010\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "attention/LuongAttention/memory_layer/Tensordot/Reshape_1"
  op: "Reshape"
  input: "attention/LuongAttention/memory_layer/Tensordot/transpose_1"
  input: "attention/LuongAttention/memory_layer/Tensordot/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "attention/LuongAttention/memory_layer/Tensordot/MatMul"
  op: "MatMul"
  input: "attention/LuongAttention/memory_layer/Tensordot/Reshape"
  input: "attention/LuongAttention/memory_layer/Tensordot/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "attention/LuongAttention/memory_layer/Tensordot/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "attention/LuongAttention/memory_layer/Tensordot/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "attention/LuongAttention/memory_layer/Tensordot/concat_1"
  op: "ConcatV2"
  input: "attention/LuongAttention/memory_layer/Tensordot/GatherV2"
  input: "attention/LuongAttention/memory_layer/Tensordot/Const_2"
  input: "attention/LuongAttention/memory_layer/Tensordot/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "attention/LuongAttention/memory_layer/Tensordot"
  op: "Reshape"
  input: "attention/LuongAttention/memory_layer/Tensordot/MatMul"
  input: "attention/LuongAttention/memory_layer/Tensordot/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "attention/LuongAttention/Shape_2"
  op: "Shape"
  input: "attention/LuongAttention/memory_layer/Tensordot"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "attention/LuongAttention/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "attention/LuongAttention/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "attention/LuongAttention/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "attention/LuongAttention/strided_slice_1"
  op: "StridedSlice"
  input: "attention/LuongAttention/Shape_2"
  input: "attention/LuongAttention/strided_slice_1/stack"
  input: "attention/LuongAttention/strided_slice_1/stack_1"
  input: "attention/LuongAttention/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "attention/LuongAttention/Shape_3"
  op: "Shape"
  input: "attention/LuongAttention/memory_layer/Tensordot"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "attention/LuongAttention/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "attention/LuongAttention/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "attention/LuongAttention/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "attention/LuongAttention/strided_slice_2"
  op: "StridedSlice"
  input: "attention/LuongAttention/Shape_3"
  input: "attention/LuongAttention/strided_slice_2/stack"
  input: "attention/LuongAttention/strided_slice_2/stack_1"
  input: "attention/LuongAttention/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "attention/attention_cell/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "attention/attention_cell"
      }
    }
  }
}
node {
  name: "attention/attention_cell"
  op: "HistogramSummary"
  input: "attention/attention_cell/tag"
  input: "listener/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims"
  op: "ExpandDims"
  input: "tile_batch/strided_slice"
  input: "attention/AttentionWrapperZeroState/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "attention/AttentionWrapperZeroState/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims"
  input: "attention/AttentionWrapperZeroState/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/Const"
  input: "attention/AttentionWrapperZeroState/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/zeros"
  op: "Fill"
  input: "attention/AttentionWrapperZeroState/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/concat"
  input: "attention/AttentionWrapperZeroState/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_1"
  op: "ExpandDims"
  input: "tile_batch/strided_slice"
  input: "attention/AttentionWrapperZeroState/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_2"
  op: "ExpandDims"
  input: "tile_batch/strided_slice"
  input: "attention/AttentionWrapperZeroState/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "attention/AttentionWrapperZeroState/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_2"
  input: "attention/AttentionWrapperZeroState/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/Const_2"
  input: "attention/AttentionWrapperZeroState/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "attention/AttentionWrapperZeroState/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/concat_1"
  input: "attention/AttentionWrapperZeroState/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_3/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_3"
  op: "ExpandDims"
  input: "tile_batch/strided_slice"
  input: "attention/AttentionWrapperZeroState/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/assert_equal/Equal"
  op: "Equal"
  input: "tile_batch/strided_slice"
  input: "attention/LuongAttention/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/assert_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/assert_equal/All"
  op: "All"
  input: "attention/AttentionWrapperZeroState/assert_equal/Equal"
  input: "attention/AttentionWrapperZeroState/assert_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/assert_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "When calling zero_state of AttentionWrapper attention_wrapper: Non-matching batch sizes between the memory (encoder output) and the requested batch size.  Are you using the BeamSearchDecoder?  If so, make sure your encoder output has been tiled to beam_width via tf.contrib.seq2seq.tile_batch, and the batch_size= argument passed to zero_state is batch_size * beam_width."
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/assert_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x == y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/assert_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (tile_batch/strided_slice:0) = "
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/assert_equal/Assert/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (attention/LuongAttention/strided_slice_1:0) = "
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/assert_equal/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "When calling zero_state of AttentionWrapper attention_wrapper: Non-matching batch sizes between the memory (encoder output) and the requested batch size.  Are you using the BeamSearchDecoder?  If so, make sure your encoder output has been tiled to beam_width via tf.contrib.seq2seq.tile_batch, and the batch_size= argument passed to zero_state is batch_size * beam_width."
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/assert_equal/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x == y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/assert_equal/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (tile_batch/strided_slice:0) = "
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/assert_equal/Assert/Assert/data_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (attention/LuongAttention/strided_slice_1:0) = "
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/assert_equal/Assert/Assert"
  op: "Assert"
  input: "attention/AttentionWrapperZeroState/assert_equal/All"
  input: "attention/AttentionWrapperZeroState/assert_equal/Assert/Assert/data_0"
  input: "attention/AttentionWrapperZeroState/assert_equal/Assert/Assert/data_1"
  input: "attention/AttentionWrapperZeroState/assert_equal/Assert/Assert/data_2"
  input: "tile_batch/strided_slice"
  input: "attention/AttentionWrapperZeroState/assert_equal/Assert/Assert/data_4"
  input: "attention/LuongAttention/strided_slice_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/checked_cell_state"
  op: "Identity"
  input: "attention/AttentionWrapperZeroState/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/zeros"
  input: "^attention/AttentionWrapperZeroState/assert_equal/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/checked_cell_state_1"
  op: "Identity"
  input: "attention/AttentionWrapperZeroState/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1"
  input: "^attention/AttentionWrapperZeroState/assert_equal/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/ExpandDims"
  op: "ExpandDims"
  input: "tile_batch/strided_slice"
  input: "attention/AttentionWrapperZeroState/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/ExpandDims_1"
  op: "ExpandDims"
  input: "attention/LuongAttention/strided_slice_2"
  input: "attention/AttentionWrapperZeroState/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/concat"
  op: "ConcatV2"
  input: "attention/AttentionWrapperZeroState/ExpandDims"
  input: "attention/AttentionWrapperZeroState/ExpandDims_1"
  input: "attention/AttentionWrapperZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/zeros"
  op: "Fill"
  input: "attention/AttentionWrapperZeroState/concat"
  input: "attention/AttentionWrapperZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/ExpandDims_2"
  op: "ExpandDims"
  input: "tile_batch/strided_slice"
  input: "attention/AttentionWrapperZeroState/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/ExpandDims_3/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/ExpandDims_3"
  op: "ExpandDims"
  input: "attention/LuongAttention/strided_slice_2"
  input: "attention/AttentionWrapperZeroState/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/zeros_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/ExpandDims_4/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/ExpandDims_4"
  op: "ExpandDims"
  input: "tile_batch/strided_slice"
  input: "attention/AttentionWrapperZeroState/ExpandDims_4/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2048
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/concat_1"
  op: "ConcatV2"
  input: "attention/AttentionWrapperZeroState/ExpandDims_4"
  input: "attention/AttentionWrapperZeroState/Const"
  input: "attention/AttentionWrapperZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/zeros_2/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/zeros_2"
  op: "Fill"
  input: "attention/AttentionWrapperZeroState/concat_1"
  input: "attention/AttentionWrapperZeroState/zeros_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/ExpandDims_5/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/ExpandDims_5"
  op: "ExpandDims"
  input: "tile_batch/strided_slice"
  input: "attention/AttentionWrapperZeroState/ExpandDims_5/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2048
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/ExpandDims_6/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/ExpandDims_6"
  op: "ExpandDims"
  input: "tile_batch/strided_slice"
  input: "attention/AttentionWrapperZeroState/ExpandDims_6/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/ExpandDims_7/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/ExpandDims_7"
  op: "ExpandDims"
  input: "attention/LuongAttention/strided_slice_2"
  input: "attention/AttentionWrapperZeroState/ExpandDims_7/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/concat_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/concat_2"
  op: "ConcatV2"
  input: "attention/AttentionWrapperZeroState/ExpandDims_6"
  input: "attention/AttentionWrapperZeroState/ExpandDims_7"
  input: "attention/AttentionWrapperZeroState/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/zeros_3/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/zeros_3"
  op: "Fill"
  input: "attention/AttentionWrapperZeroState/concat_2"
  input: "attention/AttentionWrapperZeroState/zeros_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/ExpandDims_8/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/ExpandDims_8"
  op: "ExpandDims"
  input: "tile_batch/strided_slice"
  input: "attention/AttentionWrapperZeroState/ExpandDims_8/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/ExpandDims_9/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "attention/AttentionWrapperZeroState/ExpandDims_9"
  op: "ExpandDims"
  input: "attention/LuongAttention/strided_slice_2"
  input: "attention/AttentionWrapperZeroState/ExpandDims_9/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "speller/one_hot/on_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "speller/one_hot/off_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "speller/one_hot/depth"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "speller/one_hot"
  op: "OneHot"
  input: "Cast_1"
  input: "speller/one_hot/depth"
  input: "speller/one_hot/on_value"
  input: "speller/one_hot/off_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "speller/ScheduledEmbeddingSamplingWrapper/sampling_probability"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/range"
  op: "Range"
  input: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/range/start"
  input: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/Rank"
  input: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/concat/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/concat"
  op: "ConcatV2"
  input: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/concat/values_0"
  input: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/range"
  input: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/transpose"
  op: "Transpose"
  input: "speller/one_hot"
  input: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/Shape"
  op: "Shape"
  input: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/strided_slice"
  op: "StridedSlice"
  input: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/Shape"
  input: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/strided_slice/stack"
  input: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/strided_slice/stack_1"
  input: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/TensorArray"
  op: "TensorArrayV3"
  input: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/TensorArrayUnstack/Shape"
  input: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/TensorArrayUnstack/strided_slice/stack"
  input: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/TensorArrayUnstack/strided_slice/stack_1"
  input: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/TensorArrayUnstack/range"
  op: "Range"
  input: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/TensorArrayUnstack/range/start"
  input: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/TensorArrayUnstack/strided_slice"
  input: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/TensorArray"
  input: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/TensorArrayUnstack/range"
  input: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/transpose"
  input: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/strided_slice_1"
  op: "StridedSlice"
  input: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/transpose"
  input: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/strided_slice_1/stack"
  input: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/strided_slice_1/stack_1"
  input: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/zeros_like"
  op: "ZerosLike"
  input: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/Size"
  op: "Size"
  input: "Cast_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speller/decoder/TrainingHelperInitialize/Equal/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/decoder/TrainingHelperInitialize/Equal"
  op: "Equal"
  input: "speller/decoder/TrainingHelperInitialize/Equal/x"
  input: "Cast_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/TrainingHelperInitialize/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/decoder/TrainingHelperInitialize/All"
  op: "All"
  input: "speller/decoder/TrainingHelperInitialize/Equal"
  input: "speller/decoder/TrainingHelperInitialize/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "speller/decoder/TrainingHelperInitialize/cond/Switch"
  op: "Switch"
  input: "speller/decoder/TrainingHelperInitialize/All"
  input: "speller/decoder/TrainingHelperInitialize/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/TrainingHelperInitialize/cond/switch_t"
  op: "Identity"
  input: "speller/decoder/TrainingHelperInitialize/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/TrainingHelperInitialize/cond/switch_f"
  op: "Identity"
  input: "speller/decoder/TrainingHelperInitialize/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/TrainingHelperInitialize/cond/pred_id"
  op: "Identity"
  input: "speller/decoder/TrainingHelperInitialize/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/TrainingHelperInitialize/cond/Switch_1"
  op: "Switch"
  input: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/zeros_like"
  input: "speller/decoder/TrainingHelperInitialize/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/zeros_like"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/index"
  op: "Const"
  input: "^speller/decoder/TrainingHelperInitialize/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "speller/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/Switch"
  input: "speller/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/index"
  input: "speller/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/Switch_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "speller/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/Switch"
  op: "Switch"
  input: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/TensorArray"
  input: "speller/decoder/TrainingHelperInitialize/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/Switch_1"
  op: "Switch"
  input: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  input: "speller/decoder/TrainingHelperInitialize/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/TrainingHelperInitialize/cond/Merge"
  op: "Merge"
  input: "speller/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3"
  input: "speller/decoder/TrainingHelperInitialize/cond/Switch_1:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/decoder/ExpandDims"
  op: "ExpandDims"
  input: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/Size"
  input: "speller/decoder/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "speller/decoder/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/decoder/concat"
  op: "ConcatV2"
  input: "speller/decoder/ExpandDims"
  input: "speller/decoder/Const"
  input: "speller/decoder/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "speller/decoder/zeros"
  op: "Fill"
  input: "speller/decoder/concat"
  input: "speller/decoder/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speller/decoder/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/decoder/ExpandDims_1"
  op: "ExpandDims"
  input: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/Size"
  input: "speller/decoder/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "speller/decoder/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/decoder/ExpandDims_2"
  op: "ExpandDims"
  input: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/Size"
  input: "speller/decoder/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/decoder/concat_1"
  op: "ConcatV2"
  input: "speller/decoder/ExpandDims_2"
  input: "speller/decoder/Const_2"
  input: "speller/decoder/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/zeros_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/decoder/zeros_1"
  op: "Fill"
  input: "speller/decoder/concat_1"
  input: "speller/decoder/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speller/decoder/ExpandDims_3/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/decoder/ExpandDims_3"
  op: "ExpandDims"
  input: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/Size"
  input: "speller/decoder/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/zeros_like/Shape"
  op: "Shape"
  input: "speller/decoder/TrainingHelperInitialize/Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speller/decoder/zeros_like/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/decoder/zeros_like"
  op: "Fill"
  input: "speller/decoder/zeros_like/Shape"
  input: "speller/decoder/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speller/decoder/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/decoder/TensorArray/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/decoder/TensorArray"
  op: "TensorArrayV3"
  input: "speller/decoder/TensorArray/size"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: true
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "speller/decoder/TensorArray_1/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/decoder/TensorArray_1"
  op: "TensorArrayV3"
  input: "speller/decoder/TensorArray_1/size"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: true
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "speller/decoder/while/Enter"
  op: "Enter"
  input: "speller/decoder/Const_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "speller/decoder/while/Enter_1"
  op: "Enter"
  input: "speller/decoder/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "speller/decoder/while/Enter_2"
  op: "Enter"
  input: "speller/decoder/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "speller/decoder/while/Enter_3"
  op: "Enter"
  input: "attention/AttentionWrapperZeroState/checked_cell_state"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "speller/decoder/while/Enter_4"
  op: "Enter"
  input: "attention/AttentionWrapperZeroState/checked_cell_state_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "speller/decoder/while/Enter_5"
  op: "Enter"
  input: "attention/AttentionWrapperZeroState/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "speller/decoder/while/Enter_6"
  op: "Enter"
  input: "attention/AttentionWrapperZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "speller/decoder/while/Enter_7"
  op: "Enter"
  input: "attention/AttentionWrapperZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "speller/decoder/while/Enter_8"
  op: "Enter"
  input: "attention/AttentionWrapperZeroState/zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "speller/decoder/while/Enter_9"
  op: "Enter"
  input: "speller/decoder/TrainingHelperInitialize/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "speller/decoder/while/Enter_10"
  op: "Enter"
  input: "speller/decoder/TrainingHelperInitialize/Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "speller/decoder/while/Enter_11"
  op: "Enter"
  input: "speller/decoder/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "speller/decoder/while/Merge"
  op: "Merge"
  input: "speller/decoder/while/Enter"
  input: "speller/decoder/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Merge_1"
  op: "Merge"
  input: "speller/decoder/while/Enter_1"
  input: "speller/decoder/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Merge_2"
  op: "Merge"
  input: "speller/decoder/while/Enter_2"
  input: "speller/decoder/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Merge_3"
  op: "Merge"
  input: "speller/decoder/while/Enter_3"
  input: "speller/decoder/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Merge_4"
  op: "Merge"
  input: "speller/decoder/while/Enter_4"
  input: "speller/decoder/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Merge_5"
  op: "Merge"
  input: "speller/decoder/while/Enter_5"
  input: "speller/decoder/while/NextIteration_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Merge_6"
  op: "Merge"
  input: "speller/decoder/while/Enter_6"
  input: "speller/decoder/while/NextIteration_6"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Merge_7"
  op: "Merge"
  input: "speller/decoder/while/Enter_7"
  input: "speller/decoder/while/NextIteration_7"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Merge_8"
  op: "Merge"
  input: "speller/decoder/while/Enter_8"
  input: "speller/decoder/while/NextIteration_8"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Merge_9"
  op: "Merge"
  input: "speller/decoder/while/Enter_9"
  input: "speller/decoder/while/NextIteration_9"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Merge_10"
  op: "Merge"
  input: "speller/decoder/while/Enter_10"
  input: "speller/decoder/while/NextIteration_10"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Merge_11"
  op: "Merge"
  input: "speller/decoder/while/Enter_11"
  input: "speller/decoder/while/NextIteration_11"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Const"
  op: "Const"
  input: "^speller/decoder/while/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/decoder/while/All"
  op: "All"
  input: "speller/decoder/while/Merge_10"
  input: "speller/decoder/while/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "speller/decoder/while/LogicalNot"
  op: "LogicalNot"
  input: "speller/decoder/while/All"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/LoopCond"
  op: "LoopCond"
  input: "speller/decoder/while/LogicalNot"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Switch"
  op: "Switch"
  input: "speller/decoder/while/Merge"
  input: "speller/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Switch_1"
  op: "Switch"
  input: "speller/decoder/while/Merge_1"
  input: "speller/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Switch_2"
  op: "Switch"
  input: "speller/decoder/while/Merge_2"
  input: "speller/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Switch_3"
  op: "Switch"
  input: "speller/decoder/while/Merge_3"
  input: "speller/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Switch_4"
  op: "Switch"
  input: "speller/decoder/while/Merge_4"
  input: "speller/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/Merge_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Switch_5"
  op: "Switch"
  input: "speller/decoder/while/Merge_5"
  input: "speller/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/Merge_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Switch_6"
  op: "Switch"
  input: "speller/decoder/while/Merge_6"
  input: "speller/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/Merge_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Switch_7"
  op: "Switch"
  input: "speller/decoder/while/Merge_7"
  input: "speller/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/Merge_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Switch_8"
  op: "Switch"
  input: "speller/decoder/while/Merge_8"
  input: "speller/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/Merge_8"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Switch_9"
  op: "Switch"
  input: "speller/decoder/while/Merge_9"
  input: "speller/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/Merge_9"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Switch_10"
  op: "Switch"
  input: "speller/decoder/while/Merge_10"
  input: "speller/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/Merge_10"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Switch_11"
  op: "Switch"
  input: "speller/decoder/while/Merge_11"
  input: "speller/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/Merge_11"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Identity"
  op: "Identity"
  input: "speller/decoder/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Identity_1"
  op: "Identity"
  input: "speller/decoder/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Identity_2"
  op: "Identity"
  input: "speller/decoder/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Identity_3"
  op: "Identity"
  input: "speller/decoder/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Identity_4"
  op: "Identity"
  input: "speller/decoder/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Identity_5"
  op: "Identity"
  input: "speller/decoder/while/Switch_5:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Identity_6"
  op: "Identity"
  input: "speller/decoder/while/Switch_6:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Identity_7"
  op: "Identity"
  input: "speller/decoder/while/Switch_7:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Identity_8"
  op: "Identity"
  input: "speller/decoder/while/Switch_8:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Identity_9"
  op: "Identity"
  input: "speller/decoder/while/Switch_9:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Identity_10"
  op: "Identity"
  input: "speller/decoder/while/Switch_10:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Identity_11"
  op: "Identity"
  input: "speller/decoder/while/Switch_11:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat/axis"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat"
  op: "ConcatV2"
  input: "speller/decoder/while/Identity_9"
  input: "speller/decoder/while/Identity_5"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2078
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/rate"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000002384185791
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/Shape"
  op: "Shape"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/random_uniform/min"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/random_uniform/max"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2078
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/random_uniform/sub"
  op: "Sub"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/random_uniform/max"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/random_uniform/mul"
  op: "Mul"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/random_uniform/RandomUniform"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2078
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/random_uniform"
  op: "Add"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/random_uniform/mul"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2078
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/sub/x"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/sub"
  op: "Sub"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/sub/x"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/truediv/x"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/truediv"
  op: "RealDiv"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/truediv/x"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/GreaterEqual"
  op: "GreaterEqual"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/random_uniform"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2078
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul"
  op: "Mul"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2078
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/Cast"
  op: "Cast"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2078
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1"
  op: "Mul"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2078
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\036\n\000\000\000\010\000\000"
      }
    }
  }
}
node {
  name: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.035967499017715454
      }
    }
  }
}
node {
  name: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.035967499017715454
      }
    }
  }
}
node {
  name: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2590
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/max"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2590
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2590
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2590
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2590
        }
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Assign"
  op: "Assign"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2590
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/read"
  op: "Identity"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2590
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2048
      }
    }
  }
}
node {
  name: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Initializer/zeros"
  op: "Fill"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Initializer/zeros/shape_as_tensor"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Assign"
  op: "Assign"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/read"
  op: "Identity"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat/axis"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat"
  op: "ConcatV2"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1"
  input: "speller/decoder/while/Identity_4"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2590
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul"
  op: "MatMul"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2590
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/Const"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/split/split_dim"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/split"
  op: "Split"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/split/split_dim"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add/y"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add"
  op: "Add"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/split:2"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul"
  op: "Mul"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/Sigmoid"
  input: "speller/decoder/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/Tanh"
  op: "Tanh"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1"
  op: "Mul"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/Sigmoid_1"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1"
  op: "Add"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/Tanh_1"
  op: "Tanh"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2"
  op: "Mul"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/Sigmoid_2"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/rate"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000002384185791
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/Shape"
  op: "Shape"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/random_uniform/min"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/random_uniform/max"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/random_uniform/sub"
  op: "Sub"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/random_uniform/max"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/random_uniform/mul"
  op: "Mul"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/random_uniform/RandomUniform"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/random_uniform"
  op: "Add"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/random_uniform/mul"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/sub/x"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/sub"
  op: "Sub"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/sub/x"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/truediv/x"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/truediv"
  op: "RealDiv"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/truediv/x"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/GreaterEqual"
  op: "GreaterEqual"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/random_uniform"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul"
  op: "Mul"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/Cast"
  op: "Cast"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1"
  op: "Mul"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/rate"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000002384185791
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/Shape"
  op: "Shape"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/random_uniform/min"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/random_uniform/max"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/random_uniform/sub"
  op: "Sub"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/random_uniform/max"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/random_uniform/mul"
  op: "Mul"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/random_uniform/RandomUniform"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/random_uniform"
  op: "Add"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/random_uniform/mul"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/sub/x"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/sub"
  op: "Sub"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/sub/x"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/truediv/x"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/truediv"
  op: "RealDiv"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/truediv/x"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/GreaterEqual"
  op: "GreaterEqual"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/random_uniform"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul"
  op: "Mul"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/Cast"
  op: "Cast"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1"
  op: "Mul"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Shape"
  op: "Shape"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/strided_slice/stack"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/strided_slice/stack_1"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/strided_slice/stack_2"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/strided_slice"
  op: "StridedSlice"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Shape"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/strided_slice/stack"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/strided_slice/stack_1"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_equal/Equal"
  op: "Equal"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/strided_slice"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_equal/Equal/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_equal/Equal/Enter"
  op: "Enter"
  input: "attention/LuongAttention/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_equal/Const"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_equal/All"
  op: "All"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_equal/Equal"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_equal/Assert/Const"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "When applying AttentionWrapper attention_wrapper_1: Non-matching batch sizes between the memory (encoder output) and the query (decoder output).  Are you using the BeamSearchDecoder?  You may need to tile your memory input via the tf.contrib.seq2seq.tile_batch function with argument multiple=beam_width."
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_equal/Assert/Const_1"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x == y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_equal/Assert/Const_2"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/strided_slice:0) = "
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_equal/Assert/Const_3"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (attention/LuongAttention/strided_slice_1:0) = "
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_equal/Assert/Assert/data_0"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "When applying AttentionWrapper attention_wrapper_1: Non-matching batch sizes between the memory (encoder output) and the query (decoder output).  Are you using the BeamSearchDecoder?  You may need to tile your memory input via the tf.contrib.seq2seq.tile_batch function with argument multiple=beam_width."
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_equal/Assert/Assert/data_1"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x == y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_equal/Assert/Assert/data_2"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/strided_slice:0) = "
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_equal/Assert/Assert/data_4"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (attention/LuongAttention/strided_slice_1:0) = "
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_equal/Assert/Assert"
  op: "Assert"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_equal/All"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_equal/Assert/Assert/data_0"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_equal/Assert/Assert/data_1"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_equal/Assert/Assert/data_2"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/strided_slice"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_equal/Assert/Assert/data_4"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_equal/Equal/Enter"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/checked_cell_output"
  op: "Identity"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1"
  input: "^speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_equal/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/ExpandDims/dim"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/ExpandDims"
  op: "ExpandDims"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/checked_cell_output"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul"
  op: "BatchMatMulV2"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/ExpandDims"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: true
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul/Enter"
  op: "Enter"
  input: "attention/LuongAttention/memory_layer/Tensordot"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/Squeeze"
  op: "Squeeze"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_positive/Const"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_positive/assert_less/Less"
  op: "Less"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_positive/Const"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_positive/assert_less/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_positive/assert_less/Less/Enter"
  op: "Enter"
  input: "listener/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_positive/assert_less/Const"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_positive/assert_less/All"
  op: "All"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_positive/assert_less/Less"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_positive/assert_less/Assert/Const"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "All values in memory_sequence_length must be greater than zero."
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_positive/assert_less/Assert/Const_1"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x > 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_positive/assert_less/Assert/Const_2"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (listener/add:0) = "
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "All values in memory_sequence_length must be greater than zero."
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_positive/assert_less/Assert/Assert/data_1"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x > 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_positive/assert_less/Assert/Assert/data_2"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (listener/add:0) = "
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_positive/assert_less/All"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_positive/assert_less/Assert/Assert/data_0"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_positive/assert_less/Assert/Assert/data_1"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_positive/assert_less/Assert/Assert/data_2"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_positive/assert_less/Less/Enter"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Shape_1"
  op: "Shape"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/Squeeze"
  input: "^speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/strided_slice_1/stack"
  op: "Const"
  input: "^speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/strided_slice_1/stack_1"
  op: "Const"
  input: "^speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/strided_slice_1/stack_2"
  op: "Const"
  input: "^speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/strided_slice_1"
  op: "StridedSlice"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Shape_1"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/strided_slice_1/stack"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/strided_slice_1/stack_1"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/SequenceMask/Const"
  op: "Const"
  input: "^speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/SequenceMask/Const_1"
  op: "Const"
  input: "^speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/SequenceMask/Range"
  op: "Range"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/SequenceMask/Const"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/strided_slice_1"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/SequenceMask/Const_1"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/SequenceMask/ExpandDims/dim"
  op: "Const"
  input: "^speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/SequenceMask/ExpandDims"
  op: "ExpandDims"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/assert_positive/assert_less/Less/Enter"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/SequenceMask/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/SequenceMask/Cast"
  op: "Cast"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/SequenceMask/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/SequenceMask/Less"
  op: "Less"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/SequenceMask/Range"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/SequenceMask/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/ones_like/Shape"
  op: "Shape"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/ones_like/Const"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/ones_like"
  op: "Fill"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/ones_like/Shape"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/mul/x"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -inf
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/mul"
  op: "Mul"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/mul/x"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select"
  op: "Select"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/SequenceMask/Less"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/Squeeze"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Softmax"
  op: "Softmax"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/ExpandDims/dim"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/ExpandDims"
  op: "ExpandDims"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Softmax"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul"
  op: "BatchMatMulV2"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/ExpandDims"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul/Enter"
  op: "Enter"
  input: "attention/LuongAttention/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Squeeze"
  op: "Squeeze"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_1/concat_dim"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_1"
  op: "Identity"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/add/y"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/add"
  op: "Add"
  input: "speller/decoder/while/Identity_6"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/projection_layer/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\010\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "speller/decoder/projection_layer/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.05373445525765419
      }
    }
  }
}
node {
  name: "speller/decoder/projection_layer/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05373445525765419
      }
    }
  }
}
node {
  name: "speller/decoder/projection_layer/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "speller/decoder/projection_layer/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "speller/decoder/projection_layer/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "speller/decoder/projection_layer/kernel/Initializer/random_uniform/max"
  input: "speller/decoder/projection_layer/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/projection_layer/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "speller/decoder/projection_layer/kernel/Initializer/random_uniform/RandomUniform"
  input: "speller/decoder/projection_layer/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/projection_layer/kernel/Initializer/random_uniform"
  op: "Add"
  input: "speller/decoder/projection_layer/kernel/Initializer/random_uniform/mul"
  input: "speller/decoder/projection_layer/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/projection_layer/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2048
        }
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "speller/decoder/projection_layer/kernel/Assign"
  op: "Assign"
  input: "speller/decoder/projection_layer/kernel"
  input: "speller/decoder/projection_layer/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "speller/decoder/projection_layer/kernel/read"
  op: "Identity"
  input: "speller/decoder/projection_layer/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/projection_layer/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "speller/decoder/projection_layer/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "speller/decoder/projection_layer/bias/Assign"
  op: "Assign"
  input: "speller/decoder/projection_layer/bias"
  input: "speller/decoder/projection_layer/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "speller/decoder/projection_layer/bias/read"
  op: "Identity"
  input: "speller/decoder/projection_layer/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/projection_layer/MatMul"
  op: "MatMul"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_1"
  input: "speller/decoder/while/BasicDecoderStep/projection_layer/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/projection_layer/MatMul/Enter"
  op: "Enter"
  input: "speller/decoder/projection_layer/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/projection_layer/BiasAdd"
  op: "BiasAdd"
  input: "speller/decoder/while/BasicDecoderStep/projection_layer/MatMul"
  input: "speller/decoder/while/BasicDecoderStep/projection_layer/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/projection_layer/BiasAdd/Enter"
  op: "Enter"
  input: "speller/decoder/projection_layer/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/Shape"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/Rank"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/Equal/y"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/Equal"
  op: "Equal"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/Rank"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/Cast"
  op: "Cast"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/Shape"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/PadV2/paddings/0/1"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/PadV2/paddings/0"
  op: "Pack"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/Cast"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/PadV2/paddings/0/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/PadV2/paddings"
  op: "Pack"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/PadV2/paddings/0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/PadV2/constant_values"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/PadV2"
  op: "PadV2"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/Shape"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/PadV2/paddings"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/PadV2/constant_values"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/Reshape"
  op: "Reshape"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/Reshape/Enter"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/PadV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/Reshape/Enter"
  op: "Enter"
  input: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/Const"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/Prod"
  op: "Prod"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/Reshape"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/concat/values_0"
  op: "Pack"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/Prod"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/concat/axis"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/concat"
  op: "ConcatV2"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/concat/values_0"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/Shape"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/random_uniform/min"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/random_uniform/max"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/random_uniform/sub"
  op: "Sub"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/random_uniform/max"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/random_uniform/mul"
  op: "Mul"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/random_uniform/RandomUniform"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/random_uniform"
  op: "Add"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/random_uniform/mul"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/Less"
  op: "Less"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/random_uniform"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/Less/Enter"
  op: "Enter"
  input: "speller/ScheduledEmbeddingSamplingWrapper/sampling_probability"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/Shape_1"
  op: "Shape"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/strided_slice/stack"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/strided_slice/stack_1"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/strided_slice/stack_2"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/strided_slice"
  op: "StridedSlice"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/Shape_1"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/strided_slice/stack"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/strided_slice/stack_1"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/concat_1/axis"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/concat_1"
  op: "ConcatV2"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/Reshape"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/strided_slice"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/Reshape_1"
  op: "Reshape"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/Less"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/concat_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/Shape_1"
  op: "Shape"
  input: "speller/decoder/while/BasicDecoderStep/projection_layer/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/strided_slice/stack"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/strided_slice/stack_1"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/strided_slice/stack_2"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/strided_slice"
  op: "StridedSlice"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/Shape_1"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/strided_slice/stack"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/strided_slice/stack_1"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/Shape_2"
  op: "Shape"
  input: "speller/decoder/while/BasicDecoderStep/projection_layer/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/strided_slice_1/stack"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/strided_slice_1/stack_1"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/strided_slice_1/stack_2"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/strided_slice_1"
  op: "StridedSlice"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/Shape_2"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/strided_slice_1/stack"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/strided_slice_1/stack_1"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/sample_shape"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/Rank"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/Equal/y"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/Equal"
  op: "Equal"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/Rank"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/Cast"
  op: "Cast"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/Shape"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/PadV2/paddings/0/1"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/PadV2/paddings/0"
  op: "Pack"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/Cast"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/PadV2/paddings/0/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/PadV2/paddings"
  op: "Pack"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/PadV2/paddings/0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/PadV2/constant_values"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/PadV2"
  op: "PadV2"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/Shape"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/PadV2/paddings"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/PadV2/constant_values"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/Reshape"
  op: "Reshape"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/sample_shape"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/PadV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/Const"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/Prod"
  op: "Prod"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/Reshape"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/multinomial/Multinomial"
  op: "Multinomial"
  input: "speller/decoder/while/BasicDecoderStep/projection_layer/BiasAdd"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/Prod"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/transpose/perm"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/transpose"
  op: "Transpose"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/multinomial/Multinomial"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/concat/values_0"
  op: "Pack"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/Prod"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/concat/axis"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/concat"
  op: "ConcatV2"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/concat/values_0"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/strided_slice_1"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/Reshape_1"
  op: "Reshape"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/transpose"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/Shape_1"
  op: "Shape"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/strided_slice/stack"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/strided_slice/stack_1"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/strided_slice/stack_2"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/strided_slice"
  op: "StridedSlice"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/Shape_1"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/strided_slice/stack"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/strided_slice/stack_1"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/concat_1/axis"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/concat_1"
  op: "ConcatV2"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/Reshape"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/strided_slice"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/Reshape_2"
  op: "Reshape"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/Reshape_1"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/concat_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/Fill/dims"
  op: "Pack"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/Reshape/Enter"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/Fill/value"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/Fill"
  op: "Fill"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/Fill/dims"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/Select"
  op: "Select"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler/Reshape_1"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/call_sampler_1/Reshape_2"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/Fill"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/add/y"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/add"
  op: "Add"
  input: "speller/decoder/while/Identity"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/GreaterEqual"
  op: "GreaterEqual"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/add"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/GreaterEqual/Enter"
  op: "Enter"
  input: "Cast_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/Const"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/All"
  op: "All"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/GreaterEqual"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Switch"
  op: "Switch"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/All"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/cond/switch_t"
  op: "Identity"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/cond/switch_f"
  op: "Identity"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/cond/pred_id"
  op: "Identity"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Enter"
  op: "Enter"
  input: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Switch_1"
  op: "Switch"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Enter"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch_1"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch"
  op: "Switch"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch_1"
  op: "Switch"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/add"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/add"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "speller/ScheduledEmbeddingSamplingWrapper/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch_2"
  op: "Switch"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Merge"
  op: "Merge"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Switch_1:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/Const"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/All"
  op: "All"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/GreaterEqual"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/Switch"
  op: "Switch"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/All"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/switch_t"
  op: "Identity"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/switch_f"
  op: "Identity"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/pred_id"
  op: "Identity"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/Switch_1"
  op: "Switch"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Merge"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/Greater/y"
  op: "Const"
  input: "^speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/Greater"
  op: "Greater"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/Greater/Switch"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/Greater/Switch"
  op: "Switch"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/Select"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/Where"
  op: "Where"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/Greater"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/Cast"
  op: "Cast"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/Where"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/LessEqual/y"
  op: "Const"
  input: "^speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/LessEqual"
  op: "LessEqual"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/Greater/Switch"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/Where_1"
  op: "Where"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/Cast_1"
  op: "Cast"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/Where_1"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/GatherNd"
  op: "GatherNd"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/Greater/Switch"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/Cast"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/GatherNd_1"
  op: "GatherNd"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/GatherNd_1/Switch"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/Cast_1"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/GatherNd_1/Switch"
  op: "Switch"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Merge"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/one_hot/on_value"
  op: "Const"
  input: "^speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/one_hot/off_value"
  op: "Const"
  input: "^speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/one_hot/depth"
  op: "Const"
  input: "^speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/one_hot"
  op: "OneHot"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/GatherNd"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/one_hot/depth"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/one_hot/on_value"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/one_hot/off_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/Shape"
  op: "Shape"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/GatherNd_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/ScatterNd"
  op: "ScatterNd"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/Cast"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/one_hot"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/ScatterNd_1"
  op: "ScatterNd"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/Cast_1"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/GatherNd_1"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/add"
  op: "Add"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/ScatterNd"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/ScatterNd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/Merge"
  op: "Merge"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/add"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/Switch_1:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/LogicalOr"
  op: "LogicalOr"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/TrainingHelperNextInputs/GreaterEqual"
  input: "speller/decoder/while/Identity_10"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/LogicalNot_1"
  op: "LogicalNot"
  input: "speller/decoder/while/Identity_10"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Shape"
  op: "Shape"
  input: "speller/decoder/while/Identity_11"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speller/decoder/while/add/y"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speller/decoder/while/add"
  op: "Add"
  input: "speller/decoder/while/Identity"
  input: "speller/decoder/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Fill"
  op: "Fill"
  input: "speller/decoder/while/Shape"
  input: "speller/decoder/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speller/decoder/while/Select"
  op: "Select"
  input: "speller/decoder/while/LogicalNot_1"
  input: "speller/decoder/while/Fill"
  input: "speller/decoder/while/Identity_11"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "speller/decoder/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "speller/decoder/while/Identity"
  input: "speller/decoder/while/BasicDecoderStep/projection_layer/BiasAdd"
  input: "speller/decoder/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/projection_layer/BiasAdd"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "speller/decoder/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/projection_layer/BiasAdd"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "speller/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "speller/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
  input: "speller/decoder/while/Identity"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/Select"
  input: "speller/decoder/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "speller/decoder/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperSample/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "speller/decoder/while/add_1/y"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speller/decoder/while/add_1"
  op: "Add"
  input: "speller/decoder/while/Identity"
  input: "speller/decoder/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/NextIteration"
  op: "NextIteration"
  input: "speller/decoder/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/NextIteration_1"
  op: "NextIteration"
  input: "speller/decoder/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/NextIteration_2"
  op: "NextIteration"
  input: "speller/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/NextIteration_3"
  op: "NextIteration"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/NextIteration_4"
  op: "NextIteration"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/NextIteration_5"
  op: "NextIteration"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/NextIteration_6"
  op: "NextIteration"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/NextIteration_7"
  op: "NextIteration"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/NextIteration_8"
  op: "NextIteration"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/NextIteration_9"
  op: "NextIteration"
  input: "speller/decoder/while/BasicDecoderStep/ScheduledEmbeddingTrainingHelperNextInputs/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/NextIteration_10"
  op: "NextIteration"
  input: "speller/decoder/while/LogicalOr"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/NextIteration_11"
  op: "NextIteration"
  input: "speller/decoder/while/Select"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Exit"
  op: "Exit"
  input: "speller/decoder/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Exit_1"
  op: "Exit"
  input: "speller/decoder/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Exit_2"
  op: "Exit"
  input: "speller/decoder/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Exit_3"
  op: "Exit"
  input: "speller/decoder/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Exit_4"
  op: "Exit"
  input: "speller/decoder/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Exit_5"
  op: "Exit"
  input: "speller/decoder/while/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Exit_6"
  op: "Exit"
  input: "speller/decoder/while/Switch_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Exit_7"
  op: "Exit"
  input: "speller/decoder/while/Switch_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Exit_8"
  op: "Exit"
  input: "speller/decoder/while/Switch_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Exit_9"
  op: "Exit"
  input: "speller/decoder/while/Switch_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Exit_10"
  op: "Exit"
  input: "speller/decoder/while/Switch_10"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/while/Exit_11"
  op: "Exit"
  input: "speller/decoder/while/Switch_11"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "speller/decoder/TensorArray"
  input: "speller/decoder/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/decoder/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speller/decoder/TensorArrayStack/range"
  op: "Range"
  input: "speller/decoder/TensorArrayStack/range/start"
  input: "speller/decoder/TensorArrayStack/TensorArraySizeV3"
  input: "speller/decoder/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "speller/decoder/TensorArray"
  input: "speller/decoder/TensorArrayStack/range"
  input: "speller/decoder/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 30
        }
      }
    }
  }
}
node {
  name: "speller/decoder/TensorArrayStack_1/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "speller/decoder/TensorArray_1"
  input: "speller/decoder/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "speller/decoder/TensorArrayStack_1/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/decoder/TensorArrayStack_1/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speller/decoder/TensorArrayStack_1/range"
  op: "Range"
  input: "speller/decoder/TensorArrayStack_1/range/start"
  input: "speller/decoder/TensorArrayStack_1/TensorArraySizeV3"
  input: "speller/decoder/TensorArrayStack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/TensorArrayStack_1/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "speller/decoder/TensorArray_1"
  input: "speller/decoder/TensorArrayStack_1/range"
  input: "speller/decoder/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "speller/decoder/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "speller/decoder/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "speller/decoder/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speller/decoder/range"
  op: "Range"
  input: "speller/decoder/range/start"
  input: "speller/decoder/Rank"
  input: "speller/decoder/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/concat_2/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "speller/decoder/concat_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/decoder/concat_2"
  op: "ConcatV2"
  input: "speller/decoder/concat_2/values_0"
  input: "speller/decoder/range"
  input: "speller/decoder/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/transpose"
  op: "Transpose"
  input: "speller/decoder/TensorArrayStack/TensorArrayGatherV3"
  input: "speller/decoder/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/Rank_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "speller/decoder/range_1/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "speller/decoder/range_1/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "speller/decoder/range_1"
  op: "Range"
  input: "speller/decoder/range_1/start"
  input: "speller/decoder/Rank_1"
  input: "speller/decoder/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/concat_3/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "speller/decoder/concat_3/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "speller/decoder/concat_3"
  op: "ConcatV2"
  input: "speller/decoder/concat_3/values_0"
  input: "speller/decoder/range_1"
  input: "speller/decoder/concat_3/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/transpose_1"
  op: "Transpose"
  input: "speller/decoder/TensorArrayStack_1/TensorArrayGatherV3"
  input: "speller/decoder/concat_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "prediction/ArgMax/dimension"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "prediction/ArgMax"
  op: "ArgMax"
  input: "speller/decoder/transpose"
  input: "prediction/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "prediction/ToInt32"
  op: "Cast"
  input: "prediction/ArgMax"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "metrics/Shape"
  op: "Shape"
  input: "prediction/ToInt32"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "metrics/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "metrics/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "metrics/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "metrics/strided_slice"
  op: "StridedSlice"
  input: "metrics/Shape"
  input: "metrics/strided_slice/stack"
  input: "metrics/strided_slice/stack_1"
  input: "metrics/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "metrics/Fill/dims/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "metrics/Fill/dims"
  op: "Pack"
  input: "metrics/strided_slice"
  input: "metrics/Fill/dims/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "metrics/Fill/value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 28
      }
    }
  }
}
node {
  name: "metrics/Fill"
  op: "Fill"
  input: "metrics/Fill/dims"
  input: "metrics/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "metrics/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/concat"
  op: "ConcatV2"
  input: "prediction/ToInt32"
  input: "metrics/Fill"
  input: "metrics/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "metrics/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "metrics/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "metrics/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "metrics/strided_slice_1"
  op: "StridedSlice"
  input: "metrics/concat"
  input: "metrics/strided_slice_1/stack"
  input: "metrics/strided_slice_1/stack_1"
  input: "metrics/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "metrics/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "metrics/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "metrics/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "metrics/strided_slice_2"
  op: "StridedSlice"
  input: "metrics/concat"
  input: "metrics/strided_slice_2/stack"
  input: "metrics/strided_slice_2/stack_1"
  input: "metrics/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "metrics/sub"
  op: "Sub"
  input: "metrics/strided_slice_1"
  input: "metrics/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "metrics/Cast"
  op: "Cast"
  input: "metrics/sub"
  attr {
    key: "DstT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "metrics/Equal/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 28
      }
    }
  }
}
node {
  name: "metrics/Equal"
  op: "Equal"
  input: "metrics/concat"
  input: "metrics/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "metrics/Where"
  op: "Where"
  input: "metrics/Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "metrics/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "metrics/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "metrics/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "metrics/strided_slice_3"
  op: "StridedSlice"
  input: "metrics/Where"
  input: "metrics/strided_slice_3/stack"
  input: "metrics/strided_slice_3/stack_1"
  input: "metrics/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "metrics/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "metrics/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "metrics/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "metrics/strided_slice_4"
  op: "StridedSlice"
  input: "metrics/Where"
  input: "metrics/strided_slice_4/stack"
  input: "metrics/strided_slice_4/stack_1"
  input: "metrics/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "metrics/SegmentMin"
  op: "SegmentMin"
  input: "metrics/strided_slice_3"
  input: "metrics/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "metrics/Shape_1"
  op: "Shape"
  input: "prediction/ToInt32"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "metrics/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "metrics/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "metrics/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "metrics/strided_slice_5"
  op: "StridedSlice"
  input: "metrics/Shape_1"
  input: "metrics/strided_slice_5/stack"
  input: "metrics/strided_slice_5/stack_1"
  input: "metrics/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "metrics/SequenceMask/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "metrics/SequenceMask/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "metrics/SequenceMask/Range"
  op: "Range"
  input: "metrics/SequenceMask/Const"
  input: "metrics/strided_slice_5"
  input: "metrics/SequenceMask/Const_1"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "metrics/SequenceMask/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/SequenceMask/ExpandDims"
  op: "ExpandDims"
  input: "metrics/SegmentMin"
  input: "metrics/SequenceMask/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "metrics/SequenceMask/Cast"
  op: "Cast"
  input: "metrics/SequenceMask/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "metrics/SequenceMask/Less"
  op: "Less"
  input: "metrics/SequenceMask/Range"
  input: "metrics/SequenceMask/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "metrics/and"
  op: "LogicalAnd"
  input: "metrics/Cast"
  input: "metrics/SequenceMask/Less"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "metrics/NotEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/NotEqual"
  op: "NotEqual"
  input: "prediction/ToInt32"
  input: "metrics/NotEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "metrics/and_1"
  op: "LogicalAnd"
  input: "metrics/and"
  input: "metrics/NotEqual"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "metrics/Where_1"
  op: "Where"
  input: "metrics/and_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "metrics/GatherNd"
  op: "GatherNd"
  input: "prediction/ToInt32"
  input: "metrics/Where_1"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "metrics/Shape_2"
  op: "Shape"
  input: "prediction/ToInt32"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/Shape_3"
  op: "Shape"
  input: "Cast_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "metrics/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "metrics/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "metrics/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "metrics/strided_slice_6"
  op: "StridedSlice"
  input: "metrics/Shape_3"
  input: "metrics/strided_slice_6/stack"
  input: "metrics/strided_slice_6/stack_1"
  input: "metrics/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "metrics/Fill_1/dims/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "metrics/Fill_1/dims"
  op: "Pack"
  input: "metrics/strided_slice_6"
  input: "metrics/Fill_1/dims/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "metrics/Fill_1/value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 28
      }
    }
  }
}
node {
  name: "metrics/Fill_1"
  op: "Fill"
  input: "metrics/Fill_1/dims"
  input: "metrics/Fill_1/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "metrics/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/concat_1"
  op: "ConcatV2"
  input: "Cast_2"
  input: "metrics/Fill_1"
  input: "metrics/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "metrics/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "metrics/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "metrics/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "metrics/strided_slice_7"
  op: "StridedSlice"
  input: "metrics/concat_1"
  input: "metrics/strided_slice_7/stack"
  input: "metrics/strided_slice_7/stack_1"
  input: "metrics/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "metrics/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "metrics/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "metrics/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "metrics/strided_slice_8"
  op: "StridedSlice"
  input: "metrics/concat_1"
  input: "metrics/strided_slice_8/stack"
  input: "metrics/strided_slice_8/stack_1"
  input: "metrics/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "metrics/sub_1"
  op: "Sub"
  input: "metrics/strided_slice_7"
  input: "metrics/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "metrics/Cast_1"
  op: "Cast"
  input: "metrics/sub_1"
  attr {
    key: "DstT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "metrics/Equal_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 28
      }
    }
  }
}
node {
  name: "metrics/Equal_1"
  op: "Equal"
  input: "metrics/concat_1"
  input: "metrics/Equal_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "metrics/Where_2"
  op: "Where"
  input: "metrics/Equal_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "metrics/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "metrics/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "metrics/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "metrics/strided_slice_9"
  op: "StridedSlice"
  input: "metrics/Where_2"
  input: "metrics/strided_slice_9/stack"
  input: "metrics/strided_slice_9/stack_1"
  input: "metrics/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "metrics/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "metrics/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "metrics/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "metrics/strided_slice_10"
  op: "StridedSlice"
  input: "metrics/Where_2"
  input: "metrics/strided_slice_10/stack"
  input: "metrics/strided_slice_10/stack_1"
  input: "metrics/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "metrics/SegmentMin_1"
  op: "SegmentMin"
  input: "metrics/strided_slice_9"
  input: "metrics/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "metrics/Shape_4"
  op: "Shape"
  input: "Cast_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "metrics/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "metrics/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "metrics/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "metrics/strided_slice_11"
  op: "StridedSlice"
  input: "metrics/Shape_4"
  input: "metrics/strided_slice_11/stack"
  input: "metrics/strided_slice_11/stack_1"
  input: "metrics/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "metrics/SequenceMask_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "metrics/SequenceMask_1/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "metrics/SequenceMask_1/Range"
  op: "Range"
  input: "metrics/SequenceMask_1/Const"
  input: "metrics/strided_slice_11"
  input: "metrics/SequenceMask_1/Const_1"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "metrics/SequenceMask_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/SequenceMask_1/ExpandDims"
  op: "ExpandDims"
  input: "metrics/SegmentMin_1"
  input: "metrics/SequenceMask_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "metrics/SequenceMask_1/Cast"
  op: "Cast"
  input: "metrics/SequenceMask_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "metrics/SequenceMask_1/Less"
  op: "Less"
  input: "metrics/SequenceMask_1/Range"
  input: "metrics/SequenceMask_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "metrics/and_2"
  op: "LogicalAnd"
  input: "metrics/Cast_1"
  input: "metrics/SequenceMask_1/Less"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "metrics/NotEqual_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/NotEqual_1"
  op: "NotEqual"
  input: "Cast_2"
  input: "metrics/NotEqual_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "metrics/and_3"
  op: "LogicalAnd"
  input: "metrics/and_2"
  input: "metrics/NotEqual_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "metrics/Where_3"
  op: "Where"
  input: "metrics/and_3"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "metrics/GatherNd_1"
  op: "GatherNd"
  input: "Cast_2"
  input: "metrics/Where_3"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "metrics/Shape_5"
  op: "Shape"
  input: "Cast_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/edit_distance"
  op: "EditDistance"
  input: "metrics/Where_1"
  input: "metrics/GatherNd"
  input: "metrics/Shape_2"
  input: "metrics/Where_3"
  input: "metrics/GatherNd_1"
  input: "metrics/Shape_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "normalize"
    value {
      b: true
    }
  }
}
node {
  name: "metrics/mean/total/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@metrics/mean/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "metrics/mean/total"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@metrics/mean/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "metrics/mean/total/Assign"
  op: "Assign"
  input: "metrics/mean/total"
  input: "metrics/mean/total/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@metrics/mean/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "metrics/mean/total/read"
  op: "Identity"
  input: "metrics/mean/total"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@metrics/mean/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "metrics/mean/count/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@metrics/mean/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "metrics/mean/count"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@metrics/mean/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "metrics/mean/count/Assign"
  op: "Assign"
  input: "metrics/mean/count"
  input: "metrics/mean/count/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@metrics/mean/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "metrics/mean/count/read"
  op: "Identity"
  input: "metrics/mean/count"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@metrics/mean/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "metrics/mean/Size"
  op: "Size"
  input: "metrics/edit_distance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "metrics/mean/Cast"
  op: "Cast"
  input: "metrics/mean/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "metrics/mean/Rank"
  op: "Rank"
  input: "metrics/edit_distance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "metrics/mean/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "metrics/mean/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "metrics/mean/range"
  op: "Range"
  input: "metrics/mean/range/start"
  input: "metrics/mean/Rank"
  input: "metrics/mean/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "metrics/mean/Sum"
  op: "Sum"
  input: "metrics/edit_distance"
  input: "metrics/mean/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/mean/AssignAdd"
  op: "AssignAdd"
  input: "metrics/mean/total"
  input: "metrics/mean/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@metrics/mean/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/mean/AssignAdd_1"
  op: "AssignAdd"
  input: "metrics/mean/count"
  input: "metrics/mean/Cast"
  input: "^metrics/edit_distance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@metrics/mean/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/mean/Maximum/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "metrics/mean/Maximum"
  op: "Maximum"
  input: "metrics/mean/count/read"
  input: "metrics/mean/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "metrics/mean/value"
  op: "DivNoNan"
  input: "metrics/mean/total/read"
  input: "metrics/mean/Maximum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "metrics/mean/Maximum_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "metrics/mean/Maximum_1"
  op: "Maximum"
  input: "metrics/mean/AssignAdd_1"
  input: "metrics/mean/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "metrics/mean/update_op"
  op: "DivNoNan"
  input: "metrics/mean/AssignAdd"
  input: "metrics/mean/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ler/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "ler"
      }
    }
  }
}
node {
  name: "ler"
  op: "ScalarSummary"
  input: "ler/tags"
  input: "metrics/mean/update_op"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss/L2Loss"
  op: "L2Loss"
  input: "dense_layer_1_0/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss/add/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/add"
  op: "Add"
  input: "loss/add/x"
  input: "loss/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss/L2Loss_1"
  op: "L2Loss"
  input: "dense_layer_1_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss/add_1"
  op: "Add"
  input: "loss/add"
  input: "loss/L2Loss_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss/SequenceMask/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/SequenceMask/Max"
  op: "Max"
  input: "Cast_3"
  input: "loss/SequenceMask/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/SequenceMask/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/SequenceMask/Maximum"
  op: "Maximum"
  input: "loss/SequenceMask/Const_1"
  input: "loss/SequenceMask/Max"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss/SequenceMask/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/SequenceMask/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/SequenceMask/Range"
  op: "Range"
  input: "loss/SequenceMask/Const_2"
  input: "loss/SequenceMask/Maximum"
  input: "loss/SequenceMask/Const_3"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss/SequenceMask/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/SequenceMask/ExpandDims"
  op: "ExpandDims"
  input: "Cast_3"
  input: "loss/SequenceMask/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss/SequenceMask/Cast"
  op: "Cast"
  input: "loss/SequenceMask/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss/SequenceMask/Less"
  op: "Less"
  input: "loss/SequenceMask/Range"
  input: "loss/SequenceMask/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss/SequenceMask/Cast_1"
  op: "Cast"
  input: "loss/SequenceMask/Less"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss/sequence_loss/Shape"
  op: "Shape"
  input: "speller/decoder/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/sequence_loss/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "loss/sequence_loss/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "loss/sequence_loss/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/sequence_loss/strided_slice"
  op: "StridedSlice"
  input: "loss/sequence_loss/Shape"
  input: "loss/sequence_loss/strided_slice/stack"
  input: "loss/sequence_loss/strided_slice/stack_1"
  input: "loss/sequence_loss/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "loss/sequence_loss/Reshape/shape/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/sequence_loss/Reshape/shape"
  op: "Pack"
  input: "loss/sequence_loss/Reshape/shape/0"
  input: "loss/sequence_loss/strided_slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "loss/sequence_loss/Reshape"
  op: "Reshape"
  input: "speller/decoder/transpose"
  input: "loss/sequence_loss/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss/sequence_loss/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/sequence_loss/Reshape_1"
  op: "Reshape"
  input: "Cast_2"
  input: "loss/sequence_loss/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss/sequence_loss/SparseSoftmaxCrossEntropyWithLogits/Shape"
  op: "Shape"
  input: "loss/sequence_loss/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/sequence_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  op: "SparseSoftmaxCrossEntropyWithLogits"
  input: "loss/sequence_loss/Reshape"
  input: "loss/sequence_loss/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlabels"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss/sequence_loss/Reshape_2/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/sequence_loss/Reshape_2"
  op: "Reshape"
  input: "loss/SequenceMask/Cast_1"
  input: "loss/sequence_loss/Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss/sequence_loss/mul"
  op: "Mul"
  input: "loss/sequence_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  input: "loss/sequence_loss/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss/sequence_loss/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/sequence_loss/Sum"
  op: "Sum"
  input: "loss/sequence_loss/mul"
  input: "loss/sequence_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/sequence_loss/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "loss/sequence_loss/Sum_1"
  op: "Sum"
  input: "loss/SequenceMask/Cast_1"
  input: "loss/sequence_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/sequence_loss/div_no_nan"
  op: "DivNoNan"
  input: "loss/sequence_loss/Sum"
  input: "loss/sequence_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/mul"
  op: "Mul"
  input: "loss/mul/x"
  input: "loss/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss/add_2"
  op: "Add"
  input: "loss/sequence_loss/div_no_nan"
  input: "loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/ExponentialDecay/initial_learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "train/ExponentialDecay/Cast/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4000
      }
    }
  }
}
node {
  name: "train/ExponentialDecay/Cast"
  op: "Cast"
  input: "train/ExponentialDecay/Cast/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/ExponentialDecay/Cast_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9800000190734863
      }
    }
  }
}
node {
  name: "train/ExponentialDecay/Cast_2"
  op: "Cast"
  input: "global_step/read"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/ExponentialDecay/truediv"
  op: "RealDiv"
  input: "train/ExponentialDecay/Cast_2"
  input: "train/ExponentialDecay/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/ExponentialDecay/Floor"
  op: "Floor"
  input: "train/ExponentialDecay/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/ExponentialDecay/Pow"
  op: "Pow"
  input: "train/ExponentialDecay/Cast_1/x"
  input: "train/ExponentialDecay/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/ExponentialDecay"
  op: "Mul"
  input: "train/ExponentialDecay/initial_learning_rate"
  input: "train/ExponentialDecay/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/tuple/group_deps"
  op: "NoOp"
  input: "^dense_layer_1/dense_layer_1_0_batch_norm/AssignMovingAvg"
  input: "^dense_layer_1/dense_layer_1_0_batch_norm/AssignMovingAvg_1"
  input: "^dense_layer_1/dense_layer_1_1_batch_norm/AssignMovingAvg"
  input: "^dense_layer_1/dense_layer_1_1_batch_norm/AssignMovingAvg_1"
  input: "^loss/add_2"
}
node {
  name: "train/tuple/control_dependency"
  op: "Identity"
  input: "loss/add_2"
  input: "^train/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/add_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "train/gradients/Fill"
  op: "Fill"
  input: "train/gradients/Shape"
  input: "train/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/f_count"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train/gradients/f_count_1"
  op: "Enter"
  input: "train/gradients/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/Merge"
  op: "Merge"
  input: "train/gradients/f_count_1"
  input: "train/gradients/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/Switch"
  op: "Switch"
  input: "train/gradients/Merge"
  input: "speller/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/Add/y"
  op: "Const"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train/gradients/Add"
  op: "Add"
  input: "train/gradients/Switch:1"
  input: "train/gradients/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/NextIteration"
  op: "NextIteration"
  input: "train/gradients/Add"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/ExpandDims_grad/Reshape/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/MatMul_1/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice_1/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/Select/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/zeros_like/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Softmax_grad/mul/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Squeeze_grad/Reshape/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Mul/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Mul_1/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Mul/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Mul_1/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Mul/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Mul_1/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Mul/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Mul_1/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/Mul/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/ShapeN/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/ShapeN/StackPushV2_1"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Mul/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Mul_1/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Mul/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Mul_1/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Mul/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Mul_1/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/ShapeN/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/ShapeN/StackPushV2_1"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/ExpandDims_grad/Reshape/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/MatMul_1/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice_1/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/Squeeze_grad/Reshape/StackPushV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul_grad/MatMul_1/StackPushV2"
  input: "^train/gradients/speller/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/f_count_2"
  op: "Exit"
  input: "train/gradients/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/b_count"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train/gradients/b_count_1"
  op: "Enter"
  input: "train/gradients/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/Merge_1"
  op: "Merge"
  input: "train/gradients/b_count_1"
  input: "train/gradients/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "train/gradients/Merge_1"
  input: "train/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "train/gradients/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/b_count_2"
  op: "LoopCond"
  input: "train/gradients/GreaterEqual"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/Switch_1"
  op: "Switch"
  input: "train/gradients/Merge_1"
  input: "train/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/Sub"
  op: "Sub"
  input: "train/gradients/Switch_1:1"
  input: "train/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/NextIteration_1"
  op: "NextIteration"
  input: "train/gradients/Sub"
  input: "^train/gradients/speller/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/b_count_3"
  op: "Exit"
  input: "train/gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/f_count_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train/gradients/f_count_4"
  op: "Enter"
  input: "train/gradients/f_count_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/Merge_2"
  op: "Merge"
  input: "train/gradients/f_count_4"
  input: "train/gradients/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/Switch_2"
  op: "Switch"
  input: "train/gradients/Merge_2"
  input: "listener/listener_0/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/Add_1/y"
  op: "Const"
  input: "^listener/listener_0/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train/gradients/Add_1"
  op: "Add"
  input: "train/gradients/Switch_2:1"
  input: "train/gradients/Add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/NextIteration_2"
  op: "NextIteration"
  input: "train/gradients/Add_1"
  input: "^train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/Select/StackPushV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/zeros_like/StackPushV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/Select_2_grad/zeros_like/StackPushV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Mul/StackPushV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Mul_1/StackPushV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Mul/StackPushV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Mul_1/StackPushV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Mul/StackPushV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Mul_1/StackPushV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Mul/StackPushV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Mul_1/StackPushV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Mul/StackPushV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Mul_1/StackPushV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/Mul/StackPushV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/ShapeN/StackPushV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPushV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPushV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPushV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPushV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/f_count_5"
  op: "Exit"
  input: "train/gradients/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/b_count_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train/gradients/b_count_5"
  op: "Enter"
  input: "train/gradients/f_count_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/Merge_3"
  op: "Merge"
  input: "train/gradients/b_count_5"
  input: "train/gradients/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/GreaterEqual_1"
  op: "GreaterEqual"
  input: "train/gradients/Merge_3"
  input: "train/gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/GreaterEqual_1/Enter"
  op: "Enter"
  input: "train/gradients/b_count_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/b_count_6"
  op: "LoopCond"
  input: "train/gradients/GreaterEqual_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/Switch_3"
  op: "Switch"
  input: "train/gradients/Merge_3"
  input: "train/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/Sub_1"
  op: "Sub"
  input: "train/gradients/Switch_3:1"
  input: "train/gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/NextIteration_3"
  op: "NextIteration"
  input: "train/gradients/Sub_1"
  input: "^train/gradients/listener/listener_0/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/b_count_7"
  op: "Exit"
  input: "train/gradients/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/f_count_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train/gradients/f_count_7"
  op: "Enter"
  input: "train/gradients/f_count_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/Merge_4"
  op: "Merge"
  input: "train/gradients/f_count_7"
  input: "train/gradients/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/Switch_4"
  op: "Switch"
  input: "train/gradients/Merge_4"
  input: "listener/listener_0/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/Add_2/y"
  op: "Const"
  input: "^listener/listener_0/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train/gradients/Add_2"
  op: "Add"
  input: "train/gradients/Switch_4:1"
  input: "train/gradients/Add_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/NextIteration_4"
  op: "NextIteration"
  input: "train/gradients/Add_2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/Select/StackPushV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/zeros_like/StackPushV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/Select_2_grad/zeros_like/StackPushV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Mul/StackPushV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Mul_1/StackPushV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Mul/StackPushV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Mul_1/StackPushV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Mul/StackPushV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Mul_1/StackPushV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Mul/StackPushV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Mul_1/StackPushV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Mul/StackPushV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Mul_1/StackPushV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/Mul/StackPushV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/ShapeN/StackPushV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPushV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPushV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPushV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPushV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/f_count_8"
  op: "Exit"
  input: "train/gradients/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/b_count_8"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train/gradients/b_count_9"
  op: "Enter"
  input: "train/gradients/f_count_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/Merge_5"
  op: "Merge"
  input: "train/gradients/b_count_9"
  input: "train/gradients/NextIteration_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/GreaterEqual_2"
  op: "GreaterEqual"
  input: "train/gradients/Merge_5"
  input: "train/gradients/GreaterEqual_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/GreaterEqual_2/Enter"
  op: "Enter"
  input: "train/gradients/b_count_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/b_count_10"
  op: "LoopCond"
  input: "train/gradients/GreaterEqual_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/Switch_5"
  op: "Switch"
  input: "train/gradients/Merge_5"
  input: "train/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/Sub_2"
  op: "Sub"
  input: "train/gradients/Switch_5:1"
  input: "train/gradients/GreaterEqual_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/NextIteration_5"
  op: "NextIteration"
  input: "train/gradients/Sub_2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/b_count_11"
  op: "Exit"
  input: "train/gradients/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/loss/add_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/Fill"
}
node {
  name: "train/gradients/loss/add_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/Fill"
  input: "^train/gradients/loss/add_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/Fill"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/loss/add_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/Fill"
  input: "^train/gradients/loss/add_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/Fill"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/loss/sequence_loss/div_no_nan_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/loss/sequence_loss/div_no_nan_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/loss/sequence_loss/div_no_nan_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/loss/sequence_loss/div_no_nan_grad/Shape"
  input: "train/gradients/loss/sequence_loss/div_no_nan_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/loss/sequence_loss/div_no_nan_grad/div_no_nan"
  op: "DivNoNan"
  input: "train/gradients/loss/add_2_grad/tuple/control_dependency"
  input: "loss/sequence_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/loss/sequence_loss/div_no_nan_grad/Sum"
  op: "Sum"
  input: "train/gradients/loss/sequence_loss/div_no_nan_grad/div_no_nan"
  input: "train/gradients/loss/sequence_loss/div_no_nan_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/loss/sequence_loss/div_no_nan_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/loss/sequence_loss/div_no_nan_grad/Sum"
  input: "train/gradients/loss/sequence_loss/div_no_nan_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/loss/sequence_loss/div_no_nan_grad/Neg"
  op: "Neg"
  input: "loss/sequence_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/loss/sequence_loss/div_no_nan_grad/div_no_nan_1"
  op: "DivNoNan"
  input: "train/gradients/loss/sequence_loss/div_no_nan_grad/Neg"
  input: "loss/sequence_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/loss/sequence_loss/div_no_nan_grad/div_no_nan_2"
  op: "DivNoNan"
  input: "train/gradients/loss/sequence_loss/div_no_nan_grad/div_no_nan_1"
  input: "loss/sequence_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/loss/sequence_loss/div_no_nan_grad/mul"
  op: "Mul"
  input: "train/gradients/loss/add_2_grad/tuple/control_dependency"
  input: "train/gradients/loss/sequence_loss/div_no_nan_grad/div_no_nan_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/loss/sequence_loss/div_no_nan_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/loss/sequence_loss/div_no_nan_grad/mul"
  input: "train/gradients/loss/sequence_loss/div_no_nan_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/loss/sequence_loss/div_no_nan_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/loss/sequence_loss/div_no_nan_grad/Sum_1"
  input: "train/gradients/loss/sequence_loss/div_no_nan_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/loss/sequence_loss/div_no_nan_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/loss/sequence_loss/div_no_nan_grad/Reshape"
  input: "^train/gradients/loss/sequence_loss/div_no_nan_grad/Reshape_1"
}
node {
  name: "train/gradients/loss/sequence_loss/div_no_nan_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/loss/sequence_loss/div_no_nan_grad/Reshape"
  input: "^train/gradients/loss/sequence_loss/div_no_nan_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/loss/sequence_loss/div_no_nan_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/loss/sequence_loss/div_no_nan_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/loss/sequence_loss/div_no_nan_grad/Reshape_1"
  input: "^train/gradients/loss/sequence_loss/div_no_nan_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/loss/sequence_loss/div_no_nan_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/loss/mul_grad/Mul"
  op: "Mul"
  input: "train/gradients/loss/add_2_grad/tuple/control_dependency_1"
  input: "loss/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/loss/mul_grad/Mul_1"
  op: "Mul"
  input: "train/gradients/loss/add_2_grad/tuple/control_dependency_1"
  input: "loss/mul/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/loss/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/loss/mul_grad/Mul"
  input: "^train/gradients/loss/mul_grad/Mul_1"
}
node {
  name: "train/gradients/loss/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/loss/mul_grad/Mul"
  input: "^train/gradients/loss/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/loss/mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/loss/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/loss/mul_grad/Mul_1"
  input: "^train/gradients/loss/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/loss/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/loss/sequence_loss/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train/gradients/loss/sequence_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/loss/sequence_loss/div_no_nan_grad/tuple/control_dependency"
  input: "train/gradients/loss/sequence_loss/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/loss/sequence_loss/Sum_grad/Shape"
  op: "Shape"
  input: "loss/sequence_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/loss/sequence_loss/Sum_grad/Tile"
  op: "Tile"
  input: "train/gradients/loss/sequence_loss/Sum_grad/Reshape"
  input: "train/gradients/loss/sequence_loss/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/loss/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/loss/mul_grad/tuple/control_dependency_1"
}
node {
  name: "train/gradients/loss/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/loss/mul_grad/tuple/control_dependency_1"
  input: "^train/gradients/loss/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/loss/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/loss/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/loss/mul_grad/tuple/control_dependency_1"
  input: "^train/gradients/loss/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/loss/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/loss/sequence_loss/mul_grad/Shape"
  op: "Shape"
  input: "loss/sequence_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/loss/sequence_loss/mul_grad/Shape_1"
  op: "Shape"
  input: "loss/sequence_loss/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/loss/sequence_loss/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/loss/sequence_loss/mul_grad/Shape"
  input: "train/gradients/loss/sequence_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/loss/sequence_loss/mul_grad/Mul"
  op: "Mul"
  input: "train/gradients/loss/sequence_loss/Sum_grad/Tile"
  input: "loss/sequence_loss/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/loss/sequence_loss/mul_grad/Sum"
  op: "Sum"
  input: "train/gradients/loss/sequence_loss/mul_grad/Mul"
  input: "train/gradients/loss/sequence_loss/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/loss/sequence_loss/mul_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/loss/sequence_loss/mul_grad/Sum"
  input: "train/gradients/loss/sequence_loss/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/loss/sequence_loss/mul_grad/Mul_1"
  op: "Mul"
  input: "loss/sequence_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  input: "train/gradients/loss/sequence_loss/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/loss/sequence_loss/mul_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/loss/sequence_loss/mul_grad/Mul_1"
  input: "train/gradients/loss/sequence_loss/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/loss/sequence_loss/mul_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/loss/sequence_loss/mul_grad/Sum_1"
  input: "train/gradients/loss/sequence_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/loss/sequence_loss/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/loss/sequence_loss/mul_grad/Reshape"
  input: "^train/gradients/loss/sequence_loss/mul_grad/Reshape_1"
}
node {
  name: "train/gradients/loss/sequence_loss/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/loss/sequence_loss/mul_grad/Reshape"
  input: "^train/gradients/loss/sequence_loss/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/loss/sequence_loss/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/loss/sequence_loss/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/loss/sequence_loss/mul_grad/Reshape_1"
  input: "^train/gradients/loss/sequence_loss/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/loss/sequence_loss/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/loss/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/loss/add_1_grad/tuple/control_dependency"
}
node {
  name: "train/gradients/loss/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/loss/add_1_grad/tuple/control_dependency"
  input: "^train/gradients/loss/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/loss/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/loss/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/loss/add_1_grad/tuple/control_dependency"
  input: "^train/gradients/loss/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/loss/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/loss/L2Loss_1_grad/mul"
  op: "Mul"
  input: "dense_layer_1_1/kernel/read"
  input: "train/gradients/loss/add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/zeros_like"
  op: "ZerosLike"
  input: "loss/sequence_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/loss/sequence_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/PreventGradient"
  op: "PreventGradient"
  input: "loss/sequence_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "message"
    value {
      s: "Currently there is no way to take the second derivative of sparse_softmax_cross_entropy_with_logits due to the fused implementation\'s interaction with tf.gradients()"
    }
  }
}
node {
  name: "train/gradients/loss/sequence_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/loss/sequence_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims"
  op: "ExpandDims"
  input: "train/gradients/loss/sequence_loss/mul_grad/tuple/control_dependency"
  input: "train/gradients/loss/sequence_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/loss/sequence_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/mul"
  op: "Mul"
  input: "train/gradients/loss/sequence_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims"
  input: "train/gradients/loss/sequence_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/PreventGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/loss/L2Loss_grad/mul"
  op: "Mul"
  input: "dense_layer_1_0/kernel/read"
  input: "train/gradients/loss/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 494
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/loss/sequence_loss/Reshape_grad/Shape"
  op: "Shape"
  input: "speller/decoder/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/loss/sequence_loss/Reshape_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/loss/sequence_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/mul"
  input: "train/gradients/loss/sequence_loss/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "speller/decoder/concat_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/transpose_grad/transpose"
  op: "Transpose"
  input: "train/gradients/loss/sequence_loss/Reshape_grad/Reshape"
  input: "train/gradients/speller/decoder/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "speller/decoder/TensorArray"
  input: "speller/decoder/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train/gradients"
    }
  }
}
node {
  name: "train/gradients/speller/decoder/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "speller/decoder/while/Exit_1"
  input: "^train/gradients/speller/decoder/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "train/gradients/speller/decoder/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "speller/decoder/TensorArrayStack/range"
  input: "train/gradients/speller/decoder/transpose_grad/transpose"
  input: "train/gradients/speller/decoder/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/zeros"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train/gradients/zeros_like_1"
  op: "ZerosLike"
  input: "speller/decoder/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/zeros_like_2"
  op: "ZerosLike"
  input: "speller/decoder/while/Exit_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/zeros_like_3"
  op: "ZerosLike"
  input: "speller/decoder/while/Exit_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/zeros_like_4"
  op: "ZerosLike"
  input: "speller/decoder/while/Exit_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/zeros_like_5"
  op: "ZerosLike"
  input: "speller/decoder/while/Exit_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/zeros_like_6"
  op: "ZerosLike"
  input: "speller/decoder/while/Exit_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "train/gradients/speller/decoder/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "train/gradients/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "train/gradients/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "train/gradients/zeros_like_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/Exit_5_grad/b_exit"
  op: "Enter"
  input: "train/gradients/zeros_like_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/Exit_7_grad/b_exit"
  op: "Enter"
  input: "train/gradients/zeros_like_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/Exit_8_grad/b_exit"
  op: "Enter"
  input: "train/gradients/zeros_like_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/Exit_9_grad/b_exit"
  op: "Enter"
  input: "train/gradients/zeros_like_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "train/gradients/speller/decoder/while/Exit_1_grad/b_exit"
  input: "train/gradients/speller/decoder/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "train/gradients/speller/decoder/while/Exit_3_grad/b_exit"
  input: "train/gradients/speller/decoder/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "train/gradients/speller/decoder/while/Exit_4_grad/b_exit"
  input: "train/gradients/speller/decoder/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/Switch_5_grad/b_switch"
  op: "Merge"
  input: "train/gradients/speller/decoder/while/Exit_5_grad/b_exit"
  input: "train/gradients/speller/decoder/while/Switch_5_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "train/gradients/speller/decoder/while/Switch_1_grad/b_switch"
  input: "train/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/Merge_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/speller/decoder/while/Merge_1_grad/Switch"
}
node {
  name: "train/gradients/speller/decoder/while/Merge_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/Merge_1_grad/Switch"
  input: "^train/gradients/speller/decoder/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/Merge_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/Merge_1_grad/Switch:1"
  input: "^train/gradients/speller/decoder/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "train/gradients/speller/decoder/while/Switch_3_grad/b_switch"
  input: "train/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/speller/decoder/while/Merge_3_grad/Switch"
}
node {
  name: "train/gradients/speller/decoder/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/Merge_3_grad/Switch"
  input: "^train/gradients/speller/decoder/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/Merge_3_grad/Switch:1"
  input: "^train/gradients/speller/decoder/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "train/gradients/speller/decoder/while/Switch_4_grad/b_switch"
  input: "train/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/Merge_4_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/speller/decoder/while/Merge_4_grad/Switch"
}
node {
  name: "train/gradients/speller/decoder/while/Merge_4_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/Merge_4_grad/Switch"
  input: "^train/gradients/speller/decoder/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/Merge_4_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/Merge_4_grad/Switch:1"
  input: "^train/gradients/speller/decoder/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/Merge_5_grad/Switch"
  op: "Switch"
  input: "train/gradients/speller/decoder/while/Switch_5_grad/b_switch"
  input: "train/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/Switch_5_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/Merge_5_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/speller/decoder/while/Merge_5_grad/Switch"
}
node {
  name: "train/gradients/speller/decoder/while/Merge_5_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/Merge_5_grad/Switch"
  input: "^train/gradients/speller/decoder/while/Merge_5_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/Switch_5_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/Merge_5_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/Merge_5_grad/Switch:1"
  input: "^train/gradients/speller/decoder/while/Merge_5_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/Switch_5_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "train/gradients/speller/decoder/while/Merge_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "train/gradients/speller/decoder/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "train/gradients/speller/decoder/while/Merge_4_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/Enter_5_grad/Exit"
  op: "Exit"
  input: "train/gradients/speller/decoder/while/Merge_5_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "train/gradients/speller/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "train/gradients/speller/decoder/while/Merge_1_grad/tuple/control_dependency_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/projection_layer/BiasAdd"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train/gradients"
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "speller/decoder/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/projection_layer/BiasAdd"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^train/gradients/speller/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/projection_layer/BiasAdd"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "train/gradients/speller/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "train/gradients/speller/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "train/gradients/speller/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "speller/decoder/while/Identity"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/ExpandDims_grad/Reshape/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/MatMul_1/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice_1/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/Select/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/zeros_like/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Softmax_grad/mul/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Squeeze_grad/Reshape/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Mul/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Mul_1/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Mul/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Mul_1/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Mul/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Mul_1/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Mul/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Mul_1/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/Mul/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/ShapeN/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/ShapeN/StackPopV2_1"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Mul/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Mul/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Mul/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Mul_1/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/ShapeN/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/ShapeN/StackPopV2_1"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/ExpandDims_grad/Reshape/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/MatMul_1/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice_1/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/Squeeze_grad/Reshape/StackPopV2"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul_grad/MatMul_1/StackPopV2"
  input: "^train/gradients/speller/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
}
node {
  name: "train/gradients/speller/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/speller/decoder/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^train/gradients/speller/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
}
node {
  name: "train/gradients/speller/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "^train/gradients/speller/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^train/gradients/speller/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Shape"
  op: "Shape"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Shape_1"
  op: "Shape"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Shape"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/BroadcastGradientArgs/Enter_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Shape_1"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Mul"
  op: "Mul"
  input: "train/gradients/speller/decoder/while/Merge_4_grad/tuple/control_dependency_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Mul/Enter"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/Cast"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Sum"
  op: "Sum"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Mul"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Sum"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Mul_1"
  op: "Mul"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Mul_1/StackPopV2"
  input: "train/gradients/speller/decoder/while/Merge_4_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Mul_1/Enter"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Mul_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Sum_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Reshape"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Reshape_1"
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Reshape"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Reshape_1"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "train/gradients/speller/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/BiasAdd_grad/BiasAddGrad"
  input: "^train/gradients/speller/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/BiasAdd_grad/BiasAddGrad"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Shape"
  op: "Shape"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Shape_1"
  op: "Const"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Shape"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Mul"
  op: "Mul"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/tuple/control_dependency"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Mul/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Mul/Enter"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/truediv"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Mul/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Sum"
  op: "Sum"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Mul"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Sum"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Mul_1"
  op: "Mul"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Mul_1/StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Mul_1/Enter"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Mul_1/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Mul_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Sum_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Reshape"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Reshape_1"
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Reshape"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Reshape_1"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul_grad/MatMul"
  op: "MatMul"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/BiasAdd_grad/tuple/control_dependency"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "speller/decoder/projection_layer/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul_grad/MatMul_1/StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul_grad/MatMul_1/Enter"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_1"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul_grad/MatMul"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul_grad/MatMul_1"
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul_grad/MatMul"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul_grad/MatMul_1"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/BiasAdd/Enter_grad/b_acc_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/BiasAdd/Enter_grad/b_acc_2"
  input: "train/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/BiasAdd/Enter_grad/Switch:1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "train/gradients/speller/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/AddN"
  op: "AddN"
  input: "train/gradients/speller/decoder/while/Merge_5_grad/tuple/control_dependency_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/Switch_5_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2048
          }
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul/Enter_grad/b_acc_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 30
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul/Enter_grad/b_acc_2"
  input: "train/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 30
          }
        }
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul/Enter_grad/Add"
  op: "Add"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul/Enter_grad/Switch:1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Squeeze_grad/Shape"
  op: "Shape"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/AddN"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Squeeze_grad/Reshape/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Squeeze_grad/Reshape/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Squeeze_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Squeeze_grad/Reshape/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Squeeze_grad/Reshape/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Squeeze_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Squeeze_grad/Reshape/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Squeeze_grad/Reshape/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Squeeze_grad/Reshape/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Squeeze_grad/Reshape/Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Squeeze_grad/Shape"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Squeeze_grad/Reshape/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Squeeze_grad/Reshape/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Squeeze_grad/Reshape/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Squeeze_grad/Reshape/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/MatMul"
  op: "BatchMatMulV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Squeeze_grad/Reshape"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: true
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "attention/LuongAttention/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/MatMul_1"
  op: "BatchMatMulV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/MatMul_1/StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "adj_x"
    value {
      b: true
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/ExpandDims"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/ExpandDims"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/MatMul_1/Enter"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/ExpandDims"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/Shape"
  op: "Shape"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/Shape_1"
  op: "Shape"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul/Enter"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice/stack"
  op: "Const"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice/stack_1"
  op: "Const"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice/stack_2"
  op: "Const"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice"
  op: "StridedSlice"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice/StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice/stack"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice/stack_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice/Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/Shape"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice_1/stack"
  op: "Const"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice_1/stack_1"
  op: "Const"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice_1/stack_2"
  op: "Const"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice_1"
  op: "StridedSlice"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice_1/StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice_1/stack"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice_1/stack_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice_1/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice_1/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice_1/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice_1/Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/Shape_1"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice_1/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice_1/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice_1/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/Sum"
  op: "Sum"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/MatMul"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/Sum"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/MatMul_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/Sum_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/strided_slice_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/Reshape"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/Reshape_1"
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/Reshape"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/Reshape_1"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/ExpandDims_grad/Shape"
  op: "Shape"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/tuple/control_dependency"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/ExpandDims_grad/Reshape/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/ExpandDims_grad/Reshape/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/ExpandDims_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/ExpandDims_grad/Reshape/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/ExpandDims_grad/Reshape/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/ExpandDims_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/ExpandDims_grad/Reshape/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/ExpandDims_grad/Reshape/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/ExpandDims_grad/Reshape/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/ExpandDims_grad/Reshape/Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/ExpandDims_grad/Shape"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/ExpandDims_grad/Reshape/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/ExpandDims_grad/Reshape/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/ExpandDims_grad/Reshape/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/ExpandDims_grad/Reshape/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul/Enter_grad/Shape"
  op: "Shape"
  input: "attention/LuongAttention/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul/Enter_grad/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul/Enter_grad/zeros"
  op: "Fill"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul/Enter_grad/Shape"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul/Enter_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul/Enter_grad/b_acc"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul/Enter_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul/Enter_grad/b_acc_1"
  op: "Merge"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul/Enter_grad/b_acc"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul/Enter_grad/b_acc_1"
  input: "train/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul/Enter_grad/Add"
  op: "Add"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul/Enter_grad/Switch:1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul/Enter_grad/b_acc_2"
  op: "Exit"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Softmax_grad/mul"
  op: "Mul"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/ExpandDims_grad/Reshape"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Softmax_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Softmax_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Softmax"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Softmax_grad/mul/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Softmax_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Softmax"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Softmax_grad/mul/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Softmax_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Softmax_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Softmax_grad/mul/Enter"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Softmax"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Softmax_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Softmax_grad/mul/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Softmax_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Softmax_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Softmax_grad/Sum/reduction_indices"
  op: "Const"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Softmax_grad/Sum"
  op: "Sum"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Softmax_grad/mul"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Softmax_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Softmax_grad/sub"
  op: "Sub"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/ExpandDims_grad/Reshape"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Softmax_grad/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Softmax_grad/mul_1"
  op: "Mul"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Softmax_grad/sub"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Softmax_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/zeros_like"
  op: "ZerosLike"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/zeros_like/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/Squeeze"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/zeros_like/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/zeros_like/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/Squeeze"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/zeros_like/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/zeros_like/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/zeros_like/Enter"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/Squeeze"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/zeros_like/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/zeros_like/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/zeros_like/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/Select"
  op: "Select"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/Select/StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Softmax_grad/mul_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/Select/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/SequenceMask/Less"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/Select/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/Select/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/SequenceMask/Less"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/Select/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/Select/Enter"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/SequenceMask/Less"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/Select/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/Select_1"
  op: "Select"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/Select/StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/zeros_like"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Softmax_grad/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/Select"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/Select_1"
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/Select"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/Select_1"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/Squeeze_grad/Shape"
  op: "Shape"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/Select_grad/tuple/control_dependency"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/Squeeze_grad/Reshape/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/Squeeze_grad/Reshape/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/Squeeze_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/Squeeze_grad/Reshape/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/Squeeze_grad/Reshape/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/Squeeze_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/Squeeze_grad/Reshape/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/Squeeze_grad/Reshape/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/Squeeze_grad/Reshape/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/Squeeze_grad/Reshape/Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/Squeeze_grad/Shape"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/Squeeze_grad/Reshape/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/Squeeze_grad/Reshape/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/Squeeze_grad/Reshape/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/Squeeze_grad/Reshape/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/MatMul"
  op: "BatchMatMulV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/Squeeze_grad/Reshape"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "attention/LuongAttention/memory_layer/Tensordot"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/MatMul_1"
  op: "BatchMatMulV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/Squeeze_grad/Reshape"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/MatMul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "adj_x"
    value {
      b: true
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/ExpandDims"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/ExpandDims"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/MatMul_1/Enter"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/ExpandDims"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/Shape"
  op: "Shape"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/Shape_1"
  op: "Shape"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul/Enter"
  input: "^speller/decoder/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice/stack"
  op: "Const"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice/stack_1"
  op: "Const"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice/stack_2"
  op: "Const"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice"
  op: "StridedSlice"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice/StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice/stack"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice/stack_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice/Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/Shape"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice_1/stack"
  op: "Const"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice_1/stack_1"
  op: "Const"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice_1/stack_2"
  op: "Const"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice_1"
  op: "StridedSlice"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice_1/StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice_1/stack"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice_1/stack_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice_1/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice_1/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice_1/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice_1/Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/Shape_1"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice_1/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice_1/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice_1/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/Sum"
  op: "Sum"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/MatMul"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/Sum"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/MatMul_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/Sum_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/strided_slice_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/Reshape"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/Reshape_1"
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/Reshape"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/Reshape_1"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/ExpandDims_grad/Shape"
  op: "Shape"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/checked_cell_output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/tuple/control_dependency"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/ExpandDims_grad/Reshape/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/ExpandDims_grad/Reshape/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/ExpandDims_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/ExpandDims_grad/Reshape/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/ExpandDims_grad/Reshape/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/ExpandDims_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/ExpandDims_grad/Reshape/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/ExpandDims_grad/Reshape/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/ExpandDims_grad/Reshape/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/ExpandDims_grad/Reshape/Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/ExpandDims_grad/Shape"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/ExpandDims_grad/Reshape/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/ExpandDims_grad/Reshape/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/ExpandDims_grad/Reshape/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/ExpandDims_grad/Reshape/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul/Enter_grad/Shape"
  op: "Shape"
  input: "attention/LuongAttention/memory_layer/Tensordot"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul/Enter_grad/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul/Enter_grad/zeros"
  op: "Fill"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul/Enter_grad/Shape"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul/Enter_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul/Enter_grad/b_acc"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul/Enter_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul/Enter_grad/b_acc_1"
  op: "Merge"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul/Enter_grad/b_acc"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul/Enter_grad/b_acc_1"
  input: "train/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul/Enter_grad/Add"
  op: "Add"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul/Enter_grad/Switch:1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul/Enter_grad/b_acc_2"
  op: "Exit"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/attention/LuongAttention/memory_layer/Tensordot_grad/Shape"
  op: "Shape"
  input: "attention/LuongAttention/memory_layer/Tensordot/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/attention/LuongAttention/memory_layer/Tensordot_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/MatMul/Enter_grad/b_acc_2"
  input: "train/gradients/attention/LuongAttention/memory_layer/Tensordot_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Shape"
  op: "Shape"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Shape_1"
  op: "Shape"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Shape"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/BroadcastGradientArgs/Enter_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Shape_1"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Mul"
  op: "Mul"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/ExpandDims_grad/Reshape"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Mul/Enter"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/Cast"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Sum"
  op: "Sum"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Mul"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Sum"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Mul_1"
  op: "Mul"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Mul_1/StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/luong_attention/ExpandDims_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Mul_1/Enter"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Mul_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Sum_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Reshape"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Reshape_1"
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Reshape"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Reshape_1"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/attention/LuongAttention/memory_layer/Tensordot/MatMul_grad/MatMul"
  op: "MatMul"
  input: "train/gradients/attention/LuongAttention/memory_layer/Tensordot_grad/Reshape"
  input: "attention/LuongAttention/memory_layer/Tensordot/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "train/gradients/attention/LuongAttention/memory_layer/Tensordot/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "attention/LuongAttention/memory_layer/Tensordot/Reshape"
  input: "train/gradients/attention/LuongAttention/memory_layer/Tensordot_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/attention/LuongAttention/memory_layer/Tensordot/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/attention/LuongAttention/memory_layer/Tensordot/MatMul_grad/MatMul"
  input: "^train/gradients/attention/LuongAttention/memory_layer/Tensordot/MatMul_grad/MatMul_1"
}
node {
  name: "train/gradients/attention/LuongAttention/memory_layer/Tensordot/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/attention/LuongAttention/memory_layer/Tensordot/MatMul_grad/MatMul"
  input: "^train/gradients/attention/LuongAttention/memory_layer/Tensordot/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/attention/LuongAttention/memory_layer/Tensordot/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/attention/LuongAttention/memory_layer/Tensordot/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/attention/LuongAttention/memory_layer/Tensordot/MatMul_grad/MatMul_1"
  input: "^train/gradients/attention/LuongAttention/memory_layer/Tensordot/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/attention/LuongAttention/memory_layer/Tensordot/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/Shape"
  op: "Shape"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/Shape_1"
  op: "Const"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/Shape"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/Mul"
  op: "Mul"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/tuple/control_dependency"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/Mul/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/Mul/Enter"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/truediv"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/Mul/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/Sum"
  op: "Sum"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/Mul"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/Sum"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/Mul_1"
  op: "Mul"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Mul_1/StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/Mul_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/Sum_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/Reshape"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/Reshape_1"
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/Reshape"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/Reshape_1"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/attention/LuongAttention/memory_layer/Tensordot/Reshape_grad/Shape"
  op: "Shape"
  input: "attention/LuongAttention/memory_layer/Tensordot/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/attention/LuongAttention/memory_layer/Tensordot/Reshape_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/attention/LuongAttention/memory_layer/Tensordot/MatMul_grad/tuple/control_dependency"
  input: "train/gradients/attention/LuongAttention/memory_layer/Tensordot/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/attention/LuongAttention/memory_layer/Tensordot/Reshape_1_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\010\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "train/gradients/attention/LuongAttention/memory_layer/Tensordot/Reshape_1_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/attention/LuongAttention/memory_layer/Tensordot/MatMul_grad/tuple/control_dependency_1"
  input: "train/gradients/attention/LuongAttention/memory_layer/Tensordot/Reshape_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/AddN_1"
  op: "AddN"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/tuple/control_dependency"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_2/mul_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout_1/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Shape"
  op: "Shape"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Shape_1"
  op: "Shape"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Shape"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Shape_1"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Mul"
  op: "Mul"
  input: "train/gradients/AddN_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Mul/Enter"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/Tanh_1"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Mul/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Sum"
  op: "Sum"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Mul"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Sum"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Mul_1"
  op: "Mul"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  input: "train/gradients/AddN_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Mul_1/Enter"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/Sigmoid_2"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Mul_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Sum_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Reshape"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Reshape_1"
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Reshape"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Reshape_1"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/attention/LuongAttention/memory_layer/Tensordot/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "attention/LuongAttention/memory_layer/Tensordot/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/attention/LuongAttention/memory_layer/Tensordot/transpose_grad/transpose"
  op: "Transpose"
  input: "train/gradients/attention/LuongAttention/memory_layer/Tensordot/Reshape_grad/Reshape"
  input: "train/gradients/attention/LuongAttention/memory_layer/Tensordot/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/attention/LuongAttention/memory_layer/Tensordot/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "attention/LuongAttention/memory_layer/Tensordot/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/attention/LuongAttention/memory_layer/Tensordot/transpose_1_grad/transpose"
  op: "Transpose"
  input: "train/gradients/attention/LuongAttention/memory_layer/Tensordot/Reshape_1_grad/Reshape"
  input: "train/gradients/attention/LuongAttention/memory_layer/Tensordot/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/Mul/StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/AddN_2"
  op: "AddN"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul/Enter_grad/b_acc_2"
  input: "train/gradients/attention/LuongAttention/memory_layer/Tensordot/transpose_grad/transpose"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/MatMul/Enter_grad/b_acc_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/attention/LuongAttention/mul_grad/Shape"
  op: "Shape"
  input: "listener/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/attention/LuongAttention/mul_grad/Shape_1"
  op: "Shape"
  input: "attention/LuongAttention/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/attention/LuongAttention/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/attention/LuongAttention/mul_grad/Shape"
  input: "train/gradients/attention/LuongAttention/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/attention/LuongAttention/mul_grad/Mul"
  op: "Mul"
  input: "train/gradients/AddN_2"
  input: "attention/LuongAttention/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/attention/LuongAttention/mul_grad/Sum"
  op: "Sum"
  input: "train/gradients/attention/LuongAttention/mul_grad/Mul"
  input: "train/gradients/attention/LuongAttention/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/attention/LuongAttention/mul_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/attention/LuongAttention/mul_grad/Sum"
  input: "train/gradients/attention/LuongAttention/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/attention/LuongAttention/mul_grad/Mul_1"
  op: "Mul"
  input: "listener/Reshape"
  input: "train/gradients/AddN_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/attention/LuongAttention/mul_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/attention/LuongAttention/mul_grad/Mul_1"
  input: "train/gradients/attention/LuongAttention/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/attention/LuongAttention/mul_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/attention/LuongAttention/mul_grad/Sum_1"
  input: "train/gradients/attention/LuongAttention/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/attention/LuongAttention/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/attention/LuongAttention/mul_grad/Reshape"
  input: "^train/gradients/attention/LuongAttention/mul_grad/Reshape_1"
}
node {
  name: "train/gradients/attention/LuongAttention/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/attention/LuongAttention/mul_grad/Reshape"
  input: "^train/gradients/attention/LuongAttention/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/attention/LuongAttention/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/attention/LuongAttention/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/attention/LuongAttention/mul_grad/Reshape_1"
  input: "^train/gradients/attention/LuongAttention/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/attention/LuongAttention/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/AddN_3"
  op: "AddN"
  input: "train/gradients/speller/decoder/while/Merge_3_grad/tuple/control_dependency_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/Shape"
  op: "Shape"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/Shape_1"
  op: "Shape"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/Shape"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/Shape_1"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/Sum"
  op: "Sum"
  input: "train/gradients/AddN_3"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/Sum"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/AddN_3"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/Sum_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/Reshape"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/Reshape_1"
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/Reshape"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/Reshape_1"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/Reshape_grad/Shape"
  op: "Shape"
  input: "listener/Pad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/Reshape_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/attention/LuongAttention/mul_grad/tuple/control_dependency"
  input: "train/gradients/listener/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Shape"
  op: "Shape"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Shape_1"
  op: "Shape"
  input: "speller/decoder/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Shape"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/Enter_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Shape_1"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Mul"
  op: "Mul"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/tuple/control_dependency"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Mul/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Mul/Enter"
  input: "speller/decoder/while/Identity_3"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Mul/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Sum"
  op: "Sum"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Mul"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Sum"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Mul_1"
  op: "Mul"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Mul_1/StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Mul_1/Enter"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/Sigmoid"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Mul_1/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Mul_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Sum_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Reshape"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Reshape_1"
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Reshape"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Reshape_1"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Shape"
  op: "Shape"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/Sigmoid_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Shape_1"
  op: "Shape"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Shape"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Shape_1"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Mul"
  op: "Mul"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/tuple/control_dependency_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Mul/Enter"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/Tanh"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Sum"
  op: "Sum"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Mul"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Sum"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Mul_1"
  op: "Mul"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Mul_1/Enter"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/Sigmoid_1"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Mul_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Sum_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Reshape"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Reshape_1"
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Reshape"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Reshape_1"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/Pad_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "train/gradients/listener/Pad_grad/stack/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train/gradients/listener/Pad_grad/stack"
  op: "Pack"
  input: "train/gradients/listener/Pad_grad/Rank"
  input: "train/gradients/listener/Pad_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "train/gradients/listener/Pad_grad/Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "train/gradients/listener/Pad_grad/Slice"
  op: "Slice"
  input: "listener/Pad/paddings"
  input: "train/gradients/listener/Pad_grad/Slice/begin"
  input: "train/gradients/listener/Pad_grad/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/Pad_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/Pad_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/listener/Pad_grad/Slice"
  input: "train/gradients/listener/Pad_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/Pad_grad/Shape"
  op: "Shape"
  input: "listener/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/Pad_grad/Slice_1"
  op: "Slice"
  input: "train/gradients/listener/Reshape_grad/Reshape"
  input: "train/gradients/listener/Pad_grad/Reshape"
  input: "train/gradients/listener/Pad_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/Mul_1/StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/Mul/StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/concat_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "train/gradients/listener/concat_grad/mod"
  op: "FloorMod"
  input: "listener/concat/axis"
  input: "train/gradients/listener/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/concat_grad/Shape"
  op: "Shape"
  input: "listener/listener_0/fw/fw/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/concat_grad/ShapeN"
  op: "ShapeN"
  input: "listener/listener_0/fw/fw/transpose_1"
  input: "listener/ReverseSequence"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "train/gradients/listener/concat_grad/mod"
  input: "train/gradients/listener/concat_grad/ShapeN"
  input: "train/gradients/listener/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/concat_grad/Slice"
  op: "Slice"
  input: "train/gradients/listener/Pad_grad/Slice_1"
  input: "train/gradients/listener/concat_grad/ConcatOffset"
  input: "train/gradients/listener/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/concat_grad/Slice_1"
  op: "Slice"
  input: "train/gradients/listener/Pad_grad/Slice_1"
  input: "train/gradients/listener/concat_grad/ConcatOffset:1"
  input: "train/gradients/listener/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/concat_grad/Slice"
  input: "^train/gradients/listener/concat_grad/Slice_1"
}
node {
  name: "train/gradients/listener/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/concat_grad/Slice"
  input: "^train/gradients/listener/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/concat_grad/Slice_1"
  input: "^train/gradients/listener/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_grad/Shape"
  op: "Shape"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/split:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_grad/Shape_1"
  op: "Const"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_grad/Shape"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_grad/Sum"
  op: "Sum"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_grad/Sum"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_grad/Sum_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_grad/Reshape"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_grad/Reshape_1"
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_grad/Reshape"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_grad/Reshape_1"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "listener/listener_0/fw/fw/concat_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/transpose_1_grad/transpose"
  op: "Transpose"
  input: "train/gradients/listener/concat_grad/tuple/control_dependency"
  input: "train/gradients/listener/listener_0/fw/fw/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/ReverseSequence_grad/ReverseSequence"
  op: "ReverseSequence"
  input: "train/gradients/listener/concat_grad/tuple/control_dependency_1"
  input: "Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/Tanh_grad/TanhGrad"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/add_grad/tuple/control_dependency"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/split_grad/concat/Const"
  op: "Const"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "listener/listener_0/fw/fw/TensorArray"
  input: "listener/listener_0/fw/fw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train/gradients"
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "listener/listener_0/fw/fw/while/Exit_2"
  input: "^train/gradients/listener/listener_0/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "train/gradients/listener/listener_0/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "listener/listener_0/fw/fw/TensorArrayStack/range"
  input: "train/gradients/listener/listener_0/fw/fw/transpose_1_grad/transpose"
  input: "train/gradients/listener/listener_0/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/zeros_like_7"
  op: "ZerosLike"
  input: "listener/listener_0/fw/fw/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/zeros_like_8"
  op: "ZerosLike"
  input: "listener/listener_0/fw/fw/while/Exit_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "listener/listener_0/bw/bw/concat_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/transpose_1_grad/transpose"
  op: "Transpose"
  input: "train/gradients/listener/ReverseSequence_grad/ReverseSequence"
  input: "train/gradients/listener/listener_0/bw/bw/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/split_grad/concat"
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/split_grad/concat"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/split_grad/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "train/gradients/zeros_like_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "train/gradients/zeros_like_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "listener/listener_0/bw/bw/TensorArray"
  input: "listener/listener_0/bw/bw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train/gradients"
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "listener/listener_0/bw/bw/while/Exit_2"
  input: "^train/gradients/listener/listener_0/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "train/gradients/listener/listener_0/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "listener/listener_0/bw/bw/TensorArrayStack/range"
  input: "train/gradients/listener/listener_0/bw/bw/transpose_1_grad/transpose"
  input: "train/gradients/listener/listener_0/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/zeros_like_9"
  op: "ZerosLike"
  input: "listener/listener_0/bw/bw/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/zeros_like_10"
  op: "ZerosLike"
  input: "listener/listener_0/bw/bw/while/Exit_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2590
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2590
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2590
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul_grad/MatMul_1/Enter"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2590
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2590
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul_grad/MatMul"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul_grad/MatMul_1"
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul_grad/MatMul"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2590
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul_grad/MatMul_1"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2590
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2048
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "train/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "train/gradients/listener/listener_0/fw/fw/while/Exit_2_grad/b_exit"
  input: "train/gradients/listener/listener_0/fw/fw/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "train/gradients/listener/listener_0/fw/fw/while/Exit_3_grad/b_exit"
  input: "train/gradients/listener/listener_0/fw/fw/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "train/gradients/listener/listener_0/fw/fw/while/Exit_4_grad/b_exit"
  input: "train/gradients/listener/listener_0/fw/fw/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "train/gradients/zeros_like_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "train/gradients/zeros_like_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/Const"
  op: "Const"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/Const"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/Shape"
  op: "Shape"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/ShapeN"
  op: "ShapeN"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/ShapeN/StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/ShapeN/StackPopV2_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/ShapeN/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/ShapeN/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/ShapeN/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/ShapeN/Enter"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2078
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/ShapeN/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2078
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/ShapeN/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/Identity_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/ShapeN/f_acc_1"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/ShapeN/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/Identity_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/ShapeN/Enter_1"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/ShapeN/StackPushV2_1"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/ShapeN/Enter_1"
  input: "speller/decoder/while/Identity_4"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/ShapeN/StackPopV2_1"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/ShapeN/StackPopV2_1/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/ShapeN/StackPopV2_1/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/mod"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/ShapeN"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/ConcatOffset"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2078
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/ConcatOffset:1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/Slice"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/Slice_1"
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/Slice"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2078
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/Slice_1"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2590
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2590
          }
          dim {
            size: 2048
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2590
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2590
          }
          dim {
            size: 2048
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "train/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2590
          }
          dim {
            size: 2048
          }
        }
        shape {
          dim {
            size: 2590
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2590
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2590
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2590
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "train/gradients/listener/listener_0/fw/fw/while/Switch_2_grad/b_switch"
  input: "train/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Merge_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/fw/fw/while/Merge_2_grad/Switch"
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Merge_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/Merge_2_grad/Switch"
  input: "^train/gradients/listener/listener_0/fw/fw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/Merge_2_grad/Switch:1"
  input: "^train/gradients/listener/listener_0/fw/fw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "train/gradients/listener/listener_0/fw/fw/while/Switch_3_grad/b_switch"
  input: "train/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/fw/fw/while/Merge_3_grad/Switch"
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/Merge_3_grad/Switch"
  input: "^train/gradients/listener/listener_0/fw/fw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/Merge_3_grad/Switch:1"
  input: "^train/gradients/listener/listener_0/fw/fw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "train/gradients/listener/listener_0/fw/fw/while/Switch_4_grad/b_switch"
  input: "train/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Merge_4_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/fw/fw/while/Merge_4_grad/Switch"
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Merge_4_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/Merge_4_grad/Switch"
  input: "^train/gradients/listener/listener_0/fw/fw/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Merge_4_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/Merge_4_grad/Switch:1"
  input: "^train/gradients/listener/listener_0/fw/fw/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "train/gradients/listener/listener_0/bw/bw/while/Exit_2_grad/b_exit"
  input: "train/gradients/listener/listener_0/bw/bw/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "train/gradients/listener/listener_0/bw/bw/while/Exit_3_grad/b_exit"
  input: "train/gradients/listener/listener_0/bw/bw/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "train/gradients/listener/listener_0/bw/bw/while/Exit_4_grad/b_exit"
  input: "train/gradients/listener/listener_0/bw/bw/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Shape"
  op: "Shape"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Shape_1"
  op: "Shape"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Shape"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/BroadcastGradientArgs/Enter_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Shape_1"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Mul"
  op: "Mul"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/tuple/control_dependency"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2078
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Mul/Enter"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/Cast"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2078
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2078
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Sum"
  op: "Sum"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Mul"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Sum"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2078
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Mul_1"
  op: "Mul"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Mul_1/StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2078
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Mul_1/Enter"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2078
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2078
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Mul_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Sum_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2078
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Reshape"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Reshape_1"
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Reshape"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2078
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Reshape_1"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2078
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "train/gradients/listener/listener_0/fw/fw/while/Merge_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "train/gradients/listener/listener_0/fw/fw/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "train/gradients/listener/listener_0/fw/fw/while/Merge_4_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "train/gradients/listener/listener_0/bw/bw/while/Switch_2_grad/b_switch"
  input: "train/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Merge_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/bw/bw/while/Merge_2_grad/Switch"
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Merge_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/Merge_2_grad/Switch"
  input: "^train/gradients/listener/listener_0/bw/bw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/Merge_2_grad/Switch:1"
  input: "^train/gradients/listener/listener_0/bw/bw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "train/gradients/listener/listener_0/bw/bw/while/Switch_3_grad/b_switch"
  input: "train/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/bw/bw/while/Merge_3_grad/Switch"
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/Merge_3_grad/Switch"
  input: "^train/gradients/listener/listener_0/bw/bw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/Merge_3_grad/Switch:1"
  input: "^train/gradients/listener/listener_0/bw/bw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "train/gradients/listener/listener_0/bw/bw/while/Switch_4_grad/b_switch"
  input: "train/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Merge_4_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/bw/bw/while/Merge_4_grad/Switch"
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Merge_4_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/Merge_4_grad/Switch"
  input: "^train/gradients/listener/listener_0/bw/bw/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Merge_4_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/Merge_4_grad/Switch:1"
  input: "^train/gradients/listener/listener_0/bw/bw/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Shape"
  op: "Shape"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Shape_1"
  op: "Const"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Shape"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Mul"
  op: "Mul"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/tuple/control_dependency"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2078
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/Enter"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/truediv"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Sum"
  op: "Sum"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Mul"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Sum"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2078
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1"
  op: "Mul"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2078
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/Enter"
  input: "speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2078
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2078
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Mul_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Sum_1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape_1"
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2078
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape_1"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/concat_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/dropout_2/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train/gradients"
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "listener/listener_0/fw/fw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/dropout_2/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^train/gradients/listener/listener_0/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/dropout_2/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "listener/listener_0/fw/fw/while/Identity_1"
  input: "^train/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/zeros_like/StackPopV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/Select_2_grad/zeros_like/StackPopV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Mul/StackPopV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Mul_1/StackPopV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Mul/StackPopV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Mul_1/StackPopV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Mul/StackPopV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Mul_1/StackPopV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Mul/StackPopV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Mul_1/StackPopV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Mul/StackPopV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Mul_1/StackPopV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/Mul/StackPopV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/ShapeN/StackPopV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^train/gradients/listener/listener_0/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "^train/gradients/listener/listener_0/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^train/gradients/listener/listener_0/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/zeros_like"
  op: "ZerosLike"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/zeros_like/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/zeros_like/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/zeros_like/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/zeros_like/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/zeros_like/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/zeros_like/Enter"
  input: "listener/listener_0/fw/fw/while/Identity_3"
  input: "^train/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/zeros_like/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/zeros_like/StackPopV2/Enter"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/zeros_like/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/Select"
  op: "Select"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/Select/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/Select/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/Select/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/Select/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/Select/Enter"
  input: "listener/listener_0/fw/fw/while/GreaterEqual"
  input: "^train/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/Select/StackPopV2/Enter"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/Select_1"
  op: "Select"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/zeros_like"
  input: "train/gradients/listener/listener_0/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/Select"
  input: "^train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/Select_1"
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/Select"
  input: "^train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/Select_1"
  input: "^train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Select_2_grad/zeros_like"
  op: "ZerosLike"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_2_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Select_2_grad/zeros_like/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/Identity_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Select_2_grad/zeros_like/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_2_grad/zeros_like/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/Identity_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Select_2_grad/zeros_like/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_2_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Select_2_grad/zeros_like/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_2_grad/zeros_like/Enter"
  input: "listener/listener_0/fw/fw/while/Identity_4"
  input: "^train/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Select_2_grad/zeros_like/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_2_grad/zeros_like/StackPopV2/Enter"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Select_2_grad/zeros_like/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_2_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Select_2_grad/Select"
  op: "Select"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/Merge_4_grad/tuple/control_dependency_1"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_2_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Select_2_grad/Select_1"
  op: "Select"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_2_grad/zeros_like"
  input: "train/gradients/listener/listener_0/fw/fw/while/Merge_4_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Select_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/fw/fw/while/Select_2_grad/Select"
  input: "^train/gradients/listener/listener_0/fw/fw/while/Select_2_grad/Select_1"
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Select_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_2_grad/Select"
  input: "^train/gradients/listener/listener_0/fw/fw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/Select_2_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Select_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_2_grad/Select_1"
  input: "^train/gradients/listener/listener_0/fw/fw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/Select_2_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "train/gradients/listener/listener_0/bw/bw/while/Merge_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "train/gradients/listener/listener_0/bw/bw/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "train/gradients/listener/listener_0/bw/bw/while/Merge_4_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/Const"
  op: "Const"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/Rank"
  op: "Const"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/mod"
  op: "FloorMod"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/Const"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/Shape"
  op: "Shape"
  input: "speller/decoder/while/Identity_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/ShapeN"
  op: "ShapeN"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/ShapeN/StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/ShapeN/StackPopV2_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/ShapeN/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/Identity_9"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/ShapeN/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/Identity_9"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/ShapeN/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/ShapeN/Enter"
  input: "speller/decoder/while/Identity_9"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/ShapeN/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/ShapeN/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/Identity_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/ShapeN/f_acc_1"
  op: "StackV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/ShapeN/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/while/Identity_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/ShapeN/Enter_1"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/ShapeN/StackPushV2_1"
  op: "StackPushV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/ShapeN/Enter_1"
  input: "speller/decoder/while/Identity_5"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/ShapeN/StackPopV2_1"
  op: "StackPopV2"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/ShapeN/StackPopV2_1/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/ShapeN/StackPopV2_1/Enter"
  op: "Enter"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/speller/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/mod"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/ShapeN"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/Slice"
  op: "Slice"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/tuple/control_dependency"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/ConcatOffset"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/Slice_1"
  op: "Slice"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/dropout/mul_grad/tuple/control_dependency"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/ConcatOffset:1"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/Slice"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/Slice_1"
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/Slice"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/Slice_1"
  input: "^train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Select_grad/zeros_like"
  op: "ZerosLike"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_grad/zeros_like/Enter"
  input: "^train/gradients/Sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Select_grad/zeros_like/Enter"
  op: "Enter"
  input: "listener/listener_0/fw/fw/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Select_grad/Select"
  op: "Select"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Select_grad/Select_1"
  op: "Select"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_grad/zeros_like"
  input: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/fw/fw/while/Select_grad/Select"
  input: "^train/gradients/listener/listener_0/fw/fw/while/Select_grad/Select_1"
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_grad/Select"
  input: "^train/gradients/listener/listener_0/fw/fw/while/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_grad/Select_1"
  input: "^train/gradients/listener/listener_0/fw/fw/while/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/Select_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Shape"
  op: "Shape"
  input: "listener/listener_0/fw/fw/while/dropout_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Shape_1"
  op: "Shape"
  input: "listener/listener_0/fw/fw/while/dropout_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Shape"
  input: "^train/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/Enter_1"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Shape_1"
  input: "^train/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Mul"
  op: "Mul"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_2_grad/tuple/control_dependency_1"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/dropout_1/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/dropout_1/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Mul/Enter"
  input: "listener/listener_0/fw/fw/while/dropout_1/Cast"
  input: "^train/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Sum"
  op: "Sum"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Mul"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Sum"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Mul_1"
  op: "Mul"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Mul_1/StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/dropout_1/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/dropout_1/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Mul_1/Enter"
  input: "listener/listener_0/fw/fw/while/dropout_1/mul"
  input: "^train/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Mul_1"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Sum_1"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Reshape"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Reshape_1"
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Reshape"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Reshape_1"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/dropout_2/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train/gradients"
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "listener/listener_0/bw/bw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/dropout_2/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^train/gradients/listener/listener_0/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/dropout_2/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "listener/listener_0/bw/bw/while/Identity_1"
  input: "^train/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/zeros_like/StackPopV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/Select_2_grad/zeros_like/StackPopV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Mul/StackPopV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Mul_1/StackPopV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Mul/StackPopV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Mul_1/StackPopV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Mul/StackPopV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Mul_1/StackPopV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Mul/StackPopV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Mul_1/StackPopV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Mul/StackPopV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Mul_1/StackPopV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/Mul/StackPopV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/ShapeN/StackPopV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^train/gradients/listener/listener_0/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "^train/gradients/listener/listener_0/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^train/gradients/listener/listener_0/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/zeros_like"
  op: "ZerosLike"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/zeros_like/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/zeros_like/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/zeros_like/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/zeros_like/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/zeros_like/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/zeros_like/Enter"
  input: "listener/listener_0/bw/bw/while/Identity_3"
  input: "^train/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/zeros_like/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/zeros_like/StackPopV2/Enter"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/zeros_like/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/Select"
  op: "Select"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/Select/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/Select/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/Select/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/Select/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/Select/Enter"
  input: "listener/listener_0/bw/bw/while/GreaterEqual"
  input: "^train/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/Select/StackPopV2/Enter"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/Select_1"
  op: "Select"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/zeros_like"
  input: "train/gradients/listener/listener_0/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/Select"
  input: "^train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/Select_1"
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/Select"
  input: "^train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/Select_1"
  input: "^train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Select_2_grad/zeros_like"
  op: "ZerosLike"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_2_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Select_2_grad/zeros_like/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/Identity_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Select_2_grad/zeros_like/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_2_grad/zeros_like/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/Identity_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Select_2_grad/zeros_like/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_2_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Select_2_grad/zeros_like/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_2_grad/zeros_like/Enter"
  input: "listener/listener_0/bw/bw/while/Identity_4"
  input: "^train/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Select_2_grad/zeros_like/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_2_grad/zeros_like/StackPopV2/Enter"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Select_2_grad/zeros_like/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_2_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Select_2_grad/Select"
  op: "Select"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/Merge_4_grad/tuple/control_dependency_1"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_2_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Select_2_grad/Select_1"
  op: "Select"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_2_grad/zeros_like"
  input: "train/gradients/listener/listener_0/bw/bw/while/Merge_4_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Select_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/bw/bw/while/Select_2_grad/Select"
  input: "^train/gradients/listener/listener_0/bw/bw/while/Select_2_grad/Select_1"
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Select_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_2_grad/Select"
  input: "^train/gradients/listener/listener_0/bw/bw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/Select_2_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Select_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_2_grad/Select_1"
  input: "^train/gradients/listener/listener_0/bw/bw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/Select_2_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Shape"
  op: "Shape"
  input: "listener/listener_0/fw/fw/while/dropout_2/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Shape_1"
  op: "Shape"
  input: "listener/listener_0/fw/fw/while/dropout_2/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Shape"
  input: "^train/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/Enter_1"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Shape_1"
  input: "^train/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Mul"
  op: "Mul"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_grad/tuple/control_dependency_1"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/dropout_2/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/dropout_2/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Mul/Enter"
  input: "listener/listener_0/fw/fw/while/dropout_2/Cast"
  input: "^train/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Sum"
  op: "Sum"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Mul"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Sum"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Mul_1"
  op: "Mul"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Mul_1/StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/dropout_2/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/dropout_2/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Mul_1/Enter"
  input: "listener/listener_0/fw/fw/while/dropout_2/mul"
  input: "^train/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Mul_1"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Sum_1"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Reshape"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Reshape_1"
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Reshape"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Reshape_1"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Shape"
  op: "Shape"
  input: "listener/listener_0/fw/fw/while/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Shape_1"
  op: "Const"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Shape"
  input: "^train/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Mul"
  op: "Mul"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/tuple/control_dependency"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/dropout_1/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/dropout_1/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Mul/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Mul/Enter"
  input: "listener/listener_0/fw/fw/while/dropout_1/truediv"
  input: "^train/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Mul/StackPopV2/Enter"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Sum"
  op: "Sum"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Mul"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Sum"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Mul_1"
  op: "Mul"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Mul_1/StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Mul_1/Enter"
  input: "listener/listener_0/fw/fw/while/lstm_cell/mul_2"
  input: "^train/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Mul_1/StackPopV2/Enter"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Mul_1"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Sum_1"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Reshape"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Reshape_1"
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Reshape"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Reshape_1"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Select_grad/zeros_like"
  op: "ZerosLike"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_grad/zeros_like/Enter"
  input: "^train/gradients/Sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Select_grad/zeros_like/Enter"
  op: "Enter"
  input: "listener/listener_0/bw/bw/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Select_grad/Select"
  op: "Select"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Select_grad/Select_1"
  op: "Select"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_grad/zeros_like"
  input: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/bw/bw/while/Select_grad/Select"
  input: "^train/gradients/listener/listener_0/bw/bw/while/Select_grad/Select_1"
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_grad/Select"
  input: "^train/gradients/listener/listener_0/bw/bw/while/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_grad/Select_1"
  input: "^train/gradients/listener/listener_0/bw/bw/while/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/Select_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Shape"
  op: "Shape"
  input: "listener/listener_0/bw/bw/while/dropout_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Shape_1"
  op: "Shape"
  input: "listener/listener_0/bw/bw/while/dropout_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Shape"
  input: "^train/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/Enter_1"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Shape_1"
  input: "^train/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Mul"
  op: "Mul"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_2_grad/tuple/control_dependency_1"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/dropout_1/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/dropout_1/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Mul/Enter"
  input: "listener/listener_0/bw/bw/while/dropout_1/Cast"
  input: "^train/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Sum"
  op: "Sum"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Mul"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Sum"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Mul_1"
  op: "Mul"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Mul_1/StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/dropout_1/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/dropout_1/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Mul_1/Enter"
  input: "listener/listener_0/bw/bw/while/dropout_1/mul"
  input: "^train/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Mul_1"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Sum_1"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Reshape"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Reshape_1"
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Reshape"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Reshape_1"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/speller/decoder/while/Switch_5_grad_1/NextIteration"
  op: "NextIteration"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/concat_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/Shape"
  op: "Shape"
  input: "listener/listener_0/fw/fw/while/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/Shape_1"
  op: "Const"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/Shape"
  input: "^train/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/Mul"
  op: "Mul"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/tuple/control_dependency"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/dropout_2/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/dropout_2/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/Mul/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/Mul/Enter"
  input: "listener/listener_0/fw/fw/while/dropout_2/truediv"
  input: "^train/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/Mul/StackPopV2/Enter"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/Sum"
  op: "Sum"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/Mul"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/Sum"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/Mul_1"
  op: "Mul"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Mul_1/StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/Mul_1"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/Sum_1"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/Reshape"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/Reshape_1"
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/Reshape"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/Reshape_1"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Shape"
  op: "Shape"
  input: "listener/listener_0/bw/bw/while/dropout_2/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Shape_1"
  op: "Shape"
  input: "listener/listener_0/bw/bw/while/dropout_2/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Shape"
  input: "^train/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/Enter_1"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Shape_1"
  input: "^train/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Mul"
  op: "Mul"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_grad/tuple/control_dependency_1"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/dropout_2/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/dropout_2/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Mul/Enter"
  input: "listener/listener_0/bw/bw/while/dropout_2/Cast"
  input: "^train/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Sum"
  op: "Sum"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Mul"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Sum"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Mul_1"
  op: "Mul"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Mul_1/StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/dropout_2/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/dropout_2/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Mul_1/Enter"
  input: "listener/listener_0/bw/bw/while/dropout_2/mul"
  input: "^train/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Mul_1"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Sum_1"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Reshape"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Reshape_1"
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Reshape"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Reshape_1"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Shape"
  op: "Shape"
  input: "listener/listener_0/bw/bw/while/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Shape_1"
  op: "Const"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Shape"
  input: "^train/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Mul"
  op: "Mul"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/tuple/control_dependency"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/dropout_1/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/dropout_1/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Mul/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Mul/Enter"
  input: "listener/listener_0/bw/bw/while/dropout_1/truediv"
  input: "^train/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Mul/StackPopV2/Enter"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Sum"
  op: "Sum"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Mul"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Sum"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Mul_1"
  op: "Mul"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Mul_1/StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Mul_1/Enter"
  input: "listener/listener_0/bw/bw/while/lstm_cell/mul_2"
  input: "^train/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Mul_1/StackPopV2/Enter"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Mul_1"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Sum_1"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Reshape"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Reshape_1"
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Reshape"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Reshape_1"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/AddN_4"
  op: "AddN"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/tuple/control_dependency"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout_2/mul_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/dropout_1/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Shape"
  op: "Shape"
  input: "listener/listener_0/fw/fw/while/lstm_cell/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Shape_1"
  op: "Shape"
  input: "listener/listener_0/fw/fw/while/lstm_cell/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Shape"
  input: "^train/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Shape_1"
  input: "^train/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Mul"
  op: "Mul"
  input: "train/gradients/AddN_4"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Mul/Enter"
  input: "listener/listener_0/fw/fw/while/lstm_cell/Tanh_1"
  input: "^train/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPopV2/Enter"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Sum"
  op: "Sum"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Mul"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Sum"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Mul_1"
  op: "Mul"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  input: "train/gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/Enter"
  input: "listener/listener_0/fw/fw/while/lstm_cell/Sigmoid_2"
  input: "^train/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Mul_1"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Sum_1"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Reshape"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Reshape_1"
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Reshape"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Reshape_1"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/Shape"
  op: "Shape"
  input: "listener/listener_0/bw/bw/while/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/Shape_1"
  op: "Const"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/Shape"
  input: "^train/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/Mul"
  op: "Mul"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/tuple/control_dependency"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/dropout_2/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/dropout_2/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/Mul/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/Mul/Enter"
  input: "listener/listener_0/bw/bw/while/dropout_2/truediv"
  input: "^train/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/Mul/StackPopV2/Enter"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/Sum"
  op: "Sum"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/Mul"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/Sum"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/Mul_1"
  op: "Mul"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Mul_1/StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/Mul_1"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/Sum_1"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/Reshape"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/Reshape_1"
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/Reshape"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/Reshape_1"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/AddN_5"
  op: "AddN"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/tuple/control_dependency"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout_2/mul_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/dropout_1/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Shape"
  op: "Shape"
  input: "listener/listener_0/bw/bw/while/lstm_cell/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Shape_1"
  op: "Shape"
  input: "listener/listener_0/bw/bw/while/lstm_cell/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Shape"
  input: "^train/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Shape_1"
  input: "^train/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Mul"
  op: "Mul"
  input: "train/gradients/AddN_5"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Mul/Enter"
  input: "listener/listener_0/bw/bw/while/lstm_cell/Tanh_1"
  input: "^train/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPopV2/Enter"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Sum"
  op: "Sum"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Mul"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Sum"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Mul_1"
  op: "Mul"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  input: "train/gradients/AddN_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/Enter"
  input: "listener/listener_0/bw/bw/while/lstm_cell/Sigmoid_2"
  input: "^train/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Mul_1"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Sum_1"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Reshape"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Reshape_1"
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Reshape"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Reshape_1"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/AddN_6"
  op: "AddN"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/tuple/control_dependency_1"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/Shape"
  op: "Shape"
  input: "listener/listener_0/fw/fw/while/lstm_cell/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/Shape_1"
  op: "Shape"
  input: "listener/listener_0/fw/fw/while/lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/Shape"
  input: "^train/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/Shape_1"
  input: "^train/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/Sum"
  op: "Sum"
  input: "train/gradients/AddN_6"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/Sum"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/AddN_6"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/Sum_1"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/Reshape"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/Reshape_1"
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/Reshape"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/Reshape_1"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/Shape"
  op: "Shape"
  input: "listener/listener_0/fw/fw/while/lstm_cell/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/Shape_1"
  op: "Shape"
  input: "listener/listener_0/fw/fw/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/Shape"
  input: "^train/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/BroadcastGradientArgs/Enter_1"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/Shape_1"
  input: "^train/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/Mul"
  op: "Mul"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/tuple/control_dependency"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/Sum"
  op: "Sum"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/Mul"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/Sum"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/Mul_1"
  op: "Mul"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/Mul_1/Enter"
  input: "listener/listener_0/fw/fw/while/lstm_cell/Sigmoid"
  input: "^train/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPopV2/Enter"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/Mul_1"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/Sum_1"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/Reshape"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/Reshape_1"
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/Reshape"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/Reshape_1"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Shape"
  op: "Shape"
  input: "listener/listener_0/fw/fw/while/lstm_cell/Sigmoid_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Shape_1"
  op: "Shape"
  input: "listener/listener_0/fw/fw/while/lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Shape"
  input: "^train/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter_1"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Shape_1"
  input: "^train/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Mul"
  op: "Mul"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/tuple/control_dependency_1"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Mul/Enter"
  input: "listener/listener_0/fw/fw/while/lstm_cell/Tanh"
  input: "^train/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Sum"
  op: "Sum"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Mul"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Sum"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Mul_1"
  op: "Mul"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/Enter"
  input: "listener/listener_0/fw/fw/while/lstm_cell/Sigmoid_1"
  input: "^train/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Mul_1"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Sum_1"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Reshape"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Reshape_1"
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Reshape"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Reshape_1"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/AddN_7"
  op: "AddN"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/tuple/control_dependency_1"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/Shape"
  op: "Shape"
  input: "listener/listener_0/bw/bw/while/lstm_cell/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/Shape_1"
  op: "Shape"
  input: "listener/listener_0/bw/bw/while/lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/Shape"
  input: "^train/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/Shape_1"
  input: "^train/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/Sum"
  op: "Sum"
  input: "train/gradients/AddN_7"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/Sum"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/AddN_7"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/Sum_1"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/Reshape"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/Reshape_1"
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/Reshape"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/Reshape_1"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/AddN_8"
  op: "AddN"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/tuple/control_dependency"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/Shape"
  op: "Shape"
  input: "listener/listener_0/bw/bw/while/lstm_cell/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/Shape_1"
  op: "Shape"
  input: "listener/listener_0/bw/bw/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/Shape"
  input: "^train/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/BroadcastGradientArgs/Enter_1"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/Shape_1"
  input: "^train/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/Mul"
  op: "Mul"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/tuple/control_dependency"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/Sum"
  op: "Sum"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/Mul"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/Sum"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/Mul_1"
  op: "Mul"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/Mul_1/Enter"
  input: "listener/listener_0/bw/bw/while/lstm_cell/Sigmoid"
  input: "^train/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPopV2/Enter"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/Mul_1"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/Sum_1"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/Reshape"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/Reshape_1"
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/Reshape"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/Reshape_1"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Shape"
  op: "Shape"
  input: "listener/listener_0/bw/bw/while/lstm_cell/Sigmoid_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Shape_1"
  op: "Shape"
  input: "listener/listener_0/bw/bw/while/lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Shape"
  input: "^train/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter_1"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Shape_1"
  input: "^train/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Mul"
  op: "Mul"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/tuple/control_dependency_1"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Mul/Enter"
  input: "listener/listener_0/bw/bw/while/lstm_cell/Tanh"
  input: "^train/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Sum"
  op: "Sum"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Mul"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Sum"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Mul_1"
  op: "Mul"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/Enter"
  input: "listener/listener_0/bw/bw/while/lstm_cell/Sigmoid_1"
  input: "^train/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Mul_1"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Sum_1"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Reshape"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Reshape_1"
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Reshape"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Reshape_1"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_grad/Shape"
  op: "Shape"
  input: "listener/listener_0/fw/fw/while/lstm_cell/split:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_grad/Shape_1"
  op: "Const"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_grad/Shape"
  input: "^train/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_grad/Sum"
  op: "Sum"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_grad/Sum"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_grad/Sum_1"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_grad/Reshape"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_grad/Reshape_1"
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_grad/Reshape"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_grad/Reshape_1"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "train/gradients/AddN_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/AddN_9"
  op: "AddN"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/tuple/control_dependency"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/Tanh_grad/TanhGrad"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/add_grad/tuple/control_dependency"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/split_grad/concat/Const"
  op: "Const"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_grad/Shape"
  op: "Shape"
  input: "listener/listener_0/bw/bw/while/lstm_cell/split:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_grad/Shape_1"
  op: "Const"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_grad/Shape"
  input: "^train/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_grad/Sum"
  op: "Sum"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_grad/Sum"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_grad/Sum_1"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_grad/Reshape"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_grad/Reshape_1"
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_grad/Reshape"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_grad/Reshape_1"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "train/gradients/AddN_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/split_grad/concat"
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/split_grad/concat"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/lstm_cell/split_grad/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/Tanh_grad/TanhGrad"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/add_grad/tuple/control_dependency"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/split_grad/concat/Const"
  op: "Const"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 912
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "listener/listener_0/fw/lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/Enter"
  input: "listener/listener_0/fw/fw/while/lstm_cell/concat"
  input: "^train/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 912
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 912
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul_grad/MatMul"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1"
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul_grad/MatMul"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 912
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2048
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "train/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/split_grad/concat"
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/split_grad/concat"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/lstm_cell/split_grad/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/Const"
  op: "Const"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/Const"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/Shape"
  op: "Shape"
  input: "listener/listener_0/fw/fw/while/dropout/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/ShapeN"
  op: "ShapeN"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/ShapeN/StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_2_grad/zeros_like/StackPopV2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/ShapeN/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/dropout/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/ShapeN/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/dropout/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/ShapeN/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/ShapeN/Enter"
  input: "listener/listener_0/fw/fw/while/dropout/mul_1"
  input: "^train/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/ShapeN/StackPopV2/Enter"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/mod"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/ShapeN"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/ConcatOffset"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/ConcatOffset:1"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/Slice"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/Slice_1"
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/Slice"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/Slice_1"
  input: "^train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "train/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 912
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "listener/listener_0/bw/lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/Enter"
  input: "listener/listener_0/bw/bw/while/lstm_cell/concat"
  input: "^train/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 912
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 912
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul_grad/MatMul"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1"
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul_grad/MatMul"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 912
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2048
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "train/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Shape"
  op: "Shape"
  input: "listener/listener_0/fw/fw/while/dropout/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Shape_1"
  op: "Shape"
  input: "listener/listener_0/fw/fw/while/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Shape"
  input: "^train/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/BroadcastGradientArgs/Enter_1"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Shape_1"
  input: "^train/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Mul"
  op: "Mul"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/tuple/control_dependency"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/dropout/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/dropout/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Mul/Enter"
  input: "listener/listener_0/fw/fw/while/dropout/Cast"
  input: "^train/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Sum"
  op: "Sum"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Mul"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Sum"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Mul_1"
  op: "Mul"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Mul_1/StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Mul_1/Enter"
  input: "listener/listener_0/fw/fw/while/dropout/mul"
  input: "^train/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Mul_1"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Sum_1"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Reshape"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Reshape_1"
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Reshape"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Reshape_1"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/AddN_10"
  op: "AddN"
  input: "train/gradients/listener/listener_0/fw/fw/while/Select_2_grad/tuple/control_dependency"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/concat_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/Select_2_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/Const"
  op: "Const"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/Const"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/Shape"
  op: "Shape"
  input: "listener/listener_0/bw/bw/while/dropout/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/ShapeN"
  op: "ShapeN"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/ShapeN/StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_2_grad/zeros_like/StackPopV2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/ShapeN/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/dropout/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/ShapeN/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/dropout/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/ShapeN/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/ShapeN/Enter"
  input: "listener/listener_0/bw/bw/while/dropout/mul_1"
  input: "^train/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/ShapeN/StackPopV2/Enter"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/mod"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/ShapeN"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/ConcatOffset"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/ConcatOffset:1"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/Slice"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/Slice_1"
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/Slice"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/Slice_1"
  input: "^train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "train/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Shape"
  op: "Shape"
  input: "listener/listener_0/fw/fw/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Shape_1"
  op: "Const"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Shape"
  input: "^train/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Mul"
  op: "Mul"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/tuple/control_dependency"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/dropout/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/dropout/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Mul/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Mul/Enter"
  input: "listener/listener_0/fw/fw/while/dropout/truediv"
  input: "^train/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Mul/StackPopV2/Enter"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Sum"
  op: "Sum"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Mul"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Sum"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Mul_1"
  op: "Mul"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Mul_1/StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Mul_1/Enter"
  input: "listener/listener_0/fw/fw/while/TensorArrayReadV3"
  input: "^train/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Mul_1/StackPopV2/Enter"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Mul_1"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Sum_1"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Reshape"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Reshape_1"
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Reshape"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Reshape_1"
  input: "^train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "train/gradients/AddN_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Shape"
  op: "Shape"
  input: "listener/listener_0/bw/bw/while/dropout/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Shape_1"
  op: "Shape"
  input: "listener/listener_0/bw/bw/while/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Shape"
  input: "^train/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/BroadcastGradientArgs/Enter_1"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Shape_1"
  input: "^train/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Mul"
  op: "Mul"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/tuple/control_dependency"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/dropout/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/dropout/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Mul/Enter"
  input: "listener/listener_0/bw/bw/while/dropout/Cast"
  input: "^train/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Sum"
  op: "Sum"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Mul"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Sum"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Mul_1"
  op: "Mul"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Mul_1/StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Mul_1/Enter"
  input: "listener/listener_0/bw/bw/while/dropout/mul"
  input: "^train/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Mul_1"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Sum_1"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Reshape"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Reshape_1"
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Reshape"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Reshape_1"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/AddN_11"
  op: "AddN"
  input: "train/gradients/listener/listener_0/bw/bw/while/Select_2_grad/tuple/control_dependency"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/concat_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/Select_2_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^train/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train/gradients"
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "listener/listener_0/fw/fw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "listener/listener_0/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^train/gradients/listener/listener_0/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "train/gradients/listener/listener_0/fw/fw/while/dropout/mul_grad/tuple/control_dependency"
  input: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Shape"
  op: "Shape"
  input: "listener/listener_0/bw/bw/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Shape_1"
  op: "Const"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Shape"
  input: "^train/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Mul"
  op: "Mul"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/tuple/control_dependency"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/dropout/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/dropout/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Mul/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Mul/Enter"
  input: "listener/listener_0/bw/bw/while/dropout/truediv"
  input: "^train/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Mul/StackPopV2/Enter"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Sum"
  op: "Sum"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Mul"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Sum"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Mul_1"
  op: "Mul"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Mul_1/StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Mul_1/Enter"
  input: "listener/listener_0/bw/bw/while/TensorArrayReadV3"
  input: "^train/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Mul_1/StackPopV2/Enter"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Mul_1"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Sum_1"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Reshape"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Reshape_1"
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Reshape"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Reshape_1"
  input: "^train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "train/gradients/AddN_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "train/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^train/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train/gradients"
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "listener/listener_0/bw/bw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "listener/listener_0/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^train/gradients/listener/listener_0/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "train/gradients/listener/listener_0/bw/bw/while/dropout/mul_grad/tuple/control_dependency"
  input: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "listener/listener_0/fw/fw/TensorArray_1"
  input: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train/gradients"
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^train/gradients/listener/listener_0/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/fw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "train/gradients/listener/listener_0/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "listener/listener_0/fw/fw/TensorArrayUnstack/range"
  input: "train/gradients/listener/listener_0/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^train/gradients/listener/listener_0/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^train/gradients/listener/listener_0/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^train/gradients/listener/listener_0/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/listener/listener_0/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "train/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "listener/listener_0/fw/fw/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/fw/fw/transpose_grad/transpose"
  op: "Transpose"
  input: "train/gradients/listener/listener_0/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  input: "train/gradients/listener/listener_0/fw/fw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "listener/listener_0/bw/bw/TensorArray_1"
  input: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train/gradients"
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^train/gradients/listener/listener_0/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/bw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "train/gradients/listener/listener_0/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "listener/listener_0/bw/bw/TensorArrayUnstack/range"
  input: "train/gradients/listener/listener_0/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/listener/listener_0/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^train/gradients/listener/listener_0/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^train/gradients/listener/listener_0/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/listener/listener_0/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^train/gradients/listener/listener_0/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "listener/listener_0/bw/bw/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/bw/transpose_grad/transpose"
  op: "Transpose"
  input: "train/gradients/listener/listener_0/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  input: "train/gradients/listener/listener_0/bw/bw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/listener/listener_0/bw/ReverseSequence_grad/ReverseSequence"
  op: "ReverseSequence"
  input: "train/gradients/listener/listener_0/bw/bw/transpose_grad/transpose"
  input: "Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "train/gradients/AddN_12"
  op: "AddN"
  input: "train/gradients/listener/listener_0/fw/fw/transpose_grad/transpose"
  input: "train/gradients/listener/listener_0/bw/ReverseSequence_grad/ReverseSequence"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/listener/listener_0/fw/fw/transpose_grad/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_1_grad/Shape"
  op: "Shape"
  input: "dense_layer_1/dense_layer_1_1_dropout/dropout/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_1_grad/Shape_1"
  op: "Shape"
  input: "dense_layer_1/dense_layer_1_1_dropout/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_1_grad/Shape"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_1_grad/Mul"
  op: "Mul"
  input: "train/gradients/AddN_12"
  input: "dense_layer_1/dense_layer_1_1_dropout/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_1_grad/Sum"
  op: "Sum"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_1_grad/Mul"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_1_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_1_grad/Sum"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_1_grad/Mul_1"
  op: "Mul"
  input: "dense_layer_1/dense_layer_1_1_dropout/dropout/mul"
  input: "train/gradients/AddN_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_1_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_1_grad/Mul_1"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_1_grad/Sum_1"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_1_grad/Reshape"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_1_grad/Reshape_1"
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_1_grad/Reshape"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_1_grad/Reshape_1"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_grad/Shape"
  op: "Shape"
  input: "dense_layer_1/Relu_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_grad/Shape"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_grad/Mul"
  op: "Mul"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_1_grad/tuple/control_dependency"
  input: "dense_layer_1/dense_layer_1_1_dropout/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_grad/Sum"
  op: "Sum"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_grad/Mul"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_grad/Sum"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_grad/Mul_1"
  op: "Mul"
  input: "dense_layer_1/Relu_1"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_grad/Mul_1"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_grad/Sum_1"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_grad/Reshape"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_grad/Reshape_1"
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_grad/Reshape"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_grad/Reshape_1"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/Relu_1_grad/ReluGrad"
  op: "ReluGrad"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_dropout/dropout/mul_grad/tuple/control_dependency"
  input: "dense_layer_1/Relu_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_1_grad/Shape"
  op: "Shape"
  input: "dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 400
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_1_grad/Shape"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_1_grad/Sum"
  op: "Sum"
  input: "train/gradients/dense_layer_1/Relu_1_grad/ReluGrad"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_1_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_1_grad/Sum"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_1_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/dense_layer_1/Relu_1_grad/ReluGrad"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_1_grad/Sum_1"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_1_grad/Reshape"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_1_grad/Reshape_1"
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_1_grad/Reshape"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_1_grad/Reshape_1"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_1_grad/Shape"
  op: "Shape"
  input: "dense_layer_1/dense_layer_1_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 400
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_1_grad/Shape"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_1_grad/Mul"
  op: "Mul"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_1_grad/tuple/control_dependency"
  input: "dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_1_grad/Sum"
  op: "Sum"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_1_grad/Mul"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_1_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_1_grad/Sum"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_1_grad/Mul_1"
  op: "Mul"
  input: "dense_layer_1/dense_layer_1_1/BiasAdd"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_1_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_1_grad/Mul_1"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_1_grad/Sum_1"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_1_grad/Reshape"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_1_grad/Reshape_1"
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_1_grad/Reshape"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_1_grad/Reshape_1"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/sub_grad/Neg"
  op: "Neg"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_1_grad/tuple/control_dependency_1"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/sub_grad/Neg"
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_1_grad/tuple/control_dependency_1"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/sub_grad/Neg"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/sub_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_2_grad/Mul"
  op: "Mul"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/sub_grad/tuple/control_dependency_1"
  input: "dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_2_grad/Mul_1"
  op: "Mul"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/sub_grad/tuple/control_dependency_1"
  input: "dense_layer_1/dense_layer_1_1_batch_norm/moments/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_2_grad/Mul"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_2_grad/Mul_1"
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_2_grad/Mul"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_2_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_2_grad/Mul_1"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_2_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/Squeeze_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\220\001\000\000"
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_2_grad/tuple/control_dependency"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/AddN_13"
  op: "AddN"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_1_grad/tuple/control_dependency_1"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_grad/Mul"
  op: "Mul"
  input: "train/gradients/AddN_13"
  input: "dense_layer_1_1_batch_norm/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_grad/Mul_1"
  op: "Mul"
  input: "train/gradients/AddN_13"
  input: "dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_grad/Mul"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_grad/Mul_1"
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_grad/Mul"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_grad/Mul_1"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/Rsqrt_grad/RsqrtGrad"
  op: "RsqrtGrad"
  input: "dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/Rsqrt"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 400
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_grad/Shape"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_grad/Sum"
  op: "Sum"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/Rsqrt_grad/RsqrtGrad"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_grad/Sum"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/Rsqrt_grad/RsqrtGrad"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_grad/Sum_1"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_grad/Reshape"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_grad/Reshape_1"
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_grad/Reshape"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_grad/Reshape_1"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/Squeeze_1_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\220\001\000\000"
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/Squeeze_1_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/add_grad/tuple/control_dependency"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/Squeeze_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Shape"
  op: "Shape"
  input: "dense_layer_1/dense_layer_1_1_batch_norm/moments/SquaredDifference"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/add"
  op: "Add"
  input: "dense_layer_1/dense_layer_1_1_batch_norm/moments/variance/reduction_indices"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/mod"
  op: "FloorMod"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/add"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/range"
  op: "Range"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/range/start"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Size"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Fill"
  op: "Fill"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Shape_1"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/range"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/mod"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Shape"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Maximum"
  op: "Maximum"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/DynamicStitch"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/floordiv"
  op: "FloorDiv"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Shape"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/Squeeze_1_grad/Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Tile"
  op: "Tile"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Shape_2"
  op: "Shape"
  input: "dense_layer_1/dense_layer_1_1_batch_norm/moments/SquaredDifference"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Shape_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\220\001\000\000"
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Prod"
  op: "Prod"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Shape_2"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Prod_1"
  op: "Prod"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Shape_3"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Maximum_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Maximum_1"
  op: "Maximum"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Prod_1"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/floordiv_1"
  op: "FloorDiv"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Prod"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Cast"
  op: "Cast"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/truediv"
  op: "RealDiv"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Tile"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/SquaredDifference_grad/Shape"
  op: "Shape"
  input: "dense_layer_1/dense_layer_1_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/SquaredDifference_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\220\001\000\000"
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/SquaredDifference_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/SquaredDifference_grad/Shape"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/SquaredDifference_grad/scalar"
  op: "Const"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/truediv"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/SquaredDifference_grad/Mul"
  op: "Mul"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/SquaredDifference_grad/scalar"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/SquaredDifference_grad/sub"
  op: "Sub"
  input: "dense_layer_1/dense_layer_1_1/BiasAdd"
  input: "dense_layer_1/dense_layer_1_1_batch_norm/moments/StopGradient"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/variance_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/SquaredDifference_grad/mul_1"
  op: "Mul"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/SquaredDifference_grad/Mul"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/SquaredDifference_grad/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/SquaredDifference_grad/Sum"
  op: "Sum"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/SquaredDifference_grad/mul_1"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/SquaredDifference_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/SquaredDifference_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/SquaredDifference_grad/Sum"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/SquaredDifference_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/SquaredDifference_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/SquaredDifference_grad/mul_1"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/SquaredDifference_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/SquaredDifference_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/SquaredDifference_grad/Sum_1"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/SquaredDifference_grad/Neg"
  op: "Neg"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/SquaredDifference_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/SquaredDifference_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/SquaredDifference_grad/Neg"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/SquaredDifference_grad/Reshape"
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/SquaredDifference_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/SquaredDifference_grad/Reshape"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/SquaredDifference_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/SquaredDifference_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/SquaredDifference_grad/Neg"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/SquaredDifference_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Shape"
  op: "Shape"
  input: "dense_layer_1/dense_layer_1_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/add"
  op: "Add"
  input: "dense_layer_1/dense_layer_1_1_batch_norm/moments/mean/reduction_indices"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/mod"
  op: "FloorMod"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/add"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/range"
  op: "Range"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/range/start"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Size"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Fill"
  op: "Fill"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Shape_1"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/range"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/mod"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Shape"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Maximum"
  op: "Maximum"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/DynamicStitch"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/floordiv"
  op: "FloorDiv"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Shape"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/Squeeze_grad/Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Tile"
  op: "Tile"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Shape_2"
  op: "Shape"
  input: "dense_layer_1/dense_layer_1_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Shape_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\220\001\000\000"
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Prod"
  op: "Prod"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Shape_2"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Prod_1"
  op: "Prod"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Shape_3"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Maximum_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Maximum_1"
  op: "Maximum"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Prod_1"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/floordiv_1"
  op: "FloorDiv"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Prod"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Cast"
  op: "Cast"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/truediv"
  op: "RealDiv"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Tile"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/AddN_14"
  op: "AddN"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_1_grad/tuple/control_dependency"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/SquaredDifference_grad/tuple/control_dependency"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/moments/mean_grad/truediv"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "train/gradients/AddN_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/AddN_14"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/AddN_14"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/dense_layer_1/dense_layer_1_1/BiasAdd_grad/BiasAddGrad"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1/Tensordot_grad/Shape"
  op: "Shape"
  input: "dense_layer_1/dense_layer_1_1/Tensordot/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1/Tensordot_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_1/BiasAdd_grad/tuple/control_dependency"
  input: "train/gradients/dense_layer_1/dense_layer_1_1/Tensordot_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1/Tensordot/MatMul_grad/MatMul"
  op: "MatMul"
  input: "train/gradients/dense_layer_1/dense_layer_1_1/Tensordot_grad/Reshape"
  input: "dense_layer_1/dense_layer_1_1/Tensordot/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1/Tensordot/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dense_layer_1/dense_layer_1_1/Tensordot/Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_1/Tensordot_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1/Tensordot/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1/Tensordot/MatMul_grad/MatMul"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1/Tensordot/MatMul_grad/MatMul_1"
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1/Tensordot/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/dense_layer_1/dense_layer_1_1/Tensordot/MatMul_grad/MatMul"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1/Tensordot/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1/Tensordot/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1/Tensordot/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/dense_layer_1/dense_layer_1_1/Tensordot/MatMul_grad/MatMul_1"
  input: "^train/gradients/dense_layer_1/dense_layer_1_1/Tensordot/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_1/Tensordot/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1/Tensordot/Reshape_grad/Shape"
  op: "Shape"
  input: "dense_layer_1/dense_layer_1_1/Tensordot/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1/Tensordot/Reshape_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_1/Tensordot/MatMul_grad/tuple/control_dependency"
  input: "train/gradients/dense_layer_1/dense_layer_1_1/Tensordot/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1/Tensordot/Reshape_1_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\220\001\000\000\220\001\000\000"
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1/Tensordot/Reshape_1_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_1/Tensordot/MatMul_grad/tuple/control_dependency_1"
  input: "train/gradients/dense_layer_1/dense_layer_1_1/Tensordot/Reshape_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1/Tensordot/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "dense_layer_1/dense_layer_1_1/Tensordot/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1/Tensordot/transpose_grad/transpose"
  op: "Transpose"
  input: "train/gradients/dense_layer_1/dense_layer_1_1/Tensordot/Reshape_grad/Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_1/Tensordot/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1/Tensordot/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "dense_layer_1/dense_layer_1_1/Tensordot/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_1/Tensordot/transpose_1_grad/transpose"
  op: "Transpose"
  input: "train/gradients/dense_layer_1/dense_layer_1_1/Tensordot/Reshape_1_grad/Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_1/Tensordot/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_1_grad/Shape"
  op: "Shape"
  input: "dense_layer_1/dense_layer_1_0_dropout/dropout/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_1_grad/Shape_1"
  op: "Shape"
  input: "dense_layer_1/dense_layer_1_0_dropout/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_1_grad/Shape"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_1_grad/Mul"
  op: "Mul"
  input: "train/gradients/dense_layer_1/dense_layer_1_1/Tensordot/transpose_grad/transpose"
  input: "dense_layer_1/dense_layer_1_0_dropout/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_1_grad/Sum"
  op: "Sum"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_1_grad/Mul"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_1_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_1_grad/Sum"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_1_grad/Mul_1"
  op: "Mul"
  input: "dense_layer_1/dense_layer_1_0_dropout/dropout/mul"
  input: "train/gradients/dense_layer_1/dense_layer_1_1/Tensordot/transpose_grad/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_1_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_1_grad/Mul_1"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_1_grad/Sum_1"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_1_grad/Reshape"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_1_grad/Reshape_1"
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_1_grad/Reshape"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_1_grad/Reshape_1"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/AddN_15"
  op: "AddN"
  input: "train/gradients/loss/L2Loss_1_grad/mul"
  input: "train/gradients/dense_layer_1/dense_layer_1_1/Tensordot/transpose_1_grad/transpose"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/loss/L2Loss_1_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_grad/Shape"
  op: "Shape"
  input: "dense_layer_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_grad/Shape"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_grad/Mul"
  op: "Mul"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_1_grad/tuple/control_dependency"
  input: "dense_layer_1/dense_layer_1_0_dropout/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_grad/Sum"
  op: "Sum"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_grad/Mul"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_grad/Sum"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_grad/Mul_1"
  op: "Mul"
  input: "dense_layer_1/Relu"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_grad/Mul_1"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_grad/Sum_1"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_grad/Reshape"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_grad/Reshape_1"
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_grad/Reshape"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_grad/Reshape_1"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_dropout/dropout/mul_grad/tuple/control_dependency"
  input: "dense_layer_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_1_grad/Shape"
  op: "Shape"
  input: "dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 400
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_1_grad/Shape"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_1_grad/Sum"
  op: "Sum"
  input: "train/gradients/dense_layer_1/Relu_grad/ReluGrad"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_1_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_1_grad/Sum"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_1_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/dense_layer_1/Relu_grad/ReluGrad"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_1_grad/Sum_1"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_1_grad/Reshape"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_1_grad/Reshape_1"
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_1_grad/Reshape"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_1_grad/Reshape_1"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_1_grad/Shape"
  op: "Shape"
  input: "dense_layer_1/dense_layer_1_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 400
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_1_grad/Shape"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_1_grad/Mul"
  op: "Mul"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_1_grad/tuple/control_dependency"
  input: "dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_1_grad/Sum"
  op: "Sum"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_1_grad/Mul"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_1_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_1_grad/Sum"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_1_grad/Mul_1"
  op: "Mul"
  input: "dense_layer_1/dense_layer_1_0/BiasAdd"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_1_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_1_grad/Mul_1"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_1_grad/Sum_1"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_1_grad/Reshape"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_1_grad/Reshape_1"
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_1_grad/Reshape"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_1_grad/Reshape_1"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/sub_grad/Neg"
  op: "Neg"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_1_grad/tuple/control_dependency_1"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/sub_grad/Neg"
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_1_grad/tuple/control_dependency_1"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/sub_grad/Neg"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/sub_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_2_grad/Mul"
  op: "Mul"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/sub_grad/tuple/control_dependency_1"
  input: "dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_2_grad/Mul_1"
  op: "Mul"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/sub_grad/tuple/control_dependency_1"
  input: "dense_layer_1/dense_layer_1_0_batch_norm/moments/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_2_grad/Mul"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_2_grad/Mul_1"
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_2_grad/Mul"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_2_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_2_grad/Mul_1"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_2_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/Squeeze_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\220\001\000\000"
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_2_grad/tuple/control_dependency"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/AddN_16"
  op: "AddN"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_1_grad/tuple/control_dependency_1"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_grad/Mul"
  op: "Mul"
  input: "train/gradients/AddN_16"
  input: "dense_layer_1_0_batch_norm/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_grad/Mul_1"
  op: "Mul"
  input: "train/gradients/AddN_16"
  input: "dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_grad/Mul"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_grad/Mul_1"
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_grad/Mul"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_grad/Mul_1"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/Rsqrt_grad/RsqrtGrad"
  op: "RsqrtGrad"
  input: "dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/Rsqrt"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 400
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_grad/Shape"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_grad/Sum"
  op: "Sum"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/Rsqrt_grad/RsqrtGrad"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_grad/Sum"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/Rsqrt_grad/RsqrtGrad"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_grad/Sum_1"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_grad/Reshape"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_grad/Reshape_1"
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_grad/Reshape"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_grad/Reshape_1"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/Squeeze_1_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\220\001\000\000"
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/Squeeze_1_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/add_grad/tuple/control_dependency"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/Squeeze_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Shape"
  op: "Shape"
  input: "dense_layer_1/dense_layer_1_0_batch_norm/moments/SquaredDifference"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/add"
  op: "Add"
  input: "dense_layer_1/dense_layer_1_0_batch_norm/moments/variance/reduction_indices"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/mod"
  op: "FloorMod"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/add"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/range"
  op: "Range"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/range/start"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Size"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Fill"
  op: "Fill"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Shape_1"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/range"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/mod"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Shape"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Maximum"
  op: "Maximum"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/DynamicStitch"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/floordiv"
  op: "FloorDiv"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Shape"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/Squeeze_1_grad/Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Tile"
  op: "Tile"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Shape_2"
  op: "Shape"
  input: "dense_layer_1/dense_layer_1_0_batch_norm/moments/SquaredDifference"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Shape_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\220\001\000\000"
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Prod"
  op: "Prod"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Shape_2"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Prod_1"
  op: "Prod"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Shape_3"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Maximum_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Maximum_1"
  op: "Maximum"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Prod_1"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/floordiv_1"
  op: "FloorDiv"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Prod"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Cast"
  op: "Cast"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/truediv"
  op: "RealDiv"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Tile"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/SquaredDifference_grad/Shape"
  op: "Shape"
  input: "dense_layer_1/dense_layer_1_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/SquaredDifference_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\220\001\000\000"
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/SquaredDifference_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/SquaredDifference_grad/Shape"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/SquaredDifference_grad/scalar"
  op: "Const"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/truediv"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/SquaredDifference_grad/Mul"
  op: "Mul"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/SquaredDifference_grad/scalar"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/SquaredDifference_grad/sub"
  op: "Sub"
  input: "dense_layer_1/dense_layer_1_0/BiasAdd"
  input: "dense_layer_1/dense_layer_1_0_batch_norm/moments/StopGradient"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/variance_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/SquaredDifference_grad/mul_1"
  op: "Mul"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/SquaredDifference_grad/Mul"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/SquaredDifference_grad/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/SquaredDifference_grad/Sum"
  op: "Sum"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/SquaredDifference_grad/mul_1"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/SquaredDifference_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/SquaredDifference_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/SquaredDifference_grad/Sum"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/SquaredDifference_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/SquaredDifference_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/SquaredDifference_grad/mul_1"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/SquaredDifference_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/SquaredDifference_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/SquaredDifference_grad/Sum_1"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/SquaredDifference_grad/Neg"
  op: "Neg"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/SquaredDifference_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/SquaredDifference_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/SquaredDifference_grad/Neg"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/SquaredDifference_grad/Reshape"
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/SquaredDifference_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/SquaredDifference_grad/Reshape"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/SquaredDifference_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/SquaredDifference_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/SquaredDifference_grad/Neg"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/SquaredDifference_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Shape"
  op: "Shape"
  input: "dense_layer_1/dense_layer_1_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/add"
  op: "Add"
  input: "dense_layer_1/dense_layer_1_0_batch_norm/moments/mean/reduction_indices"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/mod"
  op: "FloorMod"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/add"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/range"
  op: "Range"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/range/start"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Size"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Fill"
  op: "Fill"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Shape_1"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/range"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/mod"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Shape"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Maximum"
  op: "Maximum"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/DynamicStitch"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/floordiv"
  op: "FloorDiv"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Shape"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/Squeeze_grad/Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Tile"
  op: "Tile"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Shape_2"
  op: "Shape"
  input: "dense_layer_1/dense_layer_1_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Shape_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\220\001\000\000"
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Prod"
  op: "Prod"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Shape_2"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Prod_1"
  op: "Prod"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Shape_3"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Maximum_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Maximum_1"
  op: "Maximum"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Prod_1"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/floordiv_1"
  op: "FloorDiv"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Prod"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Cast"
  op: "Cast"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/truediv"
  op: "RealDiv"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Tile"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/AddN_17"
  op: "AddN"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_1_grad/tuple/control_dependency"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/SquaredDifference_grad/tuple/control_dependency"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/moments/mean_grad/truediv"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "train/gradients/AddN_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/AddN_17"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/AddN_17"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/dense_layer_1/dense_layer_1_0/BiasAdd_grad/BiasAddGrad"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0/Tensordot_grad/Shape"
  op: "Shape"
  input: "dense_layer_1/dense_layer_1_0/Tensordot/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0/Tensordot_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_0/BiasAdd_grad/tuple/control_dependency"
  input: "train/gradients/dense_layer_1/dense_layer_1_0/Tensordot_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0/Tensordot/MatMul_grad/MatMul"
  op: "MatMul"
  input: "train/gradients/dense_layer_1/dense_layer_1_0/Tensordot_grad/Reshape"
  input: "dense_layer_1/dense_layer_1_0/Tensordot/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 494
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0/Tensordot/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dense_layer_1/dense_layer_1_0/Tensordot/Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_0/Tensordot_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0/Tensordot/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0/Tensordot/MatMul_grad/MatMul"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0/Tensordot/MatMul_grad/MatMul_1"
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0/Tensordot/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/dense_layer_1/dense_layer_1_0/Tensordot/MatMul_grad/MatMul"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0/Tensordot/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0/Tensordot/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 494
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0/Tensordot/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/dense_layer_1/dense_layer_1_0/Tensordot/MatMul_grad/MatMul_1"
  input: "^train/gradients/dense_layer_1/dense_layer_1_0/Tensordot/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_layer_1/dense_layer_1_0/Tensordot/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 494
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0/Tensordot/Reshape_1_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\356\001\000\000\220\001\000\000"
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0/Tensordot/Reshape_1_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_0/Tensordot/MatMul_grad/tuple/control_dependency_1"
  input: "train/gradients/dense_layer_1/dense_layer_1_0/Tensordot/Reshape_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 494
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0/Tensordot/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "dense_layer_1/dense_layer_1_0/Tensordot/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/dense_layer_1/dense_layer_1_0/Tensordot/transpose_1_grad/transpose"
  op: "Transpose"
  input: "train/gradients/dense_layer_1/dense_layer_1_0/Tensordot/Reshape_1_grad/Reshape"
  input: "train/gradients/dense_layer_1/dense_layer_1_0/Tensordot/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 494
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/AddN_18"
  op: "AddN"
  input: "train/gradients/loss/L2Loss_grad/mul"
  input: "train/gradients/dense_layer_1/dense_layer_1_0/Tensordot/transpose_1_grad/transpose"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/loss/L2Loss_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 494
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "train/beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "train/beta1_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/beta1_power/Assign"
  op: "Assign"
  input: "train/beta1_power"
  input: "train/beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train/beta1_power/read"
  op: "Identity"
  input: "train/beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "train/beta2_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/beta2_power/Assign"
  op: "Assign"
  input: "train/beta2_power"
  input: "train/beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train/beta2_power/read"
  op: "Identity"
  input: "train/beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense_layer_1_0/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\356\001\000\000\220\001\000\000"
      }
    }
  }
}
node {
  name: "dense_layer_1_0/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_layer_1_0/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "dense_layer_1_0/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "dense_layer_1_0/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 494
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense_layer_1_0/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 494
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 494
        }
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_layer_1_0/kernel/Adam/Assign"
  op: "Assign"
  input: "dense_layer_1_0/kernel/Adam"
  input: "dense_layer_1_0/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 494
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_layer_1_0/kernel/Adam/read"
  op: "Identity"
  input: "dense_layer_1_0/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 494
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1_0/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\356\001\000\000\220\001\000\000"
      }
    }
  }
}
node {
  name: "dense_layer_1_0/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_layer_1_0/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "dense_layer_1_0/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "dense_layer_1_0/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 494
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense_layer_1_0/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 494
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 494
        }
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_layer_1_0/kernel/Adam_1/Assign"
  op: "Assign"
  input: "dense_layer_1_0/kernel/Adam_1"
  input: "dense_layer_1_0/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 494
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_layer_1_0/kernel/Adam_1/read"
  op: "Identity"
  input: "dense_layer_1_0/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 494
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1_0/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 400
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_layer_1_0/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_layer_1_0/bias/Adam/Assign"
  op: "Assign"
  input: "dense_layer_1_0/bias/Adam"
  input: "dense_layer_1_0/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_layer_1_0/bias/Adam/read"
  op: "Identity"
  input: "dense_layer_1_0/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1_0/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 400
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_layer_1_0/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_layer_1_0/bias/Adam_1/Assign"
  op: "Assign"
  input: "dense_layer_1_0/bias/Adam_1"
  input: "dense_layer_1_0/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_layer_1_0/bias/Adam_1/read"
  op: "Identity"
  input: "dense_layer_1_0/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1_0_batch_norm/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 400
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_layer_1_0_batch_norm/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_layer_1_0_batch_norm/gamma/Adam/Assign"
  op: "Assign"
  input: "dense_layer_1_0_batch_norm/gamma/Adam"
  input: "dense_layer_1_0_batch_norm/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_layer_1_0_batch_norm/gamma/Adam/read"
  op: "Identity"
  input: "dense_layer_1_0_batch_norm/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1_0_batch_norm/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 400
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_layer_1_0_batch_norm/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_layer_1_0_batch_norm/gamma/Adam_1/Assign"
  op: "Assign"
  input: "dense_layer_1_0_batch_norm/gamma/Adam_1"
  input: "dense_layer_1_0_batch_norm/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_layer_1_0_batch_norm/gamma/Adam_1/read"
  op: "Identity"
  input: "dense_layer_1_0_batch_norm/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1_0_batch_norm/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 400
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_layer_1_0_batch_norm/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_layer_1_0_batch_norm/beta/Adam/Assign"
  op: "Assign"
  input: "dense_layer_1_0_batch_norm/beta/Adam"
  input: "dense_layer_1_0_batch_norm/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_layer_1_0_batch_norm/beta/Adam/read"
  op: "Identity"
  input: "dense_layer_1_0_batch_norm/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1_0_batch_norm/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 400
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_layer_1_0_batch_norm/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_layer_1_0_batch_norm/beta/Adam_1/Assign"
  op: "Assign"
  input: "dense_layer_1_0_batch_norm/beta/Adam_1"
  input: "dense_layer_1_0_batch_norm/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_layer_1_0_batch_norm/beta/Adam_1/read"
  op: "Identity"
  input: "dense_layer_1_0_batch_norm/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1_1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\220\001\000\000\220\001\000\000"
      }
    }
  }
}
node {
  name: "dense_layer_1_1/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_layer_1_1/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "dense_layer_1_1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "dense_layer_1_1/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense_layer_1_1/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_layer_1_1/kernel/Adam/Assign"
  op: "Assign"
  input: "dense_layer_1_1/kernel/Adam"
  input: "dense_layer_1_1/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_layer_1_1/kernel/Adam/read"
  op: "Identity"
  input: "dense_layer_1_1/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1_1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\220\001\000\000\220\001\000\000"
      }
    }
  }
}
node {
  name: "dense_layer_1_1/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_layer_1_1/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "dense_layer_1_1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "dense_layer_1_1/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense_layer_1_1/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_layer_1_1/kernel/Adam_1/Assign"
  op: "Assign"
  input: "dense_layer_1_1/kernel/Adam_1"
  input: "dense_layer_1_1/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_layer_1_1/kernel/Adam_1/read"
  op: "Identity"
  input: "dense_layer_1_1/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1_1/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 400
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_layer_1_1/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_layer_1_1/bias/Adam/Assign"
  op: "Assign"
  input: "dense_layer_1_1/bias/Adam"
  input: "dense_layer_1_1/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_layer_1_1/bias/Adam/read"
  op: "Identity"
  input: "dense_layer_1_1/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1_1/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 400
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_layer_1_1/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_layer_1_1/bias/Adam_1/Assign"
  op: "Assign"
  input: "dense_layer_1_1/bias/Adam_1"
  input: "dense_layer_1_1/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_layer_1_1/bias/Adam_1/read"
  op: "Identity"
  input: "dense_layer_1_1/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1_1_batch_norm/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 400
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_layer_1_1_batch_norm/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_layer_1_1_batch_norm/gamma/Adam/Assign"
  op: "Assign"
  input: "dense_layer_1_1_batch_norm/gamma/Adam"
  input: "dense_layer_1_1_batch_norm/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_layer_1_1_batch_norm/gamma/Adam/read"
  op: "Identity"
  input: "dense_layer_1_1_batch_norm/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1_1_batch_norm/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 400
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_layer_1_1_batch_norm/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_layer_1_1_batch_norm/gamma/Adam_1/Assign"
  op: "Assign"
  input: "dense_layer_1_1_batch_norm/gamma/Adam_1"
  input: "dense_layer_1_1_batch_norm/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_layer_1_1_batch_norm/gamma/Adam_1/read"
  op: "Identity"
  input: "dense_layer_1_1_batch_norm/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1_1_batch_norm/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 400
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_layer_1_1_batch_norm/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_layer_1_1_batch_norm/beta/Adam/Assign"
  op: "Assign"
  input: "dense_layer_1_1_batch_norm/beta/Adam"
  input: "dense_layer_1_1_batch_norm/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_layer_1_1_batch_norm/beta/Adam/read"
  op: "Identity"
  input: "dense_layer_1_1_batch_norm/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "dense_layer_1_1_batch_norm/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 400
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_layer_1_1_batch_norm/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_layer_1_1_batch_norm/beta/Adam_1/Assign"
  op: "Assign"
  input: "dense_layer_1_1_batch_norm/beta/Adam_1"
  input: "dense_layer_1_1_batch_norm/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_layer_1_1_batch_norm/beta/Adam_1/read"
  op: "Identity"
  input: "dense_layer_1_1_batch_norm/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/lstm_cell/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\220\003\000\000\000\010\000\000"
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/lstm_cell/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/lstm_cell/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "listener/listener_0/fw/lstm_cell/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "listener/listener_0/fw/lstm_cell/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "listener/listener_0/fw/lstm_cell/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 912
        }
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "listener/listener_0/fw/lstm_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "listener/listener_0/fw/lstm_cell/kernel/Adam"
  input: "listener/listener_0/fw/lstm_cell/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "listener/listener_0/fw/lstm_cell/kernel/Adam/read"
  op: "Identity"
  input: "listener/listener_0/fw/lstm_cell/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/lstm_cell/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\220\003\000\000\000\010\000\000"
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/lstm_cell/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/lstm_cell/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "listener/listener_0/fw/lstm_cell/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "listener/listener_0/fw/lstm_cell/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "listener/listener_0/fw/lstm_cell/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 912
        }
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "listener/listener_0/fw/lstm_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "listener/listener_0/fw/lstm_cell/kernel/Adam_1"
  input: "listener/listener_0/fw/lstm_cell/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "listener/listener_0/fw/lstm_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "listener/listener_0/fw/lstm_cell/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/lstm_cell/bias/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2048
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/lstm_cell/bias/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/lstm_cell/bias/Adam/Initializer/zeros"
  op: "Fill"
  input: "listener/listener_0/fw/lstm_cell/bias/Adam/Initializer/zeros/shape_as_tensor"
  input: "listener/listener_0/fw/lstm_cell/bias/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "listener/listener_0/fw/lstm_cell/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "listener/listener_0/fw/lstm_cell/bias/Adam/Assign"
  op: "Assign"
  input: "listener/listener_0/fw/lstm_cell/bias/Adam"
  input: "listener/listener_0/fw/lstm_cell/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "listener/listener_0/fw/lstm_cell/bias/Adam/read"
  op: "Identity"
  input: "listener/listener_0/fw/lstm_cell/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/lstm_cell/bias/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2048
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/lstm_cell/bias/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "listener/listener_0/fw/lstm_cell/bias/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "listener/listener_0/fw/lstm_cell/bias/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "listener/listener_0/fw/lstm_cell/bias/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "listener/listener_0/fw/lstm_cell/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "listener/listener_0/fw/lstm_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "listener/listener_0/fw/lstm_cell/bias/Adam_1"
  input: "listener/listener_0/fw/lstm_cell/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "listener/listener_0/fw/lstm_cell/bias/Adam_1/read"
  op: "Identity"
  input: "listener/listener_0/fw/lstm_cell/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/lstm_cell/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\220\003\000\000\000\010\000\000"
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/lstm_cell/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/lstm_cell/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "listener/listener_0/bw/lstm_cell/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "listener/listener_0/bw/lstm_cell/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "listener/listener_0/bw/lstm_cell/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 912
        }
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "listener/listener_0/bw/lstm_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "listener/listener_0/bw/lstm_cell/kernel/Adam"
  input: "listener/listener_0/bw/lstm_cell/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "listener/listener_0/bw/lstm_cell/kernel/Adam/read"
  op: "Identity"
  input: "listener/listener_0/bw/lstm_cell/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/lstm_cell/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\220\003\000\000\000\010\000\000"
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/lstm_cell/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/lstm_cell/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "listener/listener_0/bw/lstm_cell/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "listener/listener_0/bw/lstm_cell/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "listener/listener_0/bw/lstm_cell/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 912
        }
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "listener/listener_0/bw/lstm_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "listener/listener_0/bw/lstm_cell/kernel/Adam_1"
  input: "listener/listener_0/bw/lstm_cell/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "listener/listener_0/bw/lstm_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "listener/listener_0/bw/lstm_cell/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/lstm_cell/bias/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2048
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/lstm_cell/bias/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/lstm_cell/bias/Adam/Initializer/zeros"
  op: "Fill"
  input: "listener/listener_0/bw/lstm_cell/bias/Adam/Initializer/zeros/shape_as_tensor"
  input: "listener/listener_0/bw/lstm_cell/bias/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "listener/listener_0/bw/lstm_cell/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "listener/listener_0/bw/lstm_cell/bias/Adam/Assign"
  op: "Assign"
  input: "listener/listener_0/bw/lstm_cell/bias/Adam"
  input: "listener/listener_0/bw/lstm_cell/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "listener/listener_0/bw/lstm_cell/bias/Adam/read"
  op: "Identity"
  input: "listener/listener_0/bw/lstm_cell/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/lstm_cell/bias/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2048
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/lstm_cell/bias/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "listener/listener_0/bw/lstm_cell/bias/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "listener/listener_0/bw/lstm_cell/bias/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "listener/listener_0/bw/lstm_cell/bias/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "listener/listener_0/bw/lstm_cell/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "listener/listener_0/bw/lstm_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "listener/listener_0/bw/lstm_cell/bias/Adam_1"
  input: "listener/listener_0/bw/lstm_cell/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "listener/listener_0/bw/lstm_cell/bias/Adam_1/read"
  op: "Identity"
  input: "listener/listener_0/bw/lstm_cell/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "attention/memory_layer/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\010\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "attention/memory_layer/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "attention/memory_layer/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "attention/memory_layer/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "attention/memory_layer/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "attention/memory_layer/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2048
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "attention/memory_layer/kernel/Adam/Assign"
  op: "Assign"
  input: "attention/memory_layer/kernel/Adam"
  input: "attention/memory_layer/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "attention/memory_layer/kernel/Adam/read"
  op: "Identity"
  input: "attention/memory_layer/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "attention/memory_layer/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\010\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "attention/memory_layer/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "attention/memory_layer/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "attention/memory_layer/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "attention/memory_layer/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "attention/memory_layer/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2048
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "attention/memory_layer/kernel/Adam_1/Assign"
  op: "Assign"
  input: "attention/memory_layer/kernel/Adam_1"
  input: "attention/memory_layer/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "attention/memory_layer/kernel/Adam_1/read"
  op: "Identity"
  input: "attention/memory_layer/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\036\n\000\000\000\010\000\000"
      }
    }
  }
}
node {
  name: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2590
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2590
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2590
        }
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2590
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/read"
  op: "Identity"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2590
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\036\n\000\000\000\010\000\000"
      }
    }
  }
}
node {
  name: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2590
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2590
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2590
        }
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2590
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2590
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2048
      }
    }
  }
}
node {
  name: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/Initializer/zeros"
  op: "Fill"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/Initializer/zeros/shape_as_tensor"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/Assign"
  op: "Assign"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/read"
  op: "Identity"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2048
      }
    }
  }
}
node {
  name: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/read"
  op: "Identity"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/projection_layer/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\010\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "speller/decoder/projection_layer/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "speller/decoder/projection_layer/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "speller/decoder/projection_layer/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "speller/decoder/projection_layer/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speller/decoder/projection_layer/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2048
        }
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "speller/decoder/projection_layer/kernel/Adam/Assign"
  op: "Assign"
  input: "speller/decoder/projection_layer/kernel/Adam"
  input: "speller/decoder/projection_layer/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "speller/decoder/projection_layer/kernel/Adam/read"
  op: "Identity"
  input: "speller/decoder/projection_layer/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/projection_layer/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\010\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "speller/decoder/projection_layer/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "speller/decoder/projection_layer/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "speller/decoder/projection_layer/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "speller/decoder/projection_layer/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speller/decoder/projection_layer/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2048
        }
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "speller/decoder/projection_layer/kernel/Adam_1/Assign"
  op: "Assign"
  input: "speller/decoder/projection_layer/kernel/Adam_1"
  input: "speller/decoder/projection_layer/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "speller/decoder/projection_layer/kernel/Adam_1/read"
  op: "Identity"
  input: "speller/decoder/projection_layer/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/projection_layer/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "speller/decoder/projection_layer/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "speller/decoder/projection_layer/bias/Adam/Assign"
  op: "Assign"
  input: "speller/decoder/projection_layer/bias/Adam"
  input: "speller/decoder/projection_layer/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "speller/decoder/projection_layer/bias/Adam/read"
  op: "Identity"
  input: "speller/decoder/projection_layer/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "speller/decoder/projection_layer/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "speller/decoder/projection_layer/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "speller/decoder/projection_layer/bias/Adam_1/Assign"
  op: "Assign"
  input: "speller/decoder/projection_layer/bias/Adam_1"
  input: "speller/decoder/projection_layer/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "speller/decoder/projection_layer/bias/Adam_1/read"
  op: "Identity"
  input: "speller/decoder/projection_layer/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "train/Adam/beta1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "train/Adam/beta2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "train/Adam/epsilon"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "train/Adam/update_dense_layer_1_0/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "dense_layer_1_0/kernel"
  input: "dense_layer_1_0/kernel/Adam"
  input: "dense_layer_1_0/kernel/Adam_1"
  input: "train/beta1_power/read"
  input: "train/beta2_power/read"
  input: "train/ExponentialDecay"
  input: "train/Adam/beta1"
  input: "train/Adam/beta2"
  input: "train/Adam/epsilon"
  input: "train/gradients/AddN_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 494
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train/Adam/update_dense_layer_1_0/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "dense_layer_1_0/bias"
  input: "dense_layer_1_0/bias/Adam"
  input: "dense_layer_1_0/bias/Adam_1"
  input: "train/beta1_power/read"
  input: "train/beta2_power/read"
  input: "train/ExponentialDecay"
  input: "train/Adam/beta1"
  input: "train/Adam/beta2"
  input: "train/Adam/epsilon"
  input: "train/gradients/dense_layer_1/dense_layer_1_0/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train/Adam/update_dense_layer_1_0_batch_norm/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "dense_layer_1_0_batch_norm/gamma"
  input: "dense_layer_1_0_batch_norm/gamma/Adam"
  input: "dense_layer_1_0_batch_norm/gamma/Adam_1"
  input: "train/beta1_power/read"
  input: "train/beta2_power/read"
  input: "train/ExponentialDecay"
  input: "train/Adam/beta1"
  input: "train/Adam/beta2"
  input: "train/Adam/epsilon"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train/Adam/update_dense_layer_1_0_batch_norm/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "dense_layer_1_0_batch_norm/beta"
  input: "dense_layer_1_0_batch_norm/beta/Adam"
  input: "dense_layer_1_0_batch_norm/beta/Adam_1"
  input: "train/beta1_power/read"
  input: "train/beta2_power/read"
  input: "train/ExponentialDecay"
  input: "train/Adam/beta1"
  input: "train/Adam/beta2"
  input: "train/Adam/epsilon"
  input: "train/gradients/dense_layer_1/dense_layer_1_0_batch_norm/batchnorm/sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train/Adam/update_dense_layer_1_1/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "dense_layer_1_1/kernel"
  input: "dense_layer_1_1/kernel/Adam"
  input: "dense_layer_1_1/kernel/Adam_1"
  input: "train/beta1_power/read"
  input: "train/beta2_power/read"
  input: "train/ExponentialDecay"
  input: "train/Adam/beta1"
  input: "train/Adam/beta2"
  input: "train/Adam/epsilon"
  input: "train/gradients/AddN_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train/Adam/update_dense_layer_1_1/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "dense_layer_1_1/bias"
  input: "dense_layer_1_1/bias/Adam"
  input: "dense_layer_1_1/bias/Adam_1"
  input: "train/beta1_power/read"
  input: "train/beta2_power/read"
  input: "train/ExponentialDecay"
  input: "train/Adam/beta1"
  input: "train/Adam/beta2"
  input: "train/Adam/epsilon"
  input: "train/gradients/dense_layer_1/dense_layer_1_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train/Adam/update_dense_layer_1_1_batch_norm/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "dense_layer_1_1_batch_norm/gamma"
  input: "dense_layer_1_1_batch_norm/gamma/Adam"
  input: "dense_layer_1_1_batch_norm/gamma/Adam_1"
  input: "train/beta1_power/read"
  input: "train/beta2_power/read"
  input: "train/ExponentialDecay"
  input: "train/Adam/beta1"
  input: "train/Adam/beta2"
  input: "train/Adam/epsilon"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train/Adam/update_dense_layer_1_1_batch_norm/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "dense_layer_1_1_batch_norm/beta"
  input: "dense_layer_1_1_batch_norm/beta/Adam"
  input: "dense_layer_1_1_batch_norm/beta/Adam_1"
  input: "train/beta1_power/read"
  input: "train/beta2_power/read"
  input: "train/ExponentialDecay"
  input: "train/Adam/beta1"
  input: "train/Adam/beta2"
  input: "train/Adam/epsilon"
  input: "train/gradients/dense_layer_1/dense_layer_1_1_batch_norm/batchnorm/sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train/Adam/update_listener/listener_0/fw/lstm_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "listener/listener_0/fw/lstm_cell/kernel"
  input: "listener/listener_0/fw/lstm_cell/kernel/Adam"
  input: "listener/listener_0/fw/lstm_cell/kernel/Adam_1"
  input: "train/beta1_power/read"
  input: "train/beta2_power/read"
  input: "train/ExponentialDecay"
  input: "train/Adam/beta1"
  input: "train/Adam/beta2"
  input: "train/Adam/epsilon"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train/Adam/update_listener/listener_0/fw/lstm_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "listener/listener_0/fw/lstm_cell/bias"
  input: "listener/listener_0/fw/lstm_cell/bias/Adam"
  input: "listener/listener_0/fw/lstm_cell/bias/Adam_1"
  input: "train/beta1_power/read"
  input: "train/beta2_power/read"
  input: "train/ExponentialDecay"
  input: "train/Adam/beta1"
  input: "train/Adam/beta2"
  input: "train/Adam/epsilon"
  input: "train/gradients/listener/listener_0/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train/Adam/update_listener/listener_0/bw/lstm_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "listener/listener_0/bw/lstm_cell/kernel"
  input: "listener/listener_0/bw/lstm_cell/kernel/Adam"
  input: "listener/listener_0/bw/lstm_cell/kernel/Adam_1"
  input: "train/beta1_power/read"
  input: "train/beta2_power/read"
  input: "train/ExponentialDecay"
  input: "train/Adam/beta1"
  input: "train/Adam/beta2"
  input: "train/Adam/epsilon"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train/Adam/update_listener/listener_0/bw/lstm_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "listener/listener_0/bw/lstm_cell/bias"
  input: "listener/listener_0/bw/lstm_cell/bias/Adam"
  input: "listener/listener_0/bw/lstm_cell/bias/Adam_1"
  input: "train/beta1_power/read"
  input: "train/beta2_power/read"
  input: "train/ExponentialDecay"
  input: "train/Adam/beta1"
  input: "train/Adam/beta2"
  input: "train/Adam/epsilon"
  input: "train/gradients/listener/listener_0/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train/Adam/update_attention/memory_layer/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "attention/memory_layer/kernel"
  input: "attention/memory_layer/kernel/Adam"
  input: "attention/memory_layer/kernel/Adam_1"
  input: "train/beta1_power/read"
  input: "train/beta2_power/read"
  input: "train/ExponentialDecay"
  input: "train/Adam/beta1"
  input: "train/Adam/beta2"
  input: "train/Adam/epsilon"
  input: "train/gradients/attention/LuongAttention/memory_layer/Tensordot/transpose_1_grad/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train/Adam/update_speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  input: "train/beta1_power/read"
  input: "train/beta2_power/read"
  input: "train/ExponentialDecay"
  input: "train/Adam/beta1"
  input: "train/Adam/beta2"
  input: "train/Adam/epsilon"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2590
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train/Adam/update_speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  input: "train/beta1_power/read"
  input: "train/beta2_power/read"
  input: "train/ExponentialDecay"
  input: "train/Adam/beta1"
  input: "train/Adam/beta2"
  input: "train/Adam/epsilon"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/decoder/attention_wrapper/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train/Adam/update_speller/decoder/projection_layer/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "speller/decoder/projection_layer/kernel"
  input: "speller/decoder/projection_layer/kernel/Adam"
  input: "speller/decoder/projection_layer/kernel/Adam_1"
  input: "train/beta1_power/read"
  input: "train/beta2_power/read"
  input: "train/ExponentialDecay"
  input: "train/Adam/beta1"
  input: "train/Adam/beta2"
  input: "train/Adam/epsilon"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train/Adam/update_speller/decoder/projection_layer/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "speller/decoder/projection_layer/bias"
  input: "speller/decoder/projection_layer/bias/Adam"
  input: "speller/decoder/projection_layer/bias/Adam_1"
  input: "train/beta1_power/read"
  input: "train/beta2_power/read"
  input: "train/ExponentialDecay"
  input: "train/Adam/beta1"
  input: "train/Adam/beta2"
  input: "train/Adam/epsilon"
  input: "train/gradients/speller/decoder/while/BasicDecoderStep/projection_layer/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train/Adam/mul"
  op: "Mul"
  input: "train/beta1_power/read"
  input: "train/Adam/beta1"
  input: "^train/Adam/update_attention/memory_layer/kernel/ApplyAdam"
  input: "^train/Adam/update_dense_layer_1_0/bias/ApplyAdam"
  input: "^train/Adam/update_dense_layer_1_0/kernel/ApplyAdam"
  input: "^train/Adam/update_dense_layer_1_0_batch_norm/beta/ApplyAdam"
  input: "^train/Adam/update_dense_layer_1_0_batch_norm/gamma/ApplyAdam"
  input: "^train/Adam/update_dense_layer_1_1/bias/ApplyAdam"
  input: "^train/Adam/update_dense_layer_1_1/kernel/ApplyAdam"
  input: "^train/Adam/update_dense_layer_1_1_batch_norm/beta/ApplyAdam"
  input: "^train/Adam/update_dense_layer_1_1_batch_norm/gamma/ApplyAdam"
  input: "^train/Adam/update_listener/listener_0/bw/lstm_cell/bias/ApplyAdam"
  input: "^train/Adam/update_listener/listener_0/bw/lstm_cell/kernel/ApplyAdam"
  input: "^train/Adam/update_listener/listener_0/fw/lstm_cell/bias/ApplyAdam"
  input: "^train/Adam/update_listener/listener_0/fw/lstm_cell/kernel/ApplyAdam"
  input: "^train/Adam/update_speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/ApplyAdam"
  input: "^train/Adam/update_speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/ApplyAdam"
  input: "^train/Adam/update_speller/decoder/projection_layer/bias/ApplyAdam"
  input: "^train/Adam/update_speller/decoder/projection_layer/kernel/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/Adam/Assign"
  op: "Assign"
  input: "train/beta1_power"
  input: "train/Adam/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train/Adam/mul_1"
  op: "Mul"
  input: "train/beta2_power/read"
  input: "train/Adam/beta2"
  input: "^train/Adam/update_attention/memory_layer/kernel/ApplyAdam"
  input: "^train/Adam/update_dense_layer_1_0/bias/ApplyAdam"
  input: "^train/Adam/update_dense_layer_1_0/kernel/ApplyAdam"
  input: "^train/Adam/update_dense_layer_1_0_batch_norm/beta/ApplyAdam"
  input: "^train/Adam/update_dense_layer_1_0_batch_norm/gamma/ApplyAdam"
  input: "^train/Adam/update_dense_layer_1_1/bias/ApplyAdam"
  input: "^train/Adam/update_dense_layer_1_1/kernel/ApplyAdam"
  input: "^train/Adam/update_dense_layer_1_1_batch_norm/beta/ApplyAdam"
  input: "^train/Adam/update_dense_layer_1_1_batch_norm/gamma/ApplyAdam"
  input: "^train/Adam/update_listener/listener_0/bw/lstm_cell/bias/ApplyAdam"
  input: "^train/Adam/update_listener/listener_0/bw/lstm_cell/kernel/ApplyAdam"
  input: "^train/Adam/update_listener/listener_0/fw/lstm_cell/bias/ApplyAdam"
  input: "^train/Adam/update_listener/listener_0/fw/lstm_cell/kernel/ApplyAdam"
  input: "^train/Adam/update_speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/ApplyAdam"
  input: "^train/Adam/update_speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/ApplyAdam"
  input: "^train/Adam/update_speller/decoder/projection_layer/bias/ApplyAdam"
  input: "^train/Adam/update_speller/decoder/projection_layer/kernel/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train/Adam/Assign_1"
  op: "Assign"
  input: "train/beta2_power"
  input: "train/Adam/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train/Adam/update"
  op: "NoOp"
  input: "^train/Adam/Assign"
  input: "^train/Adam/Assign_1"
  input: "^train/Adam/update_attention/memory_layer/kernel/ApplyAdam"
  input: "^train/Adam/update_dense_layer_1_0/bias/ApplyAdam"
  input: "^train/Adam/update_dense_layer_1_0/kernel/ApplyAdam"
  input: "^train/Adam/update_dense_layer_1_0_batch_norm/beta/ApplyAdam"
  input: "^train/Adam/update_dense_layer_1_0_batch_norm/gamma/ApplyAdam"
  input: "^train/Adam/update_dense_layer_1_1/bias/ApplyAdam"
  input: "^train/Adam/update_dense_layer_1_1/kernel/ApplyAdam"
  input: "^train/Adam/update_dense_layer_1_1_batch_norm/beta/ApplyAdam"
  input: "^train/Adam/update_dense_layer_1_1_batch_norm/gamma/ApplyAdam"
  input: "^train/Adam/update_listener/listener_0/bw/lstm_cell/bias/ApplyAdam"
  input: "^train/Adam/update_listener/listener_0/bw/lstm_cell/kernel/ApplyAdam"
  input: "^train/Adam/update_listener/listener_0/fw/lstm_cell/bias/ApplyAdam"
  input: "^train/Adam/update_listener/listener_0/fw/lstm_cell/kernel/ApplyAdam"
  input: "^train/Adam/update_speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/ApplyAdam"
  input: "^train/Adam/update_speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/ApplyAdam"
  input: "^train/Adam/update_speller/decoder/projection_layer/bias/ApplyAdam"
  input: "^train/Adam/update_speller/decoder/projection_layer/kernel/ApplyAdam"
}
node {
  name: "train/Adam/value"
  op: "Const"
  input: "^train/Adam/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "train/Adam"
  op: "AssignAdd"
  input: "global_step"
  input: "train/Adam/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Rank"
  op: "Rank"
  input: "metrics/edit_distance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "range"
  op: "Range"
  input: "range/start"
  input: "Rank"
  input: "range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Mean"
  op: "Mean"
  input: "metrics/edit_distance"
  input: "range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Const_11"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Mean_1"
  op: "Mean"
  input: "train/ExponentialDecay"
  input: "Const_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss_1/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss_1"
      }
    }
  }
}
node {
  name: "loss_1"
  op: "ScalarSummary"
  input: "loss_1/tags"
  input: "train/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^attention/memory_layer/kernel/Adam/Assign"
  input: "^attention/memory_layer/kernel/Adam_1/Assign"
  input: "^attention/memory_layer/kernel/Assign"
  input: "^dense_layer_1_0/bias/Adam/Assign"
  input: "^dense_layer_1_0/bias/Adam_1/Assign"
  input: "^dense_layer_1_0/bias/Assign"
  input: "^dense_layer_1_0/kernel/Adam/Assign"
  input: "^dense_layer_1_0/kernel/Adam_1/Assign"
  input: "^dense_layer_1_0/kernel/Assign"
  input: "^dense_layer_1_0_batch_norm/beta/Adam/Assign"
  input: "^dense_layer_1_0_batch_norm/beta/Adam_1/Assign"
  input: "^dense_layer_1_0_batch_norm/beta/Assign"
  input: "^dense_layer_1_0_batch_norm/gamma/Adam/Assign"
  input: "^dense_layer_1_0_batch_norm/gamma/Adam_1/Assign"
  input: "^dense_layer_1_0_batch_norm/gamma/Assign"
  input: "^dense_layer_1_0_batch_norm/moving_mean/Assign"
  input: "^dense_layer_1_0_batch_norm/moving_variance/Assign"
  input: "^dense_layer_1_1/bias/Adam/Assign"
  input: "^dense_layer_1_1/bias/Adam_1/Assign"
  input: "^dense_layer_1_1/bias/Assign"
  input: "^dense_layer_1_1/kernel/Adam/Assign"
  input: "^dense_layer_1_1/kernel/Adam_1/Assign"
  input: "^dense_layer_1_1/kernel/Assign"
  input: "^dense_layer_1_1_batch_norm/beta/Adam/Assign"
  input: "^dense_layer_1_1_batch_norm/beta/Adam_1/Assign"
  input: "^dense_layer_1_1_batch_norm/beta/Assign"
  input: "^dense_layer_1_1_batch_norm/gamma/Adam/Assign"
  input: "^dense_layer_1_1_batch_norm/gamma/Adam_1/Assign"
  input: "^dense_layer_1_1_batch_norm/gamma/Assign"
  input: "^dense_layer_1_1_batch_norm/moving_mean/Assign"
  input: "^dense_layer_1_1_batch_norm/moving_variance/Assign"
  input: "^global_step/Assign"
  input: "^listener/listener_0/bw/lstm_cell/bias/Adam/Assign"
  input: "^listener/listener_0/bw/lstm_cell/bias/Adam_1/Assign"
  input: "^listener/listener_0/bw/lstm_cell/bias/Assign"
  input: "^listener/listener_0/bw/lstm_cell/kernel/Adam/Assign"
  input: "^listener/listener_0/bw/lstm_cell/kernel/Adam_1/Assign"
  input: "^listener/listener_0/bw/lstm_cell/kernel/Assign"
  input: "^listener/listener_0/fw/lstm_cell/bias/Adam/Assign"
  input: "^listener/listener_0/fw/lstm_cell/bias/Adam_1/Assign"
  input: "^listener/listener_0/fw/lstm_cell/bias/Assign"
  input: "^listener/listener_0/fw/lstm_cell/kernel/Adam/Assign"
  input: "^listener/listener_0/fw/lstm_cell/kernel/Adam_1/Assign"
  input: "^listener/listener_0/fw/lstm_cell/kernel/Assign"
  input: "^speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/Assign"
  input: "^speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/Assign"
  input: "^speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Assign"
  input: "^speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/Assign"
  input: "^speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/Assign"
  input: "^speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Assign"
  input: "^speller/decoder/projection_layer/bias/Adam/Assign"
  input: "^speller/decoder/projection_layer/bias/Adam_1/Assign"
  input: "^speller/decoder/projection_layer/bias/Assign"
  input: "^speller/decoder/projection_layer/kernel/Adam/Assign"
  input: "^speller/decoder/projection_layer/kernel/Adam_1/Assign"
  input: "^speller/decoder/projection_layer/kernel/Assign"
  input: "^train/beta1_power/Assign"
  input: "^train/beta2_power/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "dense_layer_1_0/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "dense_layer_1_0/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "dense_layer_1_0_batch_norm/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "dense_layer_1_0_batch_norm/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "dense_layer_1_0_batch_norm/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "dense_layer_1_0_batch_norm/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "dense_layer_1_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "dense_layer_1_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "dense_layer_1_1_batch_norm/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "dense_layer_1_1_batch_norm/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "dense_layer_1_1_batch_norm/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "dense_layer_1_1_batch_norm/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "listener/listener_0/fw/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "listener/listener_0/fw/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "listener/listener_0/bw/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "listener/listener_0/bw/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "attention/memory_layer/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "speller/decoder/projection_layer/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "speller/decoder/projection_layer/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "train/beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "train/beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "dense_layer_1_0/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "dense_layer_1_0/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "dense_layer_1_0/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "dense_layer_1_0/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "dense_layer_1_0_batch_norm/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "dense_layer_1_0_batch_norm/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "dense_layer_1_0_batch_norm/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "dense_layer_1_0_batch_norm/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "dense_layer_1_1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "dense_layer_1_1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "dense_layer_1_1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "dense_layer_1_1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "dense_layer_1_1_batch_norm/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "dense_layer_1_1_batch_norm/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "dense_layer_1_1_batch_norm/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "dense_layer_1_1_batch_norm/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_40"
  op: "IsVariableInitialized"
  input: "listener/listener_0/fw/lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_41"
  op: "IsVariableInitialized"
  input: "listener/listener_0/fw/lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_42"
  op: "IsVariableInitialized"
  input: "listener/listener_0/fw/lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_43"
  op: "IsVariableInitialized"
  input: "listener/listener_0/fw/lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_44"
  op: "IsVariableInitialized"
  input: "listener/listener_0/bw/lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_45"
  op: "IsVariableInitialized"
  input: "listener/listener_0/bw/lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_46"
  op: "IsVariableInitialized"
  input: "listener/listener_0/bw/lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_47"
  op: "IsVariableInitialized"
  input: "listener/listener_0/bw/lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_48"
  op: "IsVariableInitialized"
  input: "attention/memory_layer/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_49"
  op: "IsVariableInitialized"
  input: "attention/memory_layer/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_50"
  op: "IsVariableInitialized"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_51"
  op: "IsVariableInitialized"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_52"
  op: "IsVariableInitialized"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_53"
  op: "IsVariableInitialized"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_54"
  op: "IsVariableInitialized"
  input: "speller/decoder/projection_layer/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_55"
  op: "IsVariableInitialized"
  input: "speller/decoder/projection_layer/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_56"
  op: "IsVariableInitialized"
  input: "speller/decoder/projection_layer/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_57"
  op: "IsVariableInitialized"
  input: "speller/decoder/projection_layer/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_58"
  op: "IsVariableInitialized"
  input: "metrics/mean/total"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@metrics/mean/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_59"
  op: "IsVariableInitialized"
  input: "metrics/mean/count"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@metrics/mean/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/IsVariableInitialized_4"
  input: "report_uninitialized_variables/IsVariableInitialized_5"
  input: "report_uninitialized_variables/IsVariableInitialized_6"
  input: "report_uninitialized_variables/IsVariableInitialized_7"
  input: "report_uninitialized_variables/IsVariableInitialized_8"
  input: "report_uninitialized_variables/IsVariableInitialized_9"
  input: "report_uninitialized_variables/IsVariableInitialized_10"
  input: "report_uninitialized_variables/IsVariableInitialized_11"
  input: "report_uninitialized_variables/IsVariableInitialized_12"
  input: "report_uninitialized_variables/IsVariableInitialized_13"
  input: "report_uninitialized_variables/IsVariableInitialized_14"
  input: "report_uninitialized_variables/IsVariableInitialized_15"
  input: "report_uninitialized_variables/IsVariableInitialized_16"
  input: "report_uninitialized_variables/IsVariableInitialized_17"
  input: "report_uninitialized_variables/IsVariableInitialized_18"
  input: "report_uninitialized_variables/IsVariableInitialized_19"
  input: "report_uninitialized_variables/IsVariableInitialized_20"
  input: "report_uninitialized_variables/IsVariableInitialized_21"
  input: "report_uninitialized_variables/IsVariableInitialized_22"
  input: "report_uninitialized_variables/IsVariableInitialized_23"
  input: "report_uninitialized_variables/IsVariableInitialized_24"
  input: "report_uninitialized_variables/IsVariableInitialized_25"
  input: "report_uninitialized_variables/IsVariableInitialized_26"
  input: "report_uninitialized_variables/IsVariableInitialized_27"
  input: "report_uninitialized_variables/IsVariableInitialized_28"
  input: "report_uninitialized_variables/IsVariableInitialized_29"
  input: "report_uninitialized_variables/IsVariableInitialized_30"
  input: "report_uninitialized_variables/IsVariableInitialized_31"
  input: "report_uninitialized_variables/IsVariableInitialized_32"
  input: "report_uninitialized_variables/IsVariableInitialized_33"
  input: "report_uninitialized_variables/IsVariableInitialized_34"
  input: "report_uninitialized_variables/IsVariableInitialized_35"
  input: "report_uninitialized_variables/IsVariableInitialized_36"
  input: "report_uninitialized_variables/IsVariableInitialized_37"
  input: "report_uninitialized_variables/IsVariableInitialized_38"
  input: "report_uninitialized_variables/IsVariableInitialized_39"
  input: "report_uninitialized_variables/IsVariableInitialized_40"
  input: "report_uninitialized_variables/IsVariableInitialized_41"
  input: "report_uninitialized_variables/IsVariableInitialized_42"
  input: "report_uninitialized_variables/IsVariableInitialized_43"
  input: "report_uninitialized_variables/IsVariableInitialized_44"
  input: "report_uninitialized_variables/IsVariableInitialized_45"
  input: "report_uninitialized_variables/IsVariableInitialized_46"
  input: "report_uninitialized_variables/IsVariableInitialized_47"
  input: "report_uninitialized_variables/IsVariableInitialized_48"
  input: "report_uninitialized_variables/IsVariableInitialized_49"
  input: "report_uninitialized_variables/IsVariableInitialized_50"
  input: "report_uninitialized_variables/IsVariableInitialized_51"
  input: "report_uninitialized_variables/IsVariableInitialized_52"
  input: "report_uninitialized_variables/IsVariableInitialized_53"
  input: "report_uninitialized_variables/IsVariableInitialized_54"
  input: "report_uninitialized_variables/IsVariableInitialized_55"
  input: "report_uninitialized_variables/IsVariableInitialized_56"
  input: "report_uninitialized_variables/IsVariableInitialized_57"
  input: "report_uninitialized_variables/IsVariableInitialized_58"
  input: "report_uninitialized_variables/IsVariableInitialized_59"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 60
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 60
          }
        }
        string_val: "global_step"
        string_val: "dense_layer_1_0/kernel"
        string_val: "dense_layer_1_0/bias"
        string_val: "dense_layer_1_0_batch_norm/gamma"
        string_val: "dense_layer_1_0_batch_norm/beta"
        string_val: "dense_layer_1_0_batch_norm/moving_mean"
        string_val: "dense_layer_1_0_batch_norm/moving_variance"
        string_val: "dense_layer_1_1/kernel"
        string_val: "dense_layer_1_1/bias"
        string_val: "dense_layer_1_1_batch_norm/gamma"
        string_val: "dense_layer_1_1_batch_norm/beta"
        string_val: "dense_layer_1_1_batch_norm/moving_mean"
        string_val: "dense_layer_1_1_batch_norm/moving_variance"
        string_val: "listener/listener_0/fw/lstm_cell/kernel"
        string_val: "listener/listener_0/fw/lstm_cell/bias"
        string_val: "listener/listener_0/bw/lstm_cell/kernel"
        string_val: "listener/listener_0/bw/lstm_cell/bias"
        string_val: "attention/memory_layer/kernel"
        string_val: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel"
        string_val: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias"
        string_val: "speller/decoder/projection_layer/kernel"
        string_val: "speller/decoder/projection_layer/bias"
        string_val: "train/beta1_power"
        string_val: "train/beta2_power"
        string_val: "dense_layer_1_0/kernel/Adam"
        string_val: "dense_layer_1_0/kernel/Adam_1"
        string_val: "dense_layer_1_0/bias/Adam"
        string_val: "dense_layer_1_0/bias/Adam_1"
        string_val: "dense_layer_1_0_batch_norm/gamma/Adam"
        string_val: "dense_layer_1_0_batch_norm/gamma/Adam_1"
        string_val: "dense_layer_1_0_batch_norm/beta/Adam"
        string_val: "dense_layer_1_0_batch_norm/beta/Adam_1"
        string_val: "dense_layer_1_1/kernel/Adam"
        string_val: "dense_layer_1_1/kernel/Adam_1"
        string_val: "dense_layer_1_1/bias/Adam"
        string_val: "dense_layer_1_1/bias/Adam_1"
        string_val: "dense_layer_1_1_batch_norm/gamma/Adam"
        string_val: "dense_layer_1_1_batch_norm/gamma/Adam_1"
        string_val: "dense_layer_1_1_batch_norm/beta/Adam"
        string_val: "dense_layer_1_1_batch_norm/beta/Adam_1"
        string_val: "listener/listener_0/fw/lstm_cell/kernel/Adam"
        string_val: "listener/listener_0/fw/lstm_cell/kernel/Adam_1"
        string_val: "listener/listener_0/fw/lstm_cell/bias/Adam"
        string_val: "listener/listener_0/fw/lstm_cell/bias/Adam_1"
        string_val: "listener/listener_0/bw/lstm_cell/kernel/Adam"
        string_val: "listener/listener_0/bw/lstm_cell/kernel/Adam_1"
        string_val: "listener/listener_0/bw/lstm_cell/bias/Adam"
        string_val: "listener/listener_0/bw/lstm_cell/bias/Adam_1"
        string_val: "attention/memory_layer/kernel/Adam"
        string_val: "attention/memory_layer/kernel/Adam_1"
        string_val: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
        string_val: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
        string_val: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
        string_val: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
        string_val: "speller/decoder/projection_layer/kernel/Adam"
        string_val: "speller/decoder/projection_layer/kernel/Adam_1"
        string_val: "speller/decoder/projection_layer/bias/Adam"
        string_val: "speller/decoder/projection_layer/bias/Adam_1"
        string_val: "metrics/mean/total"
        string_val: "metrics/mean/count"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "dense_layer_1_0/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "dense_layer_1_0/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "dense_layer_1_0_batch_norm/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "dense_layer_1_0_batch_norm/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "dense_layer_1_0_batch_norm/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "dense_layer_1_0_batch_norm/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "dense_layer_1_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "dense_layer_1_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "dense_layer_1_1_batch_norm/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "dense_layer_1_1_batch_norm/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "dense_layer_1_1_batch_norm/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "dense_layer_1_1_batch_norm/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "listener/listener_0/fw/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "listener/listener_0/fw/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "listener/listener_0/bw/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "listener/listener_0/bw/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "attention/memory_layer/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "speller/decoder/projection_layer/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "speller/decoder/projection_layer/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "train/beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "train/beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "dense_layer_1_0/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "dense_layer_1_0/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "dense_layer_1_0/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "dense_layer_1_0/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "dense_layer_1_0_batch_norm/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "dense_layer_1_0_batch_norm/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "dense_layer_1_0_batch_norm/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "dense_layer_1_0_batch_norm/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "dense_layer_1_1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "dense_layer_1_1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "dense_layer_1_1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "dense_layer_1_1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "dense_layer_1_1_batch_norm/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "dense_layer_1_1_batch_norm/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "dense_layer_1_1_batch_norm/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "dense_layer_1_1_batch_norm/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_40"
  op: "IsVariableInitialized"
  input: "listener/listener_0/fw/lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_41"
  op: "IsVariableInitialized"
  input: "listener/listener_0/fw/lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_42"
  op: "IsVariableInitialized"
  input: "listener/listener_0/fw/lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_43"
  op: "IsVariableInitialized"
  input: "listener/listener_0/fw/lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_44"
  op: "IsVariableInitialized"
  input: "listener/listener_0/bw/lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_45"
  op: "IsVariableInitialized"
  input: "listener/listener_0/bw/lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_46"
  op: "IsVariableInitialized"
  input: "listener/listener_0/bw/lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_47"
  op: "IsVariableInitialized"
  input: "listener/listener_0/bw/lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_48"
  op: "IsVariableInitialized"
  input: "attention/memory_layer/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_49"
  op: "IsVariableInitialized"
  input: "attention/memory_layer/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_50"
  op: "IsVariableInitialized"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_51"
  op: "IsVariableInitialized"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_52"
  op: "IsVariableInitialized"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_53"
  op: "IsVariableInitialized"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_54"
  op: "IsVariableInitialized"
  input: "speller/decoder/projection_layer/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_55"
  op: "IsVariableInitialized"
  input: "speller/decoder/projection_layer/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_56"
  op: "IsVariableInitialized"
  input: "speller/decoder/projection_layer/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_57"
  op: "IsVariableInitialized"
  input: "speller/decoder/projection_layer/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/IsVariableInitialized"
  input: "report_uninitialized_variables_1/IsVariableInitialized_1"
  input: "report_uninitialized_variables_1/IsVariableInitialized_2"
  input: "report_uninitialized_variables_1/IsVariableInitialized_3"
  input: "report_uninitialized_variables_1/IsVariableInitialized_4"
  input: "report_uninitialized_variables_1/IsVariableInitialized_5"
  input: "report_uninitialized_variables_1/IsVariableInitialized_6"
  input: "report_uninitialized_variables_1/IsVariableInitialized_7"
  input: "report_uninitialized_variables_1/IsVariableInitialized_8"
  input: "report_uninitialized_variables_1/IsVariableInitialized_9"
  input: "report_uninitialized_variables_1/IsVariableInitialized_10"
  input: "report_uninitialized_variables_1/IsVariableInitialized_11"
  input: "report_uninitialized_variables_1/IsVariableInitialized_12"
  input: "report_uninitialized_variables_1/IsVariableInitialized_13"
  input: "report_uninitialized_variables_1/IsVariableInitialized_14"
  input: "report_uninitialized_variables_1/IsVariableInitialized_15"
  input: "report_uninitialized_variables_1/IsVariableInitialized_16"
  input: "report_uninitialized_variables_1/IsVariableInitialized_17"
  input: "report_uninitialized_variables_1/IsVariableInitialized_18"
  input: "report_uninitialized_variables_1/IsVariableInitialized_19"
  input: "report_uninitialized_variables_1/IsVariableInitialized_20"
  input: "report_uninitialized_variables_1/IsVariableInitialized_21"
  input: "report_uninitialized_variables_1/IsVariableInitialized_22"
  input: "report_uninitialized_variables_1/IsVariableInitialized_23"
  input: "report_uninitialized_variables_1/IsVariableInitialized_24"
  input: "report_uninitialized_variables_1/IsVariableInitialized_25"
  input: "report_uninitialized_variables_1/IsVariableInitialized_26"
  input: "report_uninitialized_variables_1/IsVariableInitialized_27"
  input: "report_uninitialized_variables_1/IsVariableInitialized_28"
  input: "report_uninitialized_variables_1/IsVariableInitialized_29"
  input: "report_uninitialized_variables_1/IsVariableInitialized_30"
  input: "report_uninitialized_variables_1/IsVariableInitialized_31"
  input: "report_uninitialized_variables_1/IsVariableInitialized_32"
  input: "report_uninitialized_variables_1/IsVariableInitialized_33"
  input: "report_uninitialized_variables_1/IsVariableInitialized_34"
  input: "report_uninitialized_variables_1/IsVariableInitialized_35"
  input: "report_uninitialized_variables_1/IsVariableInitialized_36"
  input: "report_uninitialized_variables_1/IsVariableInitialized_37"
  input: "report_uninitialized_variables_1/IsVariableInitialized_38"
  input: "report_uninitialized_variables_1/IsVariableInitialized_39"
  input: "report_uninitialized_variables_1/IsVariableInitialized_40"
  input: "report_uninitialized_variables_1/IsVariableInitialized_41"
  input: "report_uninitialized_variables_1/IsVariableInitialized_42"
  input: "report_uninitialized_variables_1/IsVariableInitialized_43"
  input: "report_uninitialized_variables_1/IsVariableInitialized_44"
  input: "report_uninitialized_variables_1/IsVariableInitialized_45"
  input: "report_uninitialized_variables_1/IsVariableInitialized_46"
  input: "report_uninitialized_variables_1/IsVariableInitialized_47"
  input: "report_uninitialized_variables_1/IsVariableInitialized_48"
  input: "report_uninitialized_variables_1/IsVariableInitialized_49"
  input: "report_uninitialized_variables_1/IsVariableInitialized_50"
  input: "report_uninitialized_variables_1/IsVariableInitialized_51"
  input: "report_uninitialized_variables_1/IsVariableInitialized_52"
  input: "report_uninitialized_variables_1/IsVariableInitialized_53"
  input: "report_uninitialized_variables_1/IsVariableInitialized_54"
  input: "report_uninitialized_variables_1/IsVariableInitialized_55"
  input: "report_uninitialized_variables_1/IsVariableInitialized_56"
  input: "report_uninitialized_variables_1/IsVariableInitialized_57"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 58
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 58
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 58
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 58
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 58
          }
        }
        string_val: "global_step"
        string_val: "dense_layer_1_0/kernel"
        string_val: "dense_layer_1_0/bias"
        string_val: "dense_layer_1_0_batch_norm/gamma"
        string_val: "dense_layer_1_0_batch_norm/beta"
        string_val: "dense_layer_1_0_batch_norm/moving_mean"
        string_val: "dense_layer_1_0_batch_norm/moving_variance"
        string_val: "dense_layer_1_1/kernel"
        string_val: "dense_layer_1_1/bias"
        string_val: "dense_layer_1_1_batch_norm/gamma"
        string_val: "dense_layer_1_1_batch_norm/beta"
        string_val: "dense_layer_1_1_batch_norm/moving_mean"
        string_val: "dense_layer_1_1_batch_norm/moving_variance"
        string_val: "listener/listener_0/fw/lstm_cell/kernel"
        string_val: "listener/listener_0/fw/lstm_cell/bias"
        string_val: "listener/listener_0/bw/lstm_cell/kernel"
        string_val: "listener/listener_0/bw/lstm_cell/bias"
        string_val: "attention/memory_layer/kernel"
        string_val: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel"
        string_val: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias"
        string_val: "speller/decoder/projection_layer/kernel"
        string_val: "speller/decoder/projection_layer/bias"
        string_val: "train/beta1_power"
        string_val: "train/beta2_power"
        string_val: "dense_layer_1_0/kernel/Adam"
        string_val: "dense_layer_1_0/kernel/Adam_1"
        string_val: "dense_layer_1_0/bias/Adam"
        string_val: "dense_layer_1_0/bias/Adam_1"
        string_val: "dense_layer_1_0_batch_norm/gamma/Adam"
        string_val: "dense_layer_1_0_batch_norm/gamma/Adam_1"
        string_val: "dense_layer_1_0_batch_norm/beta/Adam"
        string_val: "dense_layer_1_0_batch_norm/beta/Adam_1"
        string_val: "dense_layer_1_1/kernel/Adam"
        string_val: "dense_layer_1_1/kernel/Adam_1"
        string_val: "dense_layer_1_1/bias/Adam"
        string_val: "dense_layer_1_1/bias/Adam_1"
        string_val: "dense_layer_1_1_batch_norm/gamma/Adam"
        string_val: "dense_layer_1_1_batch_norm/gamma/Adam_1"
        string_val: "dense_layer_1_1_batch_norm/beta/Adam"
        string_val: "dense_layer_1_1_batch_norm/beta/Adam_1"
        string_val: "listener/listener_0/fw/lstm_cell/kernel/Adam"
        string_val: "listener/listener_0/fw/lstm_cell/kernel/Adam_1"
        string_val: "listener/listener_0/fw/lstm_cell/bias/Adam"
        string_val: "listener/listener_0/fw/lstm_cell/bias/Adam_1"
        string_val: "listener/listener_0/bw/lstm_cell/kernel/Adam"
        string_val: "listener/listener_0/bw/lstm_cell/kernel/Adam_1"
        string_val: "listener/listener_0/bw/lstm_cell/bias/Adam"
        string_val: "listener/listener_0/bw/lstm_cell/bias/Adam_1"
        string_val: "attention/memory_layer/kernel/Adam"
        string_val: "attention/memory_layer/kernel/Adam_1"
        string_val: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
        string_val: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
        string_val: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
        string_val: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
        string_val: "speller/decoder/projection_layer/kernel/Adam"
        string_val: "speller/decoder/projection_layer/kernel/Adam_1"
        string_val: "speller/decoder/projection_layer/bias/Adam"
        string_val: "speller/decoder/projection_layer/bias/Adam_1"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 58
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 58
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 58
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 58
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 58
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_1"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  input: "report_uninitialized_resources_1/Const"
  input: "concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
  input: "^metrics/mean/count/Assign"
  input: "^metrics/mean/total/Assign"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "dense_layer_1/dense_layer_1"
  input: "dense_layer_1/dense_layer_1_2"
  input: "listener/listener"
  input: "attention/attention_cell"
  input: "ler"
  input: "loss_1"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/filename/input"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/StringJoin/inputs_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_da936c1f40d64ec5b999e8041a85dd85/part"
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/StringJoin/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 58
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 58
          }
        }
        string_val: "attention/memory_layer/kernel"
        string_val: "attention/memory_layer/kernel/Adam"
        string_val: "attention/memory_layer/kernel/Adam_1"
        string_val: "dense_layer_1_0/bias"
        string_val: "dense_layer_1_0/bias/Adam"
        string_val: "dense_layer_1_0/bias/Adam_1"
        string_val: "dense_layer_1_0/kernel"
        string_val: "dense_layer_1_0/kernel/Adam"
        string_val: "dense_layer_1_0/kernel/Adam_1"
        string_val: "dense_layer_1_0_batch_norm/beta"
        string_val: "dense_layer_1_0_batch_norm/beta/Adam"
        string_val: "dense_layer_1_0_batch_norm/beta/Adam_1"
        string_val: "dense_layer_1_0_batch_norm/gamma"
        string_val: "dense_layer_1_0_batch_norm/gamma/Adam"
        string_val: "dense_layer_1_0_batch_norm/gamma/Adam_1"
        string_val: "dense_layer_1_0_batch_norm/moving_mean"
        string_val: "dense_layer_1_0_batch_norm/moving_variance"
        string_val: "dense_layer_1_1/bias"
        string_val: "dense_layer_1_1/bias/Adam"
        string_val: "dense_layer_1_1/bias/Adam_1"
        string_val: "dense_layer_1_1/kernel"
        string_val: "dense_layer_1_1/kernel/Adam"
        string_val: "dense_layer_1_1/kernel/Adam_1"
        string_val: "dense_layer_1_1_batch_norm/beta"
        string_val: "dense_layer_1_1_batch_norm/beta/Adam"
        string_val: "dense_layer_1_1_batch_norm/beta/Adam_1"
        string_val: "dense_layer_1_1_batch_norm/gamma"
        string_val: "dense_layer_1_1_batch_norm/gamma/Adam"
        string_val: "dense_layer_1_1_batch_norm/gamma/Adam_1"
        string_val: "dense_layer_1_1_batch_norm/moving_mean"
        string_val: "dense_layer_1_1_batch_norm/moving_variance"
        string_val: "global_step"
        string_val: "listener/listener_0/bw/lstm_cell/bias"
        string_val: "listener/listener_0/bw/lstm_cell/bias/Adam"
        string_val: "listener/listener_0/bw/lstm_cell/bias/Adam_1"
        string_val: "listener/listener_0/bw/lstm_cell/kernel"
        string_val: "listener/listener_0/bw/lstm_cell/kernel/Adam"
        string_val: "listener/listener_0/bw/lstm_cell/kernel/Adam_1"
        string_val: "listener/listener_0/fw/lstm_cell/bias"
        string_val: "listener/listener_0/fw/lstm_cell/bias/Adam"
        string_val: "listener/listener_0/fw/lstm_cell/bias/Adam_1"
        string_val: "listener/listener_0/fw/lstm_cell/kernel"
        string_val: "listener/listener_0/fw/lstm_cell/kernel/Adam"
        string_val: "listener/listener_0/fw/lstm_cell/kernel/Adam_1"
        string_val: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias"
        string_val: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
        string_val: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
        string_val: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel"
        string_val: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
        string_val: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
        string_val: "speller/decoder/projection_layer/bias"
        string_val: "speller/decoder/projection_layer/bias/Adam"
        string_val: "speller/decoder/projection_layer/bias/Adam_1"
        string_val: "speller/decoder/projection_layer/kernel"
        string_val: "speller/decoder/projection_layer/kernel/Adam"
        string_val: "speller/decoder/projection_layer/kernel/Adam_1"
        string_val: "train/beta1_power"
        string_val: "train/beta2_power"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 58
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 58
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "attention/memory_layer/kernel"
  input: "attention/memory_layer/kernel/Adam"
  input: "attention/memory_layer/kernel/Adam_1"
  input: "dense_layer_1_0/bias"
  input: "dense_layer_1_0/bias/Adam"
  input: "dense_layer_1_0/bias/Adam_1"
  input: "dense_layer_1_0/kernel"
  input: "dense_layer_1_0/kernel/Adam"
  input: "dense_layer_1_0/kernel/Adam_1"
  input: "dense_layer_1_0_batch_norm/beta"
  input: "dense_layer_1_0_batch_norm/beta/Adam"
  input: "dense_layer_1_0_batch_norm/beta/Adam_1"
  input: "dense_layer_1_0_batch_norm/gamma"
  input: "dense_layer_1_0_batch_norm/gamma/Adam"
  input: "dense_layer_1_0_batch_norm/gamma/Adam_1"
  input: "dense_layer_1_0_batch_norm/moving_mean"
  input: "dense_layer_1_0_batch_norm/moving_variance"
  input: "dense_layer_1_1/bias"
  input: "dense_layer_1_1/bias/Adam"
  input: "dense_layer_1_1/bias/Adam_1"
  input: "dense_layer_1_1/kernel"
  input: "dense_layer_1_1/kernel/Adam"
  input: "dense_layer_1_1/kernel/Adam_1"
  input: "dense_layer_1_1_batch_norm/beta"
  input: "dense_layer_1_1_batch_norm/beta/Adam"
  input: "dense_layer_1_1_batch_norm/beta/Adam_1"
  input: "dense_layer_1_1_batch_norm/gamma"
  input: "dense_layer_1_1_batch_norm/gamma/Adam"
  input: "dense_layer_1_1_batch_norm/gamma/Adam_1"
  input: "dense_layer_1_1_batch_norm/moving_mean"
  input: "dense_layer_1_1_batch_norm/moving_variance"
  input: "global_step"
  input: "listener/listener_0/bw/lstm_cell/bias"
  input: "listener/listener_0/bw/lstm_cell/bias/Adam"
  input: "listener/listener_0/bw/lstm_cell/bias/Adam_1"
  input: "listener/listener_0/bw/lstm_cell/kernel"
  input: "listener/listener_0/bw/lstm_cell/kernel/Adam"
  input: "listener/listener_0/bw/lstm_cell/kernel/Adam_1"
  input: "listener/listener_0/fw/lstm_cell/bias"
  input: "listener/listener_0/fw/lstm_cell/bias/Adam"
  input: "listener/listener_0/fw/lstm_cell/bias/Adam_1"
  input: "listener/listener_0/fw/lstm_cell/kernel"
  input: "listener/listener_0/fw/lstm_cell/kernel/Adam"
  input: "listener/listener_0/fw/lstm_cell/kernel/Adam_1"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  input: "speller/decoder/projection_layer/bias"
  input: "speller/decoder/projection_layer/bias/Adam"
  input: "speller/decoder/projection_layer/bias/Adam_1"
  input: "speller/decoder/projection_layer/kernel"
  input: "speller/decoder/projection_layer/kernel/Adam"
  input: "speller/decoder/projection_layer/kernel/Adam_1"
  input: "train/beta1_power"
  input: "train/beta2_power"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 58
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 58
          }
        }
        string_val: "attention/memory_layer/kernel"
        string_val: "attention/memory_layer/kernel/Adam"
        string_val: "attention/memory_layer/kernel/Adam_1"
        string_val: "dense_layer_1_0/bias"
        string_val: "dense_layer_1_0/bias/Adam"
        string_val: "dense_layer_1_0/bias/Adam_1"
        string_val: "dense_layer_1_0/kernel"
        string_val: "dense_layer_1_0/kernel/Adam"
        string_val: "dense_layer_1_0/kernel/Adam_1"
        string_val: "dense_layer_1_0_batch_norm/beta"
        string_val: "dense_layer_1_0_batch_norm/beta/Adam"
        string_val: "dense_layer_1_0_batch_norm/beta/Adam_1"
        string_val: "dense_layer_1_0_batch_norm/gamma"
        string_val: "dense_layer_1_0_batch_norm/gamma/Adam"
        string_val: "dense_layer_1_0_batch_norm/gamma/Adam_1"
        string_val: "dense_layer_1_0_batch_norm/moving_mean"
        string_val: "dense_layer_1_0_batch_norm/moving_variance"
        string_val: "dense_layer_1_1/bias"
        string_val: "dense_layer_1_1/bias/Adam"
        string_val: "dense_layer_1_1/bias/Adam_1"
        string_val: "dense_layer_1_1/kernel"
        string_val: "dense_layer_1_1/kernel/Adam"
        string_val: "dense_layer_1_1/kernel/Adam_1"
        string_val: "dense_layer_1_1_batch_norm/beta"
        string_val: "dense_layer_1_1_batch_norm/beta/Adam"
        string_val: "dense_layer_1_1_batch_norm/beta/Adam_1"
        string_val: "dense_layer_1_1_batch_norm/gamma"
        string_val: "dense_layer_1_1_batch_norm/gamma/Adam"
        string_val: "dense_layer_1_1_batch_norm/gamma/Adam_1"
        string_val: "dense_layer_1_1_batch_norm/moving_mean"
        string_val: "dense_layer_1_1_batch_norm/moving_variance"
        string_val: "global_step"
        string_val: "listener/listener_0/bw/lstm_cell/bias"
        string_val: "listener/listener_0/bw/lstm_cell/bias/Adam"
        string_val: "listener/listener_0/bw/lstm_cell/bias/Adam_1"
        string_val: "listener/listener_0/bw/lstm_cell/kernel"
        string_val: "listener/listener_0/bw/lstm_cell/kernel/Adam"
        string_val: "listener/listener_0/bw/lstm_cell/kernel/Adam_1"
        string_val: "listener/listener_0/fw/lstm_cell/bias"
        string_val: "listener/listener_0/fw/lstm_cell/bias/Adam"
        string_val: "listener/listener_0/fw/lstm_cell/bias/Adam_1"
        string_val: "listener/listener_0/fw/lstm_cell/kernel"
        string_val: "listener/listener_0/fw/lstm_cell/kernel/Adam"
        string_val: "listener/listener_0/fw/lstm_cell/kernel/Adam_1"
        string_val: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias"
        string_val: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
        string_val: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
        string_val: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel"
        string_val: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
        string_val: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
        string_val: "speller/decoder/projection_layer/bias"
        string_val: "speller/decoder/projection_layer/bias/Adam"
        string_val: "speller/decoder/projection_layer/bias/Adam_1"
        string_val: "speller/decoder/projection_layer/kernel"
        string_val: "speller/decoder/projection_layer/kernel/Adam"
        string_val: "speller/decoder/projection_layer/kernel/Adam_1"
        string_val: "train/beta1_power"
        string_val: "train/beta2_power"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 58
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 58
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "attention/memory_layer/kernel"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "attention/memory_layer/kernel/Adam"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "attention/memory_layer/kernel/Adam_1"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "dense_layer_1_0/bias"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "dense_layer_1_0/bias/Adam"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "dense_layer_1_0/bias/Adam_1"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "dense_layer_1_0/kernel"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 494
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "dense_layer_1_0/kernel/Adam"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 494
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "dense_layer_1_0/kernel/Adam_1"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 494
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "dense_layer_1_0_batch_norm/beta"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "dense_layer_1_0_batch_norm/beta/Adam"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "dense_layer_1_0_batch_norm/beta/Adam_1"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "dense_layer_1_0_batch_norm/gamma"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "dense_layer_1_0_batch_norm/gamma/Adam"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "dense_layer_1_0_batch_norm/gamma/Adam_1"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "dense_layer_1_0_batch_norm/moving_mean"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "dense_layer_1_0_batch_norm/moving_variance"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_0_batch_norm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "dense_layer_1_1/bias"
  input: "save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "dense_layer_1_1/bias/Adam"
  input: "save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "dense_layer_1_1/bias/Adam_1"
  input: "save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "dense_layer_1_1/kernel"
  input: "save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "dense_layer_1_1/kernel/Adam"
  input: "save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "dense_layer_1_1/kernel/Adam_1"
  input: "save/RestoreV2:22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_23"
  op: "Assign"
  input: "dense_layer_1_1_batch_norm/beta"
  input: "save/RestoreV2:23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_24"
  op: "Assign"
  input: "dense_layer_1_1_batch_norm/beta/Adam"
  input: "save/RestoreV2:24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_25"
  op: "Assign"
  input: "dense_layer_1_1_batch_norm/beta/Adam_1"
  input: "save/RestoreV2:25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_26"
  op: "Assign"
  input: "dense_layer_1_1_batch_norm/gamma"
  input: "save/RestoreV2:26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_27"
  op: "Assign"
  input: "dense_layer_1_1_batch_norm/gamma/Adam"
  input: "save/RestoreV2:27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_28"
  op: "Assign"
  input: "dense_layer_1_1_batch_norm/gamma/Adam_1"
  input: "save/RestoreV2:28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_29"
  op: "Assign"
  input: "dense_layer_1_1_batch_norm/moving_mean"
  input: "save/RestoreV2:29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_30"
  op: "Assign"
  input: "dense_layer_1_1_batch_norm/moving_variance"
  input: "save/RestoreV2:30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_layer_1_1_batch_norm/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_31"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2:31"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_32"
  op: "Assign"
  input: "listener/listener_0/bw/lstm_cell/bias"
  input: "save/RestoreV2:32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_33"
  op: "Assign"
  input: "listener/listener_0/bw/lstm_cell/bias/Adam"
  input: "save/RestoreV2:33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_34"
  op: "Assign"
  input: "listener/listener_0/bw/lstm_cell/bias/Adam_1"
  input: "save/RestoreV2:34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_35"
  op: "Assign"
  input: "listener/listener_0/bw/lstm_cell/kernel"
  input: "save/RestoreV2:35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_36"
  op: "Assign"
  input: "listener/listener_0/bw/lstm_cell/kernel/Adam"
  input: "save/RestoreV2:36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_37"
  op: "Assign"
  input: "listener/listener_0/bw/lstm_cell/kernel/Adam_1"
  input: "save/RestoreV2:37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_38"
  op: "Assign"
  input: "listener/listener_0/fw/lstm_cell/bias"
  input: "save/RestoreV2:38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_39"
  op: "Assign"
  input: "listener/listener_0/fw/lstm_cell/bias/Adam"
  input: "save/RestoreV2:39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_40"
  op: "Assign"
  input: "listener/listener_0/fw/lstm_cell/bias/Adam_1"
  input: "save/RestoreV2:40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_41"
  op: "Assign"
  input: "listener/listener_0/fw/lstm_cell/kernel"
  input: "save/RestoreV2:41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_42"
  op: "Assign"
  input: "listener/listener_0/fw/lstm_cell/kernel/Adam"
  input: "save/RestoreV2:42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_43"
  op: "Assign"
  input: "listener/listener_0/fw/lstm_cell/kernel/Adam_1"
  input: "save/RestoreV2:43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@listener/listener_0/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 912
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_44"
  op: "Assign"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias"
  input: "save/RestoreV2:44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_45"
  op: "Assign"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  input: "save/RestoreV2:45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_46"
  op: "Assign"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  input: "save/RestoreV2:46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_47"
  op: "Assign"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel"
  input: "save/RestoreV2:47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2590
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_48"
  op: "Assign"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  input: "save/RestoreV2:48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2590
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_49"
  op: "Assign"
  input: "speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  input: "save/RestoreV2:49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/attention_wrapper/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2590
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_50"
  op: "Assign"
  input: "speller/decoder/projection_layer/bias"
  input: "save/RestoreV2:50"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_51"
  op: "Assign"
  input: "speller/decoder/projection_layer/bias/Adam"
  input: "save/RestoreV2:51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_52"
  op: "Assign"
  input: "speller/decoder/projection_layer/bias/Adam_1"
  input: "save/RestoreV2:52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_53"
  op: "Assign"
  input: "speller/decoder/projection_layer/kernel"
  input: "save/RestoreV2:53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_54"
  op: "Assign"
  input: "speller/decoder/projection_layer/kernel/Adam"
  input: "save/RestoreV2:54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_55"
  op: "Assign"
  input: "speller/decoder/projection_layer/kernel/Adam_1"
  input: "save/RestoreV2:55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@speller/decoder/projection_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_56"
  op: "Assign"
  input: "train/beta1_power"
  input: "save/RestoreV2:56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_57"
  op: "Assign"
  input: "train/beta2_power"
  input: "save/RestoreV2:57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@attention/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_2"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
  input: "^save/Assign_23"
  input: "^save/Assign_24"
  input: "^save/Assign_25"
  input: "^save/Assign_26"
  input: "^save/Assign_27"
  input: "^save/Assign_28"
  input: "^save/Assign_29"
  input: "^save/Assign_3"
  input: "^save/Assign_30"
  input: "^save/Assign_31"
  input: "^save/Assign_32"
  input: "^save/Assign_33"
  input: "^save/Assign_34"
  input: "^save/Assign_35"
  input: "^save/Assign_36"
  input: "^save/Assign_37"
  input: "^save/Assign_38"
  input: "^save/Assign_39"
  input: "^save/Assign_4"
  input: "^save/Assign_40"
  input: "^save/Assign_41"
  input: "^save/Assign_42"
  input: "^save/Assign_43"
  input: "^save/Assign_44"
  input: "^save/Assign_45"
  input: "^save/Assign_46"
  input: "^save/Assign_47"
  input: "^save/Assign_48"
  input: "^save/Assign_49"
  input: "^save/Assign_5"
  input: "^save/Assign_50"
  input: "^save/Assign_51"
  input: "^save/Assign_52"
  input: "^save/Assign_53"
  input: "^save/Assign_54"
  input: "^save/Assign_55"
  input: "^save/Assign_56"
  input: "^save/Assign_57"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
library {
  function {
    signature {
      name: "__inference_Dataset_map_<lambda>_3113"
      input_arg {
        name: "args_0"
        type: DT_FLOAT
      }
      input_arg {
        name: "args_1"
        type: DT_INT64
      }
      input_arg {
        name: "args_2"
        type: DT_INT64
      }
      input_arg {
        name: "args_3"
        type: DT_INT64
      }
      input_arg {
        name: "args_4"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_INT64
      }
      output_arg {
        name: "identity_2"
        type: DT_INT64
      }
      output_arg {
        name: "identity_3"
        type: DT_INT64
      }
      output_arg {
        name: "identity_4"
        type: DT_INT64
      }
    }
    node_def {
      name: "Size"
      op: "Size"
      input: "args_1"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT64
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "args_0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "args_1"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "args_2"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "args_3"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "Size:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_1"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_2"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_3"
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_4"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_Dataset_flat_map_read_one_file_3053"
      input_arg {
        name: "args_0"
        type: DT_STRING
      }
      output_arg {
        name: "identity"
        type: DT_VARIANT
      }
      is_stateful: true
      control_output: "TFRecordDataset"
    }
    node_def {
      name: "compression_type"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: ""
          }
        }
      }
    }
    node_def {
      name: "buffer_size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 262144
          }
        }
      }
    }
    node_def {
      name: "TFRecordDataset"
      op: "TFRecordDataset"
      input: "args_0"
      input: "compression_type:output:0"
      input: "buffer_size:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "TFRecordDataset:handle:0"
      input: "^TFRecordDataset"
      attr {
        key: "T"
        value {
          type: DT_VARIANT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    control_ret {
      key: "TFRecordDataset"
      value: "TFRecordDataset"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "_make_dataset_6tXAxBJ30xE"
      output_arg {
        name: "modeldataset"
        type: DT_VARIANT
      }
      description: "Factory function for a dataset."
      is_stateful: true
    }
    node_def {
      name: "optimizations"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 3
              }
            }
            string_val: "map_and_batch_fusion"
            string_val: "noop_elimination"
            string_val: "shuffle_and_repeat_fusion"
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/Const"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 46
              }
            }
            string_val: "drive/My Drive/classic/train_database_29.tfrecords"
            string_val: "drive/My Drive/classic/train_database_20.tfrecords"
            string_val: "drive/My Drive/classic/train_database_10.tfrecords"
            string_val: "drive/My Drive/classic/train_database_27.tfrecords"
            string_val: "drive/My Drive/classic2/train_database_56.tfrecords"
            string_val: "drive/My Drive/classic/train_database_9.tfrecords"
            string_val: "drive/My Drive/classic2/train_database_57.tfrecords"
            string_val: "drive/My Drive/classic/train_database_44.tfrecords"
            string_val: "drive/My Drive/classic2/train_database_53.tfrecords"
            string_val: "drive/My Drive/classic2/train_database_58.tfrecords"
            string_val: "drive/My Drive/classic/train_database_26.tfrecords"
            string_val: "drive/My Drive/classic/train_database_21.tfrecords"
            string_val: "drive/My Drive/classic/train_database_50.tfrecords"
            string_val: "drive/My Drive/classic2/train_database_75.tfrecords"
            string_val: "drive/My Drive/classic2/train_database_60.tfrecords"
            string_val: "drive/My Drive/classic2/train_database_52.tfrecords"
            string_val: "drive/My Drive/classic2/train_database_76.tfrecords"
            string_val: "drive/My Drive/classic2/train_database_65.tfrecords"
            string_val: "drive/My Drive/classic/train_database_40.tfrecords"
            string_val: "drive/My Drive/classic/train_database_2.tfrecords"
            string_val: "drive/My Drive/classic/train_database_14.tfrecords"
            string_val: "drive/My Drive/classic2/train_database_81.tfrecords"
            string_val: "drive/My Drive/classic/train_database_49.tfrecords"
            string_val: "drive/My Drive/classic/train_database_16.tfrecords"
            string_val: "drive/My Drive/classic/train_database_6.tfrecords"
            string_val: "drive/My Drive/classic2/train_database_92.tfrecords"
            string_val: "drive/My Drive/classic2/train_database_64.tfrecords"
            string_val: "drive/My Drive/classic2/train_database_91.tfrecords"
            string_val: "drive/My Drive/classic/train_database_5.tfrecords"
            string_val: "drive/My Drive/classic2/train_database_84.tfrecords"
            string_val: "drive/My Drive/classic2/train_database_54.tfrecords"
            string_val: "drive/My Drive/classic/train_database_30.tfrecords"
            string_val: "drive/My Drive/classic/train_database_12.tfrecords"
            string_val: "drive/My Drive/classic2/train_database_74.tfrecords"
            string_val: "drive/My Drive/classic2/train_database_90.tfrecords"
            string_val: "drive/My Drive/classic2/train_database_80.tfrecords"
            string_val: "drive/My Drive/classic2/train_database_67.tfrecords"
            string_val: "drive/My Drive/classic/train_database_7.tfrecords"
            string_val: "drive/My Drive/classic2/train_database_61.tfrecords"
            string_val: "drive/My Drive/classic/train_database_22.tfrecords"
            string_val: "drive/My Drive/classic2/train_database_51.tfrecords"
            string_val: "drive/My Drive/classic/train_database_4.tfrecords"
            string_val: "drive/My Drive/classic/train_database_48.tfrecords"
            string_val: "drive/My Drive/classic/train_database_17.tfrecords"
            string_val: "drive/My Drive/classic2/train_database_66.tfrecords"
            string_val: "drive/My Drive/classic2/train_database_83.tfrecords"
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/flat_filenames/shape"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/flat_filenames"
      op: "Reshape"
      input: "OptimizeDataset/Const:output:0"
      input: "OptimizeDataset/flat_filenames/shape:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "OptimizeDataset/TensorSliceDataset"
      op: "TensorSliceDataset"
      input: "OptimizeDataset/flat_filenames:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/FlatMapDataset"
      op: "FlatMapDataset"
      input: "OptimizeDataset/TensorSliceDataset:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "Targuments"
        value {
          list {
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_Dataset_flat_map_read_one_file_3053"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_STRING
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/MapDataset"
      op: "MapDataset"
      input: "OptimizeDataset/FlatMapDataset:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "Targuments"
        value {
          list {
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_Dataset_map_tfrecord_parse_dense_fn_3081"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_INT64
            type: DT_INT64
            type: DT_INT64
          }
        }
      }
      attr {
        key: "preserve_cardinality"
        value {
          b: false
        }
      }
      attr {
        key: "use_inter_op_parallelism"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptimizeDataset/MapDataset_1"
      op: "MapDataset"
      input: "OptimizeDataset/MapDataset:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "Targuments"
        value {
          list {
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_Dataset_map_<lambda>_3099"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_INT64
            type: DT_INT64
            type: DT_INT64
            type: DT_INT64
          }
        }
      }
      attr {
        key: "preserve_cardinality"
        value {
          b: false
        }
      }
      attr {
        key: "use_inter_op_parallelism"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptimizeDataset/MapDataset_2"
      op: "MapDataset"
      input: "OptimizeDataset/MapDataset_1:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "Targuments"
        value {
          list {
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_Dataset_map_<lambda>_3113"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_INT64
            type: DT_INT64
            type: DT_INT64
            type: DT_INT64
          }
        }
      }
      attr {
        key: "preserve_cardinality"
        value {
          b: false
        }
      }
      attr {
        key: "use_inter_op_parallelism"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptimizeDataset/batch_size"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 40
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/Const_6"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\377\377\377\377\356\001\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/Const_7"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 1
              }
            }
            int64_val: -1
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/Const_8"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 1
              }
            }
            int64_val: -1
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/Const_9"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/Const_10"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/Const_1"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/Const_2"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 28
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/Const_3"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 28
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/Const_4"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/Const_5"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/drop_remainder"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_BOOL
            tensor_shape {
            }
            bool_val: false
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/PaddedBatchDatasetV2"
      op: "PaddedBatchDatasetV2"
      input: "OptimizeDataset/MapDataset_2:handle:0"
      input: "OptimizeDataset/batch_size:output:0"
      input: "OptimizeDataset/Const_6:output:0"
      input: "OptimizeDataset/Const_7:output:0"
      input: "OptimizeDataset/Const_8:output:0"
      input: "OptimizeDataset/Const_9:output:0"
      input: "OptimizeDataset/Const_10:output:0"
      input: "OptimizeDataset/Const_1:output:0"
      input: "OptimizeDataset/Const_2:output:0"
      input: "OptimizeDataset/Const_3:output:0"
      input: "OptimizeDataset/Const_4:output:0"
      input: "OptimizeDataset/Const_5:output:0"
      input: "OptimizeDataset/drop_remainder:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 5
        }
      }
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_INT64
            type: DT_INT64
            type: DT_INT64
            type: DT_INT64
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 494
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "parallel_copy"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptimizeDataset/buffer_size"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 5
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/seed"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/seed2"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/ShuffleDataset"
      op: "ShuffleDataset"
      input: "OptimizeDataset/PaddedBatchDatasetV2:handle:0"
      input: "OptimizeDataset/buffer_size:output:0"
      input: "OptimizeDataset/seed:output:0"
      input: "OptimizeDataset/seed2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 494
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_INT64
            type: DT_INT64
            type: DT_INT64
            type: DT_INT64
          }
        }
      }
      attr {
        key: "reshuffle_each_iteration"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptimizeDataset/count"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 1000
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/RepeatDataset"
      op: "RepeatDataset"
      input: "OptimizeDataset/ShuffleDataset:handle:0"
      input: "OptimizeDataset/count:output:0"
      device: "/device:CPU:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 494
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_INT64
            type: DT_INT64
            type: DT_INT64
            type: DT_INT64
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset"
      op: "OptimizeDataset"
      input: "OptimizeDataset/RepeatDataset:handle:0"
      input: "optimizations:output:0"
      device: "/device:CPU:0"
      attr {
        key: "optimization_configs"
        value {
          list {
            s: "map_vectorization:use_choose_fastest:false"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 494
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_INT64
            type: DT_INT64
            type: DT_INT64
            type: DT_INT64
          }
        }
      }
    }
    node_def {
      name: "ModelDataset"
      op: "ModelDataset"
      input: "OptimizeDataset:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "cpu_budget"
        value {
          i: 0
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 494
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_INT64
            type: DT_INT64
            type: DT_INT64
            type: DT_INT64
          }
        }
      }
    }
    ret {
      key: "modeldataset"
      value: "ModelDataset:handle:0"
    }
    attr {
      key: "_disable_call_shape_inference"
      value {
        b: true
      }
    }
  }
  function {
    signature {
      name: "__inference_Dataset_map_tfrecord_parse_dense_fn_3081"
      input_arg {
        name: "args_0"
        type: DT_STRING
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_INT64
      }
      output_arg {
        name: "identity_2"
        type: DT_INT64
      }
      output_arg {
        name: "identity_3"
        type: DT_INT64
      }
    }
    node_def {
      name: "ParseSingleSequenceExample/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node_def {
      name: "ParseSingleSequenceExample/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node_def {
      name: "ParseSingleSequenceExample/ParseSingleSequenceExample/feature_list_dense_missing_assumed_empty"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node_def {
      name: "ParseSingleSequenceExample/ParseSingleSequenceExample/context_sparse_keys_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "target"
          }
        }
      }
    }
    node_def {
      name: "ParseSingleSequenceExample/ParseSingleSequenceExample/context_dense_keys_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "feat_len"
          }
        }
      }
    }
    node_def {
      name: "ParseSingleSequenceExample/ParseSingleSequenceExample/context_dense_keys_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "target_len"
          }
        }
      }
    }
    node_def {
      name: "ParseSingleSequenceExample/ParseSingleSequenceExample/feature_list_sparse_keys_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "feature"
          }
        }
      }
    }
    node_def {
      name: "ParseSingleSequenceExample/ParseSingleSequenceExample/debug_name"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: ""
          }
        }
      }
    }
    node_def {
      name: "ParseSingleSequenceExample/ParseSingleSequenceExample"
      op: "ParseSingleSequenceExample"
      input: "args_0"
      input: "ParseSingleSequenceExample/ParseSingleSequenceExample/feature_list_dense_missing_assumed_empty:output:0"
      input: "ParseSingleSequenceExample/ParseSingleSequenceExample/context_sparse_keys_0:output:0"
      input: "ParseSingleSequenceExample/ParseSingleSequenceExample/context_dense_keys_0:output:0"
      input: "ParseSingleSequenceExample/ParseSingleSequenceExample/context_dense_keys_1:output:0"
      input: "ParseSingleSequenceExample/ParseSingleSequenceExample/feature_list_sparse_keys_0:output:0"
      input: "ParseSingleSequenceExample/Const:output:0"
      input: "ParseSingleSequenceExample/Const_1:output:0"
      input: "ParseSingleSequenceExample/ParseSingleSequenceExample/debug_name:output:0"
      attr {
        key: "Ncontext_dense"
        value {
          i: 2
        }
      }
      attr {
        key: "Ncontext_sparse"
        value {
          i: 1
        }
      }
      attr {
        key: "Nfeature_list_dense"
        value {
          i: 0
        }
      }
      attr {
        key: "Nfeature_list_sparse"
        value {
          i: 1
        }
      }
      attr {
        key: "Tcontext_dense"
        value {
          list {
            type: DT_INT64
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: 1
              }
            }
            shape {
            }
            shape {
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "context_dense_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "context_sparse_types"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "feature_list_dense_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "feature_list_dense_types"
        value {
          list {
          }
        }
      }
      attr {
        key: "feature_list_sparse_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node_def {
      name: "SparseToDense/default_value"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "SparseToDense"
      op: "SparseToDense"
      input: "ParseSingleSequenceExample/ParseSingleSequenceExample:feature_list_sparse_indices:0"
      input: "ParseSingleSequenceExample/ParseSingleSequenceExample:feature_list_sparse_shapes:0"
      input: "ParseSingleSequenceExample/ParseSingleSequenceExample:feature_list_sparse_values:0"
      input: "SparseToDense/default_value:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "SparseToDense_1/default_value"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "SparseToDense_1"
      op: "SparseToDense"
      input: "ParseSingleSequenceExample/ParseSingleSequenceExample:context_sparse_indices:0"
      input: "ParseSingleSequenceExample/ParseSingleSequenceExample:context_sparse_shapes:0"
      input: "ParseSingleSequenceExample/ParseSingleSequenceExample:context_sparse_values:0"
      input: "SparseToDense_1/default_value:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "SparseToDense:dense:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "SparseToDense_1:dense:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "ParseSingleSequenceExample/ParseSingleSequenceExample:context_dense_values:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "ParseSingleSequenceExample/ParseSingleSequenceExample:context_dense_values:1"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_Dataset_map_<lambda>_3099"
      input_arg {
        name: "args_0"
        type: DT_FLOAT
      }
      input_arg {
        name: "args_1"
        type: DT_INT64
      }
      input_arg {
        name: "args_2"
        type: DT_INT64
      }
      input_arg {
        name: "args_3"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_INT64
      }
      output_arg {
        name: "identity_2"
        type: DT_INT64
      }
      output_arg {
        name: "identity_3"
        type: DT_INT64
      }
      output_arg {
        name: "identity_4"
        type: DT_INT64
      }
    }
    node_def {
      name: "concat/values_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 1
              }
            }
            int64_val: 27
          }
        }
      }
    }
    node_def {
      name: "concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "concat"
      op: "ConcatV2"
      input: "concat/values_0:output:0"
      input: "args_1"
      input: "concat/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "concat_1/values_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 1
              }
            }
            int64_val: 28
          }
        }
      }
    }
    node_def {
      name: "concat_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "concat_1"
      op: "ConcatV2"
      input: "args_1"
      input: "concat_1/values_1:output:0"
      input: "concat_1/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "args_0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "concat:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "concat_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "args_2"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "args_3"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_1"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_2"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_3"
          }
        }
      }
    }
  }
}
versions {
  producer: 38
  min_consumer: 12
}
